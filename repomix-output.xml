This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  ISSUE_TEMPLATE/
    bug_report.yml
  CODE_OF_CONDUCT.md
  CONTRIBUTING.md
  FUNDING.yml
  PULL_REQUEST_TEMPLATE.md
public/
  1rsc.json
  2rsc.json
  avatar3.svg
  robots.txt
src/
  apis/
    notion-client/
      getPosts.ts
      getRecordMap.ts
      index.ts
    index.ts
  assets/
    fonts/
      roboto/
        index.ts
      index.ts
    index.ts
  components/
    CallOut/
      index.tsx
    Category/
      constants.ts
      index.tsx
    Excalidraw/
      core.tsx
      index.ts
    MetaConfig/
      index.tsx
    Emoji.tsx
    Tag.tsx
  constants/
    index.ts
    queryKey.ts
  hooks/
    useCategoriesQuery.ts
    useDropdown.ts
    usePostQuery.ts
    usePostsQuery.ts
    useScheme.ts
    useTagsQuery.ts
  layouts/
    RootLayout/
      Header/
        index.tsx
        Logo.tsx
        NavBar.tsx
        ThemeToggle.tsx
      ThemeProvider/
        Global/
          index.tsx
        index.tsx
      index.tsx
      Scripts.tsx
      useGtagEffect.ts
    index.ts
  libs/
    react-query/
      index.ts
    utils/
      notion/
        customMapImageUrl.ts
        filterPosts.ts
        getAllPageIds.ts
        getAllSelectItemsFromPosts.ts
        getMetadata.ts
        getPageProperties.ts
        index.ts
      index.ts
      parse-json.ts
    gtag.ts
  pages/
    api/
      revalidate.ts
    style/
      global.css
    _app.tsx
    _document.tsx
    [slug].tsx
    404.tsx
    index.tsx
  routes/
    Detail/
      components/
        NotionRenderer/
          index.tsx
      PageDetail/
        index.tsx
      PostDetail/
        index.tsx
        PostFooter.tsx
        PostHeader.tsx
      index.tsx
    Error/
      index.tsx
    Feed/
      FeedHeader/
        CategorySelect.tsx
        FeedHeader.tsx
        index.ts
        OrderButtons.tsx
      PostList/
        index.tsx
        PostCard.tsx
      ContactCard.tsx
      Footer.tsx
      index.tsx
      MobileProfileCard.tsx
      ProfileCard.tsx
      SearchInput.tsx
      ServiceCard.tsx
      TagList.tsx
  styles/
    colors.ts
    index.ts
    media.ts
    theme.ts
    variables.ts
    zIndexes.ts
  types/
    index.ts
.dockerignore
.eslintrc.json
.gitignore
.prettierrc.json
deploy.sh
docker-compose.yml
Dockerfile
index.d.ts
LICENSE
next-env.d.ts
next-sitemap.config.js
next.config.js
package.json
postcss.config.js
README.md
site.config.js
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="LICENSE">
MIT License

Copyright (c) 2021-present, Craig Hart

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="public/1rsc.json">
{"type":"excalidraw/clipboard","elements":[{"id":"5igsAMBm8klThX8wBRaLv","type":"rectangle","x":4242.881884842815,"y":4429.788202841306,"width":836.173693327326,"height":809.282542600627,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":3},"seed":1056518201,"version":132,"versionNonce":2139572953,"isDeleted":false,"boundElements":null,"updated":1708595834037,"link":null,"locked":false},{"id":"vpGOTNNOTClFQu_MehgLq","type":"rectangle","x":5436.2016116418845,"y":4492.114583292461,"width":236.6316469678277,"height":538.1783998193587,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":3},"seed":168028569,"version":51,"versionNonce":394930999,"isDeleted":false,"boundElements":[{"type":"text","id":"XcLmOxdh8_7PZx7Ubv7wy"},{"id":"_PmEQJUKuaQDY7cdAI3af","type":"arrow"}],"updated":1708595834037,"link":null,"locked":false},{"id":"XcLmOxdh8_7PZx7Ubv7wy","type":"text","x":5512.2374516052905,"y":4743.703783202141,"width":84.55996704101562,"height":35,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":null,"seed":1833825145,"version":33,"versionNonce":501909433,"isDeleted":false,"boundElements":null,"updated":1708595834038,"link":null,"locked":false,"text":"server","fontSize":28,"fontFamily":1,"textAlign":"center","verticalAlign":"middle","baseline":25,"containerId":"vpGOTNNOTClFQu_MehgLq","originalText":"server","lineHeight":1.25},{"id":"ozDEo_nbwdIV6hlenBwqk","type":"rectangle","x":4387.497050390716,"y":4326.523462779069,"width":537.1843960169144,"height":67.58731420054482,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":3},"seed":2130161431,"version":79,"versionNonce":244435159,"isDeleted":false,"boundElements":[{"type":"text","id":"KchU4xS4gJKKO589bcyA2"},{"id":"cPKz9oVnKXi-4Y0chXQnU","type":"arrow"}],"updated":1708595850123,"link":null,"locked":false},{"id":"KchU4xS4gJKKO589bcyA2","type":"text","x":4559.529250840579,"y":4347.817119879341,"width":193.1199951171875,"height":25,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":null,"seed":1229532087,"version":90,"versionNonce":221287927,"isDeleted":false,"boundElements":null,"updated":1708595850123,"link":null,"locked":false,"text":"用户首次请求 页面 A","fontSize":20,"fontFamily":1,"textAlign":"center","verticalAlign":"middle","baseline":18,"containerId":"ozDEo_nbwdIV6hlenBwqk","originalText":"用户首次请求 页面 A","lineHeight":1.25},{"id":"RvRZ24WQsNFsYV1x6fqLV","type":"rectangle","x":4360.9341966470565,"y":4522.7415723795275,"width":532.1157878174854,"height":82.84157901620074,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":3},"seed":1279504407,"version":102,"versionNonce":900646457,"isDeleted":false,"boundElements":[{"type":"text","id":"jTu72IZm3JuKWk-xup8RF"},{"id":"OS7KhuC-6C77ijYwxO30u","type":"arrow"},{"id":"cPKz9oVnKXi-4Y0chXQnU","type":"arrow"}],"updated":1708595848240,"link":null,"locked":false},{"id":"jTu72IZm3JuKWk-xup8RF","type":"text","x":4551.322100016248,"y":4551.662361887628,"width":151.33998107910156,"height":25,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":null,"seed":1832570839,"version":87,"versionNonce":394036247,"isDeleted":false,"boundElements":null,"updated":1708595845173,"link":null,"locked":false,"text":"浏览器 - 页面 A","fontSize":20,"fontFamily":1,"textAlign":"center","verticalAlign":"middle","baseline":18,"containerId":"RvRZ24WQsNFsYV1x6fqLV","originalText":"浏览器 - 页面 A","lineHeight":1.25},{"id":"cPKz9oVnKXi-4Y0chXQnU","type":"arrow","x":4626.411127011876,"y":4400.694242885909,"width":2.0089233568805867,"height":117.02275785543588,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":2},"seed":1097818105,"version":169,"versionNonce":664716343,"isDeleted":false,"boundElements":null,"updated":1708595850123,"link":null,"locked":false,"points":[[0,0],[-2.0089233568805867,117.02275785543588]],"lastCommittedPoint":null,"startBinding":{"elementId":"ozDEo_nbwdIV6hlenBwqk","focus":0.10782999152033432,"gap":6.583465906296169},"endBinding":{"elementId":"RvRZ24WQsNFsYV1x6fqLV","focus":-0.012697173893018358,"gap":5.024571638181897},"startArrowhead":null,"endArrowhead":"triangle"},{"id":"OS7KhuC-6C77ijYwxO30u","type":"arrow","x":4897.118962723683,"y":4591.729294855828,"width":540.4915417664979,"height":49.08750919292015,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":2},"seed":598580121,"version":92,"versionNonce":2007099703,"isDeleted":false,"boundElements":null,"updated":1708595845173,"link":null,"locked":false,"points":[[0,0],[540.4915417664979,49.08750919292015]],"lastCommittedPoint":null,"startBinding":{"elementId":"RvRZ24WQsNFsYV1x6fqLV","focus":0.04626078751178178,"gap":4.068978259140749},"endBinding":null,"startArrowhead":null,"endArrowhead":"triangle"},{"id":"Dhhrzbgw_KzhxHtmWdSDy","type":"rectangle","x":4361.651992595368,"y":4646.083576773783,"width":537.5939360365028,"height":187.15978895213252,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":3},"seed":1389396855,"version":200,"versionNonce":874359383,"isDeleted":false,"boundElements":[{"id":"_PmEQJUKuaQDY7cdAI3af","type":"arrow"},{"id":"4kgqDEUF1TNdiDedJDWF6","type":"arrow"},{"id":"ZKXbNwFRvdZKyKAR_jQIf","type":"arrow"}],"updated":1708595845173,"link":null,"locked":false},{"id":"_PmEQJUKuaQDY7cdAI3af","type":"arrow","x":5435.2016116418845,"y":4760.144046844477,"width":532.0496400274824,"height":5.34917215283258,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":2},"seed":960852441,"version":349,"versionNonce":651837591,"isDeleted":false,"boundElements":[{"type":"text","id":"redIXoj5u7QCOanMhwj6G"}],"updated":1708595845173,"link":null,"locked":false,"points":[[0,0],[-532.0496400274824,-5.34917215283258]],"lastCommittedPoint":null,"startBinding":{"elementId":"vpGOTNNOTClFQu_MehgLq","gap":1,"focus":-0.0005905456584338188},"endBinding":{"elementId":"Dhhrzbgw_KzhxHtmWdSDy","gap":3.9060429825312895,"focus":0.1286806495379588},"startArrowhead":null,"endArrowhead":"triangle"},{"id":"redIXoj5u7QCOanMhwj6G","type":"text","x":5067.325632291948,"y":4774.124772276593,"width":202.27993774414062,"height":25,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":null,"seed":550076823,"version":33,"versionNonce":1917064695,"isDeleted":false,"boundElements":null,"updated":1708595834038,"link":null,"locked":false,"text":"SSR 返回 HTML 结构","fontSize":20,"fontFamily":1,"textAlign":"center","verticalAlign":"middle","baseline":18,"containerId":"_PmEQJUKuaQDY7cdAI3af","originalText":"SSR 返回 HTML 结构","lineHeight":1.25},{"id":"DgvJxgSyJ3zEDlR3wXt8l","type":"text","x":4549.089211883351,"y":4669.446822813416,"width":123.1199951171875,"height":25,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":null,"seed":1845070231,"version":68,"versionNonce":1966456087,"isDeleted":false,"boundElements":null,"updated":1708595845174,"link":null,"locked":false,"text":"渲染  页面 A","fontSize":20,"fontFamily":1,"textAlign":"left","verticalAlign":"top","baseline":18,"containerId":null,"originalText":"渲染  页面 A","lineHeight":1.25},{"id":"rCPwvZH3EjEwbrSqZXMDT","type":"rectangle","x":4539.5508927174415,"y":4735.046237803194,"width":206.4345918095596,"height":45.65270304385194,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":3},"seed":1875445241,"version":81,"versionNonce":466354743,"isDeleted":false,"boundElements":[{"type":"text","id":"jnrnEFnuiVQhOqoFrf4hK"}],"updated":1708595845174,"link":null,"locked":false},{"id":"jnrnEFnuiVQhOqoFrf4hK","type":"text","x":4581.968238976226,"y":4745.37258932512,"width":121.59989929199219,"height":25,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":null,"seed":995671289,"version":86,"versionNonce":361246455,"isDeleted":false,"boundElements":null,"updated":1708595958296,"link":null,"locked":false,"text":"Component A","fontSize":20,"fontFamily":1,"textAlign":"center","verticalAlign":"middle","baseline":18,"containerId":"rCPwvZH3EjEwbrSqZXMDT","originalText":"Component A","lineHeight":1.25},{"id":"4kgqDEUF1TNdiDedJDWF6","type":"arrow","x":4384.665008326845,"y":4792.470622257857,"width":68.0501892693723,"height":96.04189704898727,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":2},"seed":697933593,"version":294,"versionNonce":905173079,"isDeleted":false,"boundElements":[{"type":"text","id":"UxZMElgoKfHTZePIr1bXY"}],"updated":1708595858143,"link":null,"locked":false,"points":[[-29.006298414243176,0],[-92.35347624536189,-33.75473278487243],[-24.30328697598959,-96.04189704898727]],"lastCommittedPoint":[0.12330237148944434,-74.40857753756791],"startBinding":{"elementId":"Dhhrzbgw_KzhxHtmWdSDy","focus":-0.8413101726561965,"gap":5.993282682766221},"endBinding":{"elementId":"Dhhrzbgw_KzhxHtmWdSDy","focus":0.6759437086735224,"gap":2.4308181807855362},"startArrowhead":null,"endArrowhead":"triangle"},{"id":"UxZMElgoKfHTZePIr1bXY","type":"text","x":4232.0112055832,"y":4777.40953916117,"width":56,"height":35,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":null,"seed":290541625,"version":18,"versionNonce":1770693975,"isDeleted":false,"boundElements":null,"updated":1708595834038,"link":null,"locked":false,"text":"水合","fontSize":28,"fontFamily":1,"textAlign":"center","verticalAlign":"middle","baseline":25,"containerId":"4kgqDEUF1TNdiDedJDWF6","originalText":"水合","lineHeight":1.25},{"id":"0KdJsoUcbX_DIKf_ETZ5m","type":"rectangle","x":4358.239159098794,"y":4936.117176452977,"width":562.985417251015,"height":214.44043864410386,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":3},"seed":394410649,"version":137,"versionNonce":639735513,"isDeleted":false,"boundElements":[{"id":"ZKXbNwFRvdZKyKAR_jQIf","type":"arrow"}],"updated":1708595864405,"link":null,"locked":false},{"id":"WWZgmOeAJ4hFeTC9I9DBK","type":"text","x":4573.824548335297,"y":4957.644097888646,"width":114.53999328613281,"height":25,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":null,"seed":807027959,"version":84,"versionNonce":1659481783,"isDeleted":false,"boundElements":[{"id":"ZKXbNwFRvdZKyKAR_jQIf","type":"arrow"}],"updated":1708595845174,"link":null,"locked":false,"text":"渲染 页面 B","fontSize":20,"fontFamily":1,"textAlign":"left","verticalAlign":"top","baseline":18,"containerId":null,"originalText":"渲染 页面 B","lineHeight":1.25},{"id":"ZKXbNwFRvdZKyKAR_jQIf","type":"arrow","x":4640.119122822946,"y":4840.337655742666,"width":1.5434002554511608,"height":94.2558556911963,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":2},"seed":897720473,"version":300,"versionNonce":805991577,"isDeleted":false,"boundElements":[{"type":"text","id":"qZyeULTJPtZGpay7pGdi9"}],"updated":1708595864405,"link":null,"locked":false,"points":[[0,0],[1.5434002554511608,94.2558556911963]],"lastCommittedPoint":null,"startBinding":{"elementId":"Dhhrzbgw_KzhxHtmWdSDy","gap":7.094290016751074,"focus":-0.029661068764680068},"endBinding":{"elementId":"0KdJsoUcbX_DIKf_ETZ5m","gap":1.5236650191150147,"focus":0.013102602139876835},"startArrowhead":null,"endArrowhead":"triangle"},{"id":"qZyeULTJPtZGpay7pGdi9","type":"text","x":4553.357575483926,"y":4922.735871608268,"width":160,"height":40,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":null,"seed":524281143,"version":80,"versionNonce":1237577049,"isDeleted":false,"boundElements":null,"updated":1708595834038,"link":null,"locked":false,"text":"浏览器侧应用内路由跳\n转到页面 B","fontSize":16,"fontFamily":1,"textAlign":"center","verticalAlign":"middle","baseline":34,"containerId":"ZKXbNwFRvdZKyKAR_jQIf","originalText":"浏览器侧应用内路由跳转到页面 B","lineHeight":1.25},{"id":"b59on-SYmgXuSjPIA6fIf","type":"text","x":4274.138134430954,"y":4445.3649306139705,"width":51.25994873046875,"height":25,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":null,"seed":2086504951,"version":141,"versionNonce":759729465,"isDeleted":false,"boundElements":null,"updated":1708595894372,"link":null,"locked":false,"text":"client","fontSize":20,"fontFamily":1,"textAlign":"left","verticalAlign":"top","baseline":18,"containerId":null,"originalText":"client","lineHeight":1.25},{"id":"NOLTJ65VtligaqYu2aun0","type":"rectangle","x":4970.633598067955,"y":4831.340986280085,"width":84.42249156493563,"height":105.37068374971477,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":3},"seed":1738421527,"version":47,"versionNonce":2080264983,"isDeleted":false,"boundElements":[{"type":"text","id":"-qm223J7mVTpp9jZJxNqp"},{"id":"GXwIFaYmoFHQt5T4HZeSp","type":"arrow"}],"updated":1708595940274,"link":null,"locked":false},{"id":"-qm223J7mVTpp9jZJxNqp","type":"text","x":4987.664866433431,"y":4871.526328154943,"width":50.359954833984375,"height":25,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":null,"seed":656803415,"version":25,"versionNonce":711593785,"isDeleted":false,"boundElements":null,"updated":1708595939939,"link":null,"locked":false,"text":"chunk","fontSize":20,"fontFamily":1,"textAlign":"center","verticalAlign":"middle","baseline":18,"containerId":"NOLTJ65VtligaqYu2aun0","originalText":"chunk","lineHeight":1.25},{"id":"GXwIFaYmoFHQt5T4HZeSp","type":"arrow","x":4896.299882684505,"y":4822.947617706574,"width":68.49887101833883,"height":58.54220452059144,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":2},"seed":1540125369,"version":43,"versionNonce":915037175,"isDeleted":false,"boundElements":[{"type":"text","id":"DSLfLWah5ElQAcEOTUchh"}],"updated":1708595942325,"link":null,"locked":false,"points":[[0,0],[68.49887101833883,58.54220452059144]],"lastCommittedPoint":null,"startBinding":null,"endBinding":{"elementId":"NOLTJ65VtligaqYu2aun0","focus":-0.43404030196734483,"gap":5.8348443651111666},"startArrowhead":null,"endArrowhead":"triangle"},{"id":"DSLfLWah5ElQAcEOTUchh","type":"text","x":4894.100185378793,"y":4837.186617695218,"width":64.79994201660156,"height":25,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":null,"seed":446773623,"version":8,"versionNonce":1866642553,"isDeleted":false,"boundElements":null,"updated":1708595937920,"link":null,"locked":false,"text":"loading","fontSize":20,"fontFamily":1,"textAlign":"center","verticalAlign":"middle","baseline":18,"containerId":"GXwIFaYmoFHQt5T4HZeSp","originalText":"loading","lineHeight":1.25},{"id":"WLnyPqcNf9IfReA4MqIMk","type":"rectangle","x":4539.0973161366055,"y":5018.782609224192,"width":215.18906018528833,"height":79.27461755526473,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":3},"seed":89258969,"version":68,"versionNonce":1400834457,"isDeleted":false,"boundElements":[{"type":"text","id":"sWqOa12RhUXAJ4n-1QDTW"},{"id":"aadMBfpPIKsaGbnTHgOcc","type":"arrow"}],"updated":1708595961389,"link":null,"locked":false},{"id":"sWqOa12RhUXAJ4n-1QDTW","type":"text","x":4585.181897498781,"y":5045.919918001824,"width":123.0198974609375,"height":25,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":null,"seed":69483801,"version":12,"versionNonce":651993719,"isDeleted":false,"boundElements":null,"updated":1708595955632,"link":null,"locked":false,"text":"Component B","fontSize":20,"fontFamily":1,"textAlign":"center","verticalAlign":"middle","baseline":18,"containerId":"WLnyPqcNf9IfReA4MqIMk","originalText":"Component B","lineHeight":1.25},{"id":"aadMBfpPIKsaGbnTHgOcc","type":"arrow","x":4989.239045194441,"y":4936.381395820454,"width":229.11342085131128,"height":85.47056172259363,"angle":0,"strokeColor":"#1e1e1e","backgroundColor":"transparent","fillStyle":"hachure","strokeWidth":1,"strokeStyle":"solid","roughness":1,"opacity":100,"groupIds":[],"frameId":null,"roundness":{"type":2},"seed":1873026359,"version":42,"versionNonce":1191086265,"isDeleted":false,"boundElements":null,"updated":1708595961389,"link":null,"locked":false,"points":[[0,0],[-229.11342085131128,85.47056172259363]],"lastCommittedPoint":null,"startBinding":null,"endBinding":{"elementId":"WLnyPqcNf9IfReA4MqIMk","focus":0.0720574860617119,"gap":5.839248021236017},"startArrowhead":null,"endArrowhead":"triangle"}],"files":{}}
</file>

<file path="public/2rsc.json">
{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "19iHzVD0isitoBhf44RNl",
      "type": "rectangle",
      "x": 448.8828125,
      "y": 164.23828125,
      "width": 176.58984375,
      "height": 109.94921875,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "seed": 576609843,
      "version": 23,
      "versionNonce": 1186147549,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "yTTRErDBD5TAxcoBbbb7D"
        },
        {
          "id": "LHqOWc4uD1FEzBL6EDwe0",
          "type": "arrow"
        }
      ],
      "updated": 1709274321752,
      "link": null,
      "locked": false
    },
    {
      "id": "yTTRErDBD5TAxcoBbbb7D",
      "type": "text",
      "x": 517.177734375,
      "y": 206.712890625,
      "width": 40,
      "height": 25,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 129873597,
      "version": 10,
      "versionNonce": 863966163,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1709274316963,
      "link": null,
      "locked": false,
      "text": "开始",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "center",
      "verticalAlign": "middle",
      "baseline": 18,
      "containerId": "19iHzVD0isitoBhf44RNl",
      "originalText": "开始",
      "lineHeight": 1.25
    },
    {
      "id": "LHqOWc4uD1FEzBL6EDwe0",
      "type": "arrow",
      "x": 631.8046875,
      "y": 223.484375,
      "width": 225.2578125,
      "height": 9.95703125,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "seed": 861174547,
      "version": 15,
      "versionNonce": 262587517,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1709274321752,
      "link": null,
      "locked": false,
      "points": [
        [0, 0],
        [225.2578125, -9.95703125]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "19iHzVD0isitoBhf44RNl",
        "focus": 0.1435907381182621,
        "gap": 6.33203125
      },
      "endBinding": null,
      "startArrowhead": null,
      "endArrowhead": "arrow"
    },
    {
      "id": "HjhUtWESthjF29ROTCHB3",
      "type": "rectangle",
      "x": 848.7109375,
      "y": 152.2578125,
      "width": 248.28515625,
      "height": 133.0078125,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "seed": 1154713917,
      "version": 23,
      "versionNonce": 527872627,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "mCIEEH3gLYzyZNRXzeyew"
        }
      ],
      "updated": 1709274325490,
      "link": null,
      "locked": false
    },
    {
      "id": "mCIEEH3gLYzyZNRXzeyew",
      "type": "text",
      "x": 942.853515625,
      "y": 206.26171875,
      "width": 60,
      "height": 25,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 190375389,
      "version": 9,
      "versionNonce": 2039638291,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1709274327880,
      "link": null,
      "locked": false,
      "text": "结束啦",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "center",
      "verticalAlign": "middle",
      "baseline": 18,
      "containerId": "HjhUtWESthjF29ROTCHB3",
      "originalText": "结束啦",
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}
</file>

<file path="public/avatar3.svg">
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0.00 0.00 500.00 500.00" width="500.00" height="500.00">
<g stroke-width="2.00" fill="none" stroke-linecap="butt">
<path stroke="#794029" d="&#10;  M 307.47 261.43&#10;  L 297.91 263.15"/>
<path stroke="#482e21" d="&#10;  M 297.91 263.15&#10;  L 293.81 262.23&#10;  Q 293.20 262.09 293.40 262.68&#10;  L 293.84 263.99"/>
<path stroke="#544432" d="&#10;  M 293.84 263.99&#10;  Q 292.90 263.42 292.47 262.79&#10;  A 1.88 1.85 78.3 0 0 291.30 262.01&#10;  L 289.77 261.71&#10;  Q 288.81 261.52 289.49 262.24&#10;  L 292.80 265.73&#10;  Q 292.93 265.87 292.81 266.01&#10;  L 292.64 266.21&#10;  Q 292.60 266.25 292.55 266.21&#10;  Q 290.34 264.46 288.76 262.02&#10;  A 1.23 1.22 76.0 0 0 287.87 261.48&#10;  L 281.69 260.87&#10;  Q 281.18 260.82 281.11 261.32&#10;  C 280.90 262.76 282.18 262.95 282.63 264.11&#10;  Q 282.92 264.86 282.21 264.49&#10;  C 280.17 263.43 278.61 262.10 276.86 260.68&#10;  Q 276.11 260.07 275.02 260.00&#10;  Q 263.85 259.29 253.34 259.45&#10;  A 1.64 1.60 20.0 0 0 252.15 259.99&#10;  C 249.31 263.14 246.56 264.60 246.67 269.53&#10;  Q 246.68 270.08 247.21 270.25&#10;  Q 251.95 271.77 255.56 275.46&#10;  A 1.84 1.80 -22.1 0 0 256.85 275.99&#10;  Q 275.68 275.80 295.72 278.62&#10;  A 0.40 0.40 0.0 0 0 296.12 278.02&#10;  Q 292.27 271.52 293.65 264.31"/>
<path stroke="#482e21" d="&#10;  M 293.65 264.31&#10;  L 296.57 263.60"/>
<path stroke="#794029" d="&#10;  M 296.57 263.60&#10;  C 294.96 264.38 293.72 265.33 293.76 267.32&#10;  Q 293.88 273.52 297.67 279.36&#10;  Q 299.59 282.32 301.96 283.25"/>
<path stroke="#544432" d="&#10;  M 301.96 283.25&#10;  Q 302.10 283.38 302.13 283.58&#10;  Q 302.19 283.95 301.83 283.83&#10;  Q 299.58 283.11 298.31 281.30&#10;  Q 297.48 280.10 295.94 279.90&#10;  Q 276.52 277.35 257.44 277.14&#10;  A 0.31 0.31 0.0 0 0 257.16 277.60&#10;  Q 260.58 284.00 259.05 290.49&#10;  Q 258.91 291.07 259.51 291.10&#10;  Q 274.96 291.73 291.61 292.64&#10;  Q 291.82 292.65 291.81 292.86&#10;  L 291.81 292.87&#10;  Q 291.80 292.95 291.72 292.94&#10;  Q 275.11 292.10 259.25 291.78&#10;  Q 258.61 291.77 258.38 292.36&#10;  C 253.28 305.33 235.21 306.29 229.06 293.60&#10;  Q 228.73 292.94 228.00 293.00&#10;  Q 204.95 294.79 181.87 299.40&#10;  C 179.62 299.86 177.91 301.25 175.55 301.14&#10;  C 172.77 301.02 170.38 301.61 168.27 303.52&#10;  Q 163.48 307.85 159.16 311.81&#10;  Q 156.50 314.24 154.55 316.71&#10;  Q 154.15 317.22 154.78 317.06&#10;  Q 171.61 312.73 191.20 310.50&#10;  Q 248.41 303.98 305.41 307.83&#10;  C 319.41 308.77 332.55 309.70 346.06 312.81&#10;  Q 346.85 312.99 346.26 312.43&#10;  C 337.30 304.11 328.79 295.95 319.69 288.87&#10;  Q 319.17 288.47 318.73 288.95&#10;  L 318.52 289.18&#10;  Q 318.13 289.61 317.56 289.67&#10;  Q 310.76 290.39 306.13 285.35&#10;  Q 305.04 284.18 302.81 282.56"/>
<path stroke="#794029" d="&#10;  M 302.81 282.56&#10;  C 302.15 281.85 300.75 279.79 300.48 278.83&#10;  Q 300.23 277.95 300.79 278.68&#10;  C 303.14 281.74 305.60 284.28 308.68 286.73&#10;  C 311.30 288.81 313.99 289.50 317.27 289.13&#10;  A 1.30 1.29 88.9 0 0 318.41 287.94&#10;  C 318.70 284.14 314.19 282.80 311.22 283.69&#10;  Q 310.96 283.76 310.92 283.49&#10;  L 310.88 283.24&#10;  Q 310.85 283.05 311.04 283.03&#10;  Q 313.93 282.62 317.04 283.65&#10;  A 1.21 1.18 -4.5 0 1 317.69 284.19&#10;  C 318.72 286.04 319.02 287.56 321.43 288.05"/>
<path stroke="#7f5824" d="&#10;  M 302.69 493.25&#10;  C 305.56 489.17 301.10 486.87 297.98 485.85&#10;  Q 297.48 485.69 296.98 485.86&#10;  C 293.37 487.10 289.83 488.14 286.66 490.52&#10;  Q 283.55 492.85 280.24 494.94&#10;  A 1.90 1.88 -49.0 0 1 278.48 495.07&#10;  Q 275.00 493.56 271.26 491.72&#10;  Q 269.60 490.90 268.37 491.76"/>
<path stroke="#7f5824" d="&#10;  M 257.06 493.71&#10;  Q 258.86 491.09 256.04 488.96&#10;  C 249.20 483.79 236.14 484.60 228.36 486.58&#10;  Q 227.06 486.91 223.54 488.96"/>
<path stroke="#4b4d4c" d="&#10;  M 174.44 407.78&#10;  Q 175.00 408.03 174.87 408.50&#10;  C 169.38 427.74 170.43 447.44 182.43 463.59&#10;  C 192.15 476.67 207.46 484.80 223.30 487.85&#10;  A 2.30 2.29 36.7 0 0 224.82 487.63&#10;  L 230.01 484.93"/>
<path stroke="#808080" d="&#10;  M 230.01 484.93&#10;  C 238.17 482.60 252.07 482.27 258.28 489.55&#10;  Q 258.66 490.00 259.24 489.95&#10;  L 265.28 489.42&#10;  Q 266.42 489.32 265.39 488.82&#10;  C 247.46 480.05 230.42 470.26 214.65 457.93"/>
<path stroke="#4b4d4c" d="&#10;  M 214.65 457.93&#10;  Q 204.12 449.51 196.11 439.89&#10;  Q 185.96 427.69 180.86 410.75&#10;  Q 180.61 409.92 179.74 409.63&#10;  C 177.99 409.04 176.20 407.82 174.57 406.99"/>
<path stroke="#3a342f" d="&#10;  M 180.67 327.06&#10;  L 181.74 313.65&#10;  A 0.41 0.41 0.0 0 0 181.27 313.21&#10;  C 171.82 314.63 162.20 316.00 153.28 319.09&#10;  Q 151.96 319.55 151.92 320.79&#10;  Q 151.90 321.41 152.47 321.65&#10;  Q 160.28 324.90 169.41 325.80"/>
<path stroke="#324966" d="&#10;  M 166.70 289.49&#10;  Q 167.44 289.38 167.88 288.99&#10;  Q 168.37 288.56 168.21 287.88&#10;  Q 167.93 286.75 166.37 286.72"/>
<path stroke="#212122" d="&#10;  M 174.59 272.69&#10;  L 175.27 272.80"/>
<path stroke="#324966" d="&#10;  M 175.27 272.80&#10;  Q 171.02 275.71 168.68 280.13&#10;  C 167.84 281.72 168.03 283.38 167.14 284.92&#10;  A 0.63 0.61 51.1 0 0 167.09 285.45&#10;  Q 167.27 285.94 167.73 285.95&#10;  A 0.62 0.61 76.7 0 1 168.28 286.29&#10;  Q 168.95 287.55 168.58 289.14&#10;  Q 168.45 289.67 168.00 289.96&#10;  Q 166.92 290.67 166.62 292.01&#10;  A 1.67 1.67 0.0 0 0 167.81 293.98&#10;  Q 170.36 294.69 169.85 297.51&#10;  Q 169.56 299.16 171.23 299.21&#10;  Q 171.96 299.23 172.58 298.48&#10;  Q 173.31 297.58 173.69 298.68&#10;  Q 173.79 299.00 173.78 299.35&#10;  Q 173.75 299.96 174.34 300.14&#10;  C 177.67 301.16 180.74 298.73 183.50 297.32"/>
<path stroke="#212122" d="&#10;  M 183.50 297.32&#10;  Q 184.13 297.64 184.51 297.58"/>
<path stroke="#544432" d="&#10;  M 184.51 297.58&#10;  Q 205.96 293.66 227.61 292.16&#10;  Q 228.08 292.13 228.03 291.66&#10;  L 227.60 287.53"/>
<path stroke="#7f5824" d="&#10;  M 227.60 287.53&#10;  Q 229.48 296.85 237.35 300.09&#10;  C 246.05 303.67 255.32 299.26 258.24 290.39&#10;  C 260.03 284.97 258.29 278.05 253.92 274.70&#10;  C 245.07 267.92 234.60 270.34 228.76 279.69"/>
<path stroke="#544432" d="&#10;  M 228.76 279.69&#10;  Q 228.85 279.34 228.82 279.04&#10;  Q 228.78 278.54 228.27 278.59&#10;  Q 211.92 280.25 196.56 283.51&#10;  A 1.83 1.82 -88.1 0 0 195.19 284.80&#10;  Q 194.05 288.76 191.42 292.16&#10;  Q 189.50 294.64 186.83 294.63"/>
<path stroke="#324966" d="&#10;  M 186.83 294.63&#10;  Q 190.62 292.79 191.58 291.10&#10;  Q 196.73 281.99 197.40 271.50&#10;  Q 197.42 271.24 197.81 270.99"/>
<path stroke="#544432" d="&#10;  M 197.81 270.99&#10;  Q 200.75 267.26 203.62 267.12&#10;  C 207.40 266.92 211.30 267.37 214.15 264.37&#10;  Q 215.85 262.58 213.46 263.21&#10;  Q 208.94 264.40 204.28 264.98&#10;  Q 202.06 265.25 200.38 266.46&#10;  Q 198.49 267.82 196.90 269.95"/>
<path stroke="#324966" d="&#10;  M 196.90 269.95&#10;  L 192.26 268.88"/>
<path stroke="#212122" d="&#10;  M 192.26 268.88&#10;  L 191.60 268.43"/>
<path stroke="#526986" d="&#10;  M 192.26 268.88&#10;  Q 191.70 269.45 191.00 269.44&#10;  Q 182.64 269.33 175.27 272.80"/>
<path stroke="#9b7151" d="&#10;  M 293.84 263.99&#10;  Q 293.75 264.15 293.65 264.31"/>
<path stroke="#7f5824" d="&#10;  M 295.82 496.86&#10;  Q 284.99 498.41 274.65 495.76&#10;  Q 274.17 495.64 273.83 495.29&#10;  Q 273.35 494.80 272.89 494.66"/>
<path stroke="#7f5824" d="&#10;  M 249.79 497.73&#10;  Q 237.36 499.83 225.74 495.94"/>
<path stroke="#794029" d="&#10;  M 307.95 261.32&#10;  Q 307.83 261.44 307.91 261.56&#10;  Q 307.97 261.67 308.09 261.67&#10;  Q 313.79 261.70 318.87 264.77"/>
<path stroke="#794029" d="&#10;  M 324.46 272.36&#10;  Q 324.76 273.84 322.87 273.38&#10;  A 1.58 1.57 86.7 0 1 321.77 272.39&#10;  Q 321.39 271.34 320.85 269.80&#10;  Q 320.79 269.64 320.62 269.69&#10;  L 320.62 269.69&#10;  Q 320.54 269.72 320.55 269.80&#10;  Q 320.88 271.49 321.27 273.03&#10;  A 1.17 1.16 -2.6 0 0 322.22 273.89&#10;  C 325.18 274.34 328.87 276.56 327.83 280.06&#10;  Q 327.69 280.53 327.28 280.81&#10;  L 324.03 283.00"/>
<path stroke="#cc835a" d="&#10;  M 302.81 282.56&#10;  Q 302.23 282.90 301.96 283.25"/>
<path stroke="#c06d49" d="&#10;  M 296.57 263.60&#10;  Q 297.14 263.94 297.91 263.15"/>
<path stroke="#858c96" d="&#10;  M 186.83 294.63&#10;  Q 186.71 294.91 186.14 295.32"/>
<path stroke="#526986" d="&#10;  M 186.14 295.32&#10;  Q 186.14 294.57 186.73 293.96&#10;  A 0.28 0.28 0.0 0 0 186.74 293.59&#10;  L 186.56 293.38&#10;  Q 186.46 293.26 186.33 293.36&#10;  Q 184.24 294.93 183.50 297.32"/>
<path stroke="#cacccb" d="&#10;  M 214.65 457.93&#10;  Q 214.35 469.84 221.96 478.03&#10;  C 224.04 480.26 227.42 482.50 230.01 484.93"/>
<path stroke="#544432" d="&#10;  M 229.47 281.36&#10;  Q 229.25 281.40 229.25 281.76"/>
<path stroke="#746452" d="&#10;  M 184.51 297.58&#10;  Q 184.78 296.41 186.14 295.32"/>
<path stroke="#858c96" d="&#10;  M 197.81 270.99&#10;  Q 197.38 270.23 196.90 269.95"/>
<path stroke="#d29b54" d="&#10;  M 227.60 287.53&#10;  Q 227.47 283.84 229.25 281.76"/>
<path stroke="#7f5824" d="&#10;  M 229.25 281.76&#10;  C 237.74 278.20 249.62 281.67 256.74 286.81&#10;  Q 256.92 286.94 257.06 286.76&#10;  L 257.06 286.75&#10;  Q 257.20 286.58 257.03 286.43&#10;  Q 247.32 278.62 234.74 279.66&#10;  Q 231.86 279.90 229.47 281.36"/>
<path stroke="#d29b54" d="&#10;  M 229.47 281.36&#10;  Q 228.43 281.02 228.76 279.69"/>
<path stroke="#544432" d="&#10;  M 197.06 239.67&#10;  Q 196.33 247.78 195.25 255.76&#10;  A 0.47 0.47 0.0 0 0 195.84 256.28&#10;  Q 198.75 255.50 201.92 255.04&#10;  C 204.39 254.67 205.34 252.93 207.15 251.60&#10;  C 209.45 249.90 214.01 248.38 216.24 251.20&#10;  Q 216.88 252.00 217.91 251.85&#10;  Q 228.58 250.30 239.88 249.48&#10;  Q 240.37 249.45 240.70 249.08&#10;  Q 246.91 242.24 253.81 248.42&#10;  Q 254.27 248.83 254.88 248.82&#10;  Q 264.47 248.58 274.34 249.36&#10;  Q 274.88 249.40 275.30 249.07&#10;  C 276.47 248.15 277.45 247.04 278.92 246.58&#10;  C 282.96 245.32 286.43 247.02 288.73 250.33&#10;  Q 289.09 250.84 289.70 250.95&#10;  L 302.77 253.15&#10;  Q 303.75 253.32 303.57 252.34&#10;  Q 302.00 243.95 301.42 235.85&#10;  A 2.12 2.11 5.2 0 0 299.84 233.96&#10;  C 266.82 225.34 231.39 226.51 198.80 236.31&#10;  C 196.82 236.90 197.21 238.03 197.06 239.67"/>
<path stroke="#482e21" d="&#10;  M 239.37 256.40&#10;  Q 238.50 253.74 240.05 251.01&#10;  A 0.40 0.40 0.0 0 0 239.67 250.42&#10;  Q 224.25 251.39 208.88 254.38&#10;  Q 208.48 254.45 208.16 254.68&#10;  Q 207.90 254.88 207.70 255.15&#10;  Q 207.36 255.62 206.82 255.83&#10;  Q 204.31 256.78 202.31 258.10&#10;  Q 199.80 259.75 201.60 257.35&#10;  L 202.26 256.47&#10;  Q 202.78 255.77 201.93 255.94&#10;  L 195.53 257.23&#10;  Q 195.39 257.26 195.35 257.39&#10;  Q 194.76 259.15 193.81 266.04&#10;  A 0.12 0.12 0.0 0 0 193.95 266.17&#10;  Q 216.43 261.19 238.28 259.48&#10;  Q 238.78 259.44 239.03 259.00&#10;  L 240.23 256.86"/>
<path stroke="#544432" d="&#10;  M 240.23 256.86&#10;  Q 241.16 255.93 241.62 254.74&#10;  Q 241.80 254.26 241.65 253.77&#10;  Q 241.27 252.59 241.97 251.57&#10;  C 244.64 247.70 248.68 248.86 252.62 249.01&#10;  Q 253.44 249.04 252.88 248.44&#10;  Q 251.12 246.56 248.77 246.29&#10;  C 241.59 245.47 240.40 250.88 239.37 256.40"/>
<path stroke="#9b7151" d="&#10;  M 240.23 256.86&#10;  Q 239.74 256.38 239.37 256.40"/>
<path stroke="#544432" d="&#10;  M 280.40 261.52&#10;  Q 279.86 259.42 278.04 258.59&#10;  Q 277.58 258.38 277.34 257.92&#10;  Q 275.63 254.62 277.47 251.76&#10;  C 280.13 247.61 283.77 250.57 287.43 250.78&#10;  Q 288.28 250.82 287.76 250.16&#10;  C 283.98 245.34 277.33 245.53 274.83 251.30&#10;  C 272.88 255.81 276.62 260.33 280.43 262.70&#10;  A 0.39 0.38 35.3 0 0 280.93 262.62&#10;  Q 281.32 262.16 280.77 261.94&#10;  A 0.64 0.63 4.0 0 1 280.40 261.52"/>
<path stroke="#482e21" d="&#10;  M 242.39 254.81&#10;  L 240.15 258.46&#10;  Q 239.70 259.19 240.55 259.16&#10;  Q 246.34 258.98 251.49 258.80&#10;  Q 263.44 258.38 274.58 259.14&#10;  A 0.49 0.49 0.0 0 0 275.04 258.42&#10;  Q 273.01 254.73 274.19 251.06&#10;  A 0.70 0.70 0.0 0 0 273.57 250.15&#10;  Q 260.03 249.28 245.37 250.00&#10;  C 243.61 250.08 242.02 251.70 242.56 253.48&#10;  Q 242.78 254.18 242.39 254.81"/>
<path stroke="#544432" d="&#10;  M 203.27 256.62&#10;  Q 203.78 256.59 204.32 256.23&#10;  C 205.36 255.54 206.29 255.39 206.98 254.19&#10;  Q 207.33 253.58 207.96 253.27&#10;  Q 209.22 252.66 210.61 252.75&#10;  Q 213.28 252.93 215.84 252.17&#10;  Q 216.46 251.99 215.96 251.57&#10;  C 210.98 247.36 206.44 253.51 203.06 256.07&#10;  A 0.31 0.31 0.0 0 0 203.27 256.62"/>
<path stroke="#482e21" d="&#10;  M 280.90 260.10&#10;  Q 288.24 260.38 295.91 261.94&#10;  C 298.96 262.56 301.33 261.50 304.33 261.26&#10;  A 0.82 0.82 0.0 0 0 305.06 260.25&#10;  L 303.81 254.93&#10;  Q 303.66 254.27 302.99 254.14&#10;  Q 292.67 252.14 281.45 250.79&#10;  C 277.00 250.25 275.52 256.48 278.83 258.14&#10;  C 279.69 258.57 280.16 259.21 280.67 259.97&#10;  A 0.27 0.27 0.0 0 0 280.90 260.10"/>
<path stroke="#544432" d="&#10;  M 246.14 268.40&#10;  C 246.45 264.57 248.53 262.55 251.20 260.20&#10;  Q 252.28 259.24 250.85 259.41&#10;  C 245.45 260.04 244.80 265.06 244.18 269.41&#10;  Q 244.11 269.91 244.62 269.96&#10;  L 245.47 270.03&#10;  A 0.48 0.48 0.0 0 0 246.00 269.62&#10;  Q 246.09 269.01 246.14 268.40"/>
<path stroke="#544432" d="&#10;  M 197.86 273.26&#10;  C 197.85 276.00 197.22 278.95 196.26 281.45&#10;  Q 195.96 282.24 196.79 282.07&#10;  Q 212.68 278.80 229.11 277.18&#10;  A 2.39 2.38 15.8 0 0 230.78 276.25&#10;  Q 235.43 270.12 242.85 269.78&#10;  Q 243.50 269.75 243.59 269.11&#10;  C 244.04 266.13 244.54 262.70 246.84 260.49&#10;  Q 247.66 259.72 246.53 259.76&#10;  Q 232.85 260.34 216.84 262.74&#10;  Q 215.90 262.88 215.34 263.69&#10;  Q 212.75 267.36 208.54 267.46&#10;  C 204.49 267.56 202.03 267.52 198.89 270.81&#10;  Q 197.87 271.88 197.86 273.26"/>
<path stroke="#544432" d="&#10;  M 195.45 269.00&#10;  C 195.94 269.18 196.52 269.05 196.87 268.66&#10;  Q 197.84 267.59 199.04 266.69&#10;  Q 200.42 265.67 198.75 266.06&#10;  L 193.58 267.27&#10;  A 0.53 0.53 0.0 0 0 193.34 268.17&#10;  C 194.03 268.80 194.67 268.71 195.45 269.00"/>
<path stroke="#808080" d="&#10;  M 250.21 308.04&#10;  Q 246.73 307.62 245.79 308.49"/>
<path stroke="#212122" d="&#10;  M 245.79 308.49&#10;  C 240.01 306.49 237.14 315.88 237.31 319.72&#10;  C 237.87 331.79 251.70 337.77 261.31 331.94&#10;  C 270.21 326.54 270.37 315.24 262.94 308.52&#10;  Q 262.17 307.82 261.00 307.80&#10;  Q 254.77 307.71 250.21 308.04"/>
<path stroke="#a0a0a1" d="&#10;  M 245.79 308.49&#10;  Q 244.40 310.22 243.04 312.01&#10;  Q 239.68 316.44 239.93 322.19&#10;  Q 240.00 323.77 241.58 323.76&#10;  L 242.02 323.76&#10;  Q 243.04 323.76 243.05 322.74&#10;  Q 243.12 318.87 243.72 317.24&#10;  Q 245.03 313.67 250.21 308.04"/>
<path stroke="#4b4d4c" d="&#10;  M 274.18 315.71&#10;  Q 279.25 314.92 284.65 315.74"/>
<path stroke="#808080" d="&#10;  M 284.65 315.74&#10;  L 289.58 316.94&#10;  Q 290.14 317.08 290.24 316.51&#10;  Q 290.93 312.39 293.50 309.22&#10;  Q 293.93 308.67 293.24 308.64&#10;  L 284.33 308.26"/>
<path stroke="#4b4d4c" d="&#10;  M 284.33 308.26&#10;  L 273.07 307.96"/>
<path stroke="#808080" d="&#10;  M 273.07 307.96&#10;  L 265.67 307.92&#10;  Q 264.93 307.92 265.44 308.45&#10;  Q 268.57 311.73 269.53 315.86&#10;  Q 269.67 316.45 270.27 316.35&#10;  L 274.18 315.71"/>
<path stroke="#cacccb" d="&#10;  M 273.07 307.96&#10;  Q 274.32 311.93 274.18 315.71"/>
<path stroke="#cacccb" d="&#10;  M 284.33 308.26&#10;  L 284.65 315.74"/>
<path stroke="#4b4d4c" d="&#10;  M 205.44 310.46&#10;  L 184.94 312.82&#10;  Q 184.35 312.89 184.25 313.48&#10;  Q 180.49 336.73 191.42 358.81&#10;  C 192.57 361.14 195.75 362.13 197.89 363.35&#10;  C 200.30 364.72 203.12 363.38 205.80 364.46&#10;  C 207.68 365.22 209.65 364.18 211.79 364.69&#10;  C 221.30 366.94 227.74 370.91 238.63 376.35"/>
<path stroke="#808080" d="&#10;  M 238.63 376.35&#10;  Q 246.58 380.69 255.15 385.12&#10;  C 266.47 390.98 283.55 393.78 294.10 385.39&#10;  Q 301.77 379.28 308.24 373.14&#10;  C 310.10 371.38 311.44 369.32 313.13 367.42&#10;  C 317.76 362.25 321.20 353.26 322.31 347.51&#10;  Q 324.46 336.40 318.32 323.22&#10;  Q 317.89 322.30 317.70 323.30&#10;  C 315.23 336.10 300.01 340.52 292.68 328.86&#10;  Q 292.37 328.37 292.06 328.86&#10;  C 288.52 334.53 278.15 333.58 272.81 331.84&#10;  Q 269.20 330.67 268.29 328.03&#10;  Q 268.06 327.37 267.70 327.97&#10;  C 263.61 334.79 254.66 337.72 247.31 334.99&#10;  Q 236.87 331.12 235.57 320.35&#10;  Q 235.48 319.65 234.77 319.69&#10;  L 203.89 321.54"/>
<path stroke="#4b4d4c" d="&#10;  M 203.89 321.54&#10;  L 193.44 322.40&#10;  A 4.07 4.06 -80.1 0 0 190.06 324.78&#10;  L 187.15 331.23&#10;  A 1.41 1.40 26.0 0 1 185.22 331.89&#10;  L 184.67 331.60&#10;  Q 183.41 330.93 183.95 329.60&#10;  C 185.95 324.64 187.63 319.62 192.98 318.77"/>
<path stroke="#212122" d="&#10;  M 192.98 318.77&#10;  Q 193.09 319.20 193.43 319.50&#10;  Q 193.74 319.77 194.15 319.79&#10;  C 204.04 320.06 214.04 319.19 224.25 318.35&#10;  Q 225.01 318.29 224.43 317.79&#10;  Q 224.03 317.44 223.50 317.51&#10;  Q 217.75 318.28 212.33 317.43"/>
<path stroke="#808080" d="&#10;  M 212.33 317.43&#10;  L 235.52 315.03&#10;  Q 236.09 314.97 236.28 314.43&#10;  Q 237.47 311.04 239.65 308.66&#10;  A 0.27 0.27 0.0 0 0 239.44 308.21&#10;  L 205.44 310.46"/>
<path stroke="#a0a0a1" d="&#10;  M 212.33 317.43&#10;  Q 209.30 316.93 205.44 317.86"/>
<path stroke="#cacccb" d="&#10;  M 205.44 317.86&#10;  Q 204.29 318.09 204.23 317.00&#10;  Q 204.15 315.59 205.44 310.46"/>
<path stroke="#6b6d6d" d="&#10;  M 205.44 317.86&#10;  Q 204.16 317.81 204.00 318.33"/>
<path stroke="#4b4d4c" d="&#10;  M 204.00 318.33&#10;  Q 198.63 317.79 193.40 318.78"/>
<path stroke="#6b6d6d" d="&#10;  M 193.40 318.78&#10;  Q 193.63 319.08 192.98 318.77"/>
<path stroke="#cacccb" d="&#10;  M 203.89 321.54&#10;  Q 202.24 330.29 204.35 339.23&#10;  Q 206.59 348.73 213.98 355.04&#10;  Q 221.75 361.68 230.03 367.67&#10;  Q 235.48 371.62 238.63 376.35"/>
<path stroke="#212122" d="&#10;  M 193.40 318.78&#10;  L 204.15 319.16&#10;  A 0.50 0.49 79.6 0 0 204.62 318.47&#10;  Q 204.46 318.08 204.00 318.33"/>
<path stroke="#808080" d="&#10;  M 302.43 309.32&#10;  Q 297.82 307.35 295.62 312.17"/>
<path stroke="#212122" d="&#10;  M 295.62 312.17&#10;  Q 295.19 310.97 296.19 309.74&#10;  Q 297.63 307.97 295.70 309.20&#10;  Q 294.33 310.08 293.37 312.20&#10;  Q 290.11 319.39 293.00 326.13&#10;  C 297.30 336.15 309.97 336.87 314.76 326.99&#10;  Q 318.59 319.08 313.79 311.11&#10;  C 313.11 309.97 311.96 309.69 310.75 309.56&#10;  Q 305.69 309.03 302.43 309.32"/>
<path stroke="#a0a0a1" d="&#10;  M 295.62 312.17&#10;  Q 293.13 316.73 293.59 322.24&#10;  Q 293.72 323.85 295.43 323.83&#10;  A 1.20 1.20 0.0 0 0 296.60 322.51&#10;  Q 295.78 314.86 302.43 309.32"/>
<path stroke="#3a342f" d="&#10;  M 323.35 324.13&#10;  Q 334.95 321.93 346.74 317.86&#10;  Q 347.72 317.53 348.47 316.87&#10;  A 0.96 0.96 0.0 0 0 348.20 315.25&#10;  Q 343.84 313.55 339.09 312.70&#10;  Q 328.53 310.79 317.86 310.12&#10;  A 0.55 0.55 0.0 0 0 317.27 310.66&#10;  Q 317.16 317.80 321.08 324.27&#10;  Q 321.34 324.71 321.83 324.54&#10;  Q 322.55 324.28 323.35 324.13"/>
<path stroke="#808080" d="&#10;  M 274.35 318.89&#10;  L 270.67 319.60&#10;  Q 270.18 319.70 270.14 320.20&#10;  Q 269.87 323.64 268.39 326.82&#10;  Q 268.34 326.93 268.41 326.84&#10;  Q 270.76 324.09 274.26 323.37"/>
<path stroke="#4b4d4c" d="&#10;  M 274.26 323.37&#10;  Q 278.98 322.49 283.35 323.62"/>
<path stroke="#7f5824" d="&#10;  M 283.35 323.62&#10;  C 279.18 323.82 272.01 324.24 269.01 327.42&#10;  Q 268.63 327.82 268.90 328.30&#10;  Q 269.92 330.15 271.81 330.75&#10;  C 276.78 332.33 285.93 332.53 290.59 328.72&#10;  A 1.07 1.06 -43.7 0 0 290.63 327.10&#10;  L 288.19 324.95"/>
<path stroke="#4b4d4c" d="&#10;  M 288.19 324.95&#10;  Q 288.14 324.81 288.51 324.61"/>
<path stroke="#808080" d="&#10;  M 288.51 324.61&#10;  L 290.45 325.70&#10;  Q 291.21 326.12 290.92 325.30&#10;  Q 289.95 322.50 290.03 319.68&#10;  Q 290.05 319.05 289.42 318.97&#10;  L 285.19 318.41"/>
<path stroke="#4b4d4c" d="&#10;  M 285.19 318.41&#10;  Q 279.71 317.93 274.35 318.89"/>
<path stroke="#cacccb" d="&#10;  M 285.19 318.41&#10;  Q 284.72 320.91 285.66 323.23&#10;  A 1.07 1.06 -1.2 0 0 286.31 323.85&#10;  L 288.51 324.61"/>
<path stroke="#c9a46f" d="&#10;  M 288.19 324.95&#10;  L 283.35 323.62"/>
<path stroke="#cacccb" d="&#10;  M 274.26 323.37&#10;  L 274.35 318.89"/>
<path stroke="#4b4d4c" d="&#10;  M 153.33 343.42&#10;  C 149.06 342.47 149.27 349.40 149.60 351.64&#10;  Q 152.55 371.89 164.59 389.78&#10;  C 168.72 395.93 172.73 402.10 179.05 406.20&#10;  Q 179.59 406.55 179.46 405.92&#10;  C 175.81 388.12 172.68 370.42 167.94 353.01&#10;  A 3.71 3.68 10.1 0 0 166.49 350.95&#10;  Q 162.02 347.87 157.50 345.10&#10;  Q 155.59 343.93 153.33 343.42"/>
<path stroke="#783949" d="&#10;  M 178.58 390.79&#10;  L 179.46 394.05"/>
<path stroke="#808080" d="&#10;  M 179.46 394.05&#10;  Q 179.29 395.23 180.19 397.75"/>
<path stroke="#7e7076" d="&#10;  M 180.19 397.75&#10;  Q 185.05 428.54 207.87 449.21"/>
<path stroke="#808080" d="&#10;  M 207.87 449.21&#10;  L 217.09 457.30"/>
<path stroke="#7e7076" d="&#10;  M 217.09 457.30&#10;  Q 232.69 469.74 251.43 480.09"/>
<path stroke="#808080" d="&#10;  M 251.43 480.09&#10;  L 257.10 483.34"/>
<path stroke="#7e7076" d="&#10;  M 257.10 483.34&#10;  L 278.49 494.25&#10;  A 1.52 1.51 -47.2 0 0 279.98 494.19&#10;  Q 289.35 488.48 297.32 480.50"/>
<path stroke="#808080" d="&#10;  M 297.32 480.50&#10;  L 303.70 473.23"/>
<path stroke="#7e7076" d="&#10;  M 303.70 473.23&#10;  Q 307.10 469.03 309.33 465.56&#10;  Q 322.08 445.68 328.55 423.38"/>
<path stroke="#808080" d="&#10;  M 328.55 423.38&#10;  L 332.81 407.30"/>
<path stroke="#7e7076" d="&#10;  M 332.81 407.30&#10;  Q 332.84 407.26 332.87 407.22&#10;  Q 332.90 407.18 332.92 407.12&#10;  Q 337.67 387.74 337.58 368.26&#10;  Q 337.55 360.81 335.25 354.38&#10;  A 1.23 1.22 -21.6 0 0 333.60 353.67&#10;  Q 327.18 356.48 321.66 360.87"/>
<path stroke="#783949" d="&#10;  M 321.66 360.87&#10;  Q 318.18 362.60 314.58 366.85"/>
<path stroke="#7e7076" d="&#10;  M 314.58 366.85&#10;  Q 313.56 367.41 312.41 369.64"/>
<path stroke="#783949" d="&#10;  M 312.41 369.64&#10;  L 299.17 382.89"/>
<path stroke="#808080" d="&#10;  M 299.17 382.89&#10;  L 296.47 385.39"/>
<path stroke="#783949" d="&#10;  M 296.47 385.39&#10;  Q 294.98 386.50 293.49 387.62&#10;  C 289.54 390.58 284.71 391.96 279.79 392.25"/>
<path stroke="#808080" d="&#10;  M 279.79 392.25&#10;  L 277.25 392.32"/>
<path stroke="#783949" d="&#10;  M 277.25 392.32&#10;  Q 267.29 392.17 257.76 387.79&#10;  Q 253.62 385.89 249.44 383.46"/>
<path stroke="#808080" d="&#10;  M 249.44 383.46&#10;  L 245.96 381.57"/>
<path stroke="#783949" d="&#10;  M 245.96 381.57&#10;  L 218.85 367.44"/>
<path stroke="#7e7076" d="&#10;  M 218.85 367.44&#10;  C 215.97 366.22 213.97 366.10 211.52 365.18&#10;  Q 210.27 364.71 208.87 365.32&#10;  Q 208.11 365.64 208.92 365.79&#10;  C 210.12 366.01 211.13 366.04 212.27 366.61&#10;  Q 215.27 368.10 218.42 369.31"/>
<path stroke="#783949" d="&#10;  M 218.42 369.31&#10;  L 243.72 384.89"/>
<path stroke="#808080" d="&#10;  M 243.72 384.89&#10;  L 248.35 387.65"/>
<path stroke="#783949" d="&#10;  M 248.35 387.65&#10;  C 256.34 392.81 266.35 396.58 276.06 396.86"/>
<path stroke="#808080" d="&#10;  M 276.06 396.86&#10;  L 280.63 396.50"/>
<path stroke="#783949" d="&#10;  M 280.63 396.50&#10;  Q 290.64 395.30 298.43 388.82"/>
<path stroke="#808080" d="&#10;  M 298.43 388.82&#10;  L 302.18 385.42"/>
<path stroke="#783949" d="&#10;  M 302.18 385.42&#10;  Q 307.59 379.34 311.64 372.30&#10;  Q 311.74 372.11 311.93 372.22&#10;  L 311.93 372.22&#10;  Q 312.12 372.33 312.01 372.51&#10;  Q 307.99 379.60 302.61 385.73"/>
<path stroke="#808080" d="&#10;  M 302.61 385.73&#10;  L 298.52 389.43"/>
<path stroke="#783949" d="&#10;  M 298.52 389.43&#10;  Q 290.58 395.92 280.75 397.22"/>
<path stroke="#808080" d="&#10;  M 280.75 397.22&#10;  L 277.91 397.61"/>
<path stroke="#783949" d="&#10;  M 277.91 397.61&#10;  Q 266.78 397.60 256.42 392.88&#10;  Q 252.49 391.10 248.22 388.56"/>
<path stroke="#808080" d="&#10;  M 248.22 388.56&#10;  L 243.65 385.78"/>
<path stroke="#783949" d="&#10;  M 243.65 385.78&#10;  Q 231.43 377.26 218.08 370.10"/>
<path stroke="#808080" d="&#10;  M 218.08 370.10&#10;  L 212.36 367.60"/>
<path stroke="#783949" d="&#10;  M 212.36 367.60&#10;  Q 207.97 365.86 203.36 364.99&#10;  Q 199.95 364.34 202.94 366.10&#10;  Q 204.90 367.25 208.57 369.08&#10;  Q 208.78 369.18 208.67 369.40&#10;  L 208.67 369.41&#10;  Q 208.56 369.62 208.35 369.51&#10;  Q 200.99 365.84 193.58 362.24"/>
<path stroke="#7e7076" d="&#10;  M 193.58 362.24&#10;  L 169.47 350.16&#10;  Q 168.29 349.57 168.89 350.74&#10;  Q 169.44 351.84 169.94 353.55&#10;  Q 175.20 371.95 178.58 390.79"/>
<path stroke="#f5a8be" d="&#10;  M 193.58 362.24&#10;  Q 187.17 364.27 184.97 369.52&#10;  Q 184.27 371.22 183.69 373.12&#10;  Q 181.11 381.70 179.30 390.52&#10;  Q 179.24 390.83 178.93 390.86&#10;  Q 178.74 390.88 178.58 390.79"/>
<path stroke="#f7b8c8" d="&#10;  M 212.36 367.60&#10;  Q 211.54 368.95 210.61 369.48&#10;  A 0.77 0.77 0.0 0 0 210.54 370.78&#10;  L 213.95 373.27"/>
<path stroke="#f5a8be" d="&#10;  M 213.95 373.27&#10;  Q 212.12 373.41 211.80 372.99"/>
<path stroke="#f7b8c8" d="&#10;  M 211.80 372.99&#10;  Q 210.89 371.40 209.55 371.04&#10;  Q 209.05 370.91 208.66 371.24&#10;  Q 194.70 383.25 179.46 394.05"/>
<path stroke="#fdeff5" d="&#10;  M 211.80 372.99&#10;  L 211.77 373.36&#10;  Q 211.73 373.82 211.32 374.01&#10;  Q 207.59 375.78 204.42 378.77&#10;  C 200.81 382.19 196.85 384.88 193.06 388.00&#10;  C 189.94 390.58 186.21 392.73 182.81 395.01&#10;  C 181.97 395.57 181.84 396.29 180.99 396.77&#10;  A 0.04 0.04 0.0 0 0 181.01 396.84&#10;  Q 181.17 396.84 181.26 396.97&#10;  Q 181.42 397.20 181.27 397.44&#10;  Q 180.84 398.12 180.19 397.75"/>
<path stroke="#f7b8c8" d="&#10;  M 218.08 370.10&#10;  Q 214.02 394.26 212.12 418.25&#10;  Q 210.97 432.73 211.07 447.24&#10;  A 0.39 0.39 0.0 0 0 211.62 447.59&#10;  Q 211.89 447.47 212.09 447.11&#10;  Q 223.66 425.01 234.57 402.58&#10;  Q 236.40 398.81 243.65 385.78"/>
<path stroke="#f7b8c8" d="&#10;  M 248.22 388.56&#10;  Q 245.11 410.91 246.94 432.95&#10;  Q 248.87 456.12 254.24 477.47&#10;  Q 254.85 479.88 255.57 477.50&#10;  Q 267.32 438.51 275.31 398.54&#10;  Q 275.41 398.04 275.89 397.84&#10;  Q 276.72 397.50 277.91 397.61"/>
<path stroke="#f7b8c8" d="&#10;  M 280.75 397.22&#10;  Q 283.64 410.09 287.02 422.51&#10;  Q 291.79 440.06 296.60 457.32&#10;  C 297.66 461.12 298.66 465.91 298.78 469.84&#10;  Q 298.82 471.16 298.94 472.54&#10;  Q 299.12 474.45 299.73 472.63&#10;  C 308.74 445.65 307.88 416.20 298.52 389.43"/>
<path stroke="#f7b8c8" d="&#10;  M 302.61 385.73&#10;  Q 315.97 397.66 325.23 412.83&#10;  Q 326.64 415.13 327.67 417.81&#10;  Q 328.85 420.85 328.87 417.59&#10;  C 328.99 403.52 326.02 386.96 316.76 375.77"/>
<path stroke="#fdeff5" d="&#10;  M 328.55 423.38&#10;  Q 325.71 420.73 323.88 417.05&#10;  Q 321.65 412.55 320.68 411.16&#10;  Q 315.88 404.28 310.77 398.41&#10;  Q 309.52 396.97 308.58 395.54&#10;  C 307.46 393.82 305.82 392.36 304.07 391.36&#10;  Q 301.53 389.90 302.41 392.69&#10;  Q 306.51 405.71 307.74 417.06&#10;  C 308.11 420.45 308.77 423.87 308.90 427.34&#10;  Q 309.32 438.87 308.08 447.14&#10;  Q 307.25 452.69 306.62 458.48&#10;  C 306.34 461.11 305.18 463.28 304.63 465.90&#10;  Q 304.53 466.36 303.49 468.97&#10;  Q 302.71 470.94 303.70 473.23"/>
<path stroke="#fdeff5" d="&#10;  M 297.32 480.50&#10;  Q 296.37 479.82 296.39 479.34&#10;  Q 296.66 467.31 293.00 456.81&#10;  Q 291.37 452.12 290.37 447.18&#10;  Q 289.40 442.44 288.04 437.90&#10;  Q 285.35 428.96 283.92 422.49&#10;  Q 282.11 414.36 279.81 405.41&#10;  Q 279.53 404.31 278.98 403.42&#10;  A 0.70 0.70 0.0 0 0 277.72 403.56&#10;  Q 275.77 409.26 274.72 414.94&#10;  C 273.06 423.85 270.94 432.53 269.05 441.25&#10;  Q 268.55 443.54 267.32 447.39&#10;  Q 266.46 450.10 265.60 453.54&#10;  Q 263.72 461.08 257.10 483.34"/>
<path stroke="#fdeff5" d="&#10;  M 251.43 480.09&#10;  Q 247.02 460.54 245.77 451.24&#10;  Q 243.55 434.71 243.22 424.70&#10;  Q 243.03 419.22 243.09 414.09&#10;  C 243.17 407.34 243.95 400.91 244.31 394.25&#10;  Q 244.36 393.42 243.93 393.02&#10;  A 0.56 0.56 0.0 0 0 243.05 393.16&#10;  Q 237.85 402.70 233.44 412.43&#10;  Q 232.00 415.59 230.34 418.47&#10;  C 227.51 423.38 225.54 428.76 222.78 433.66&#10;  Q 219.70 439.12 216.57 444.56&#10;  C 216.14 445.32 215.92 446.24 215.59 447.04&#10;  Q 215.42 447.45 215.07 447.72&#10;  Q 213.93 448.62 213.38 450.00&#10;  A 1.93 1.93 0.0 0 0 214.04 452.27&#10;  Q 215.60 453.39 216.87 454.88&#10;  Q 217.38 455.48 217.09 457.30"/>
<path stroke="#fdeff5" d="&#10;  M 207.87 449.21&#10;  Q 207.69 446.54 208.01 443.88&#10;  Q 208.37 440.80 208.25 438.61&#10;  Q 208.01 434.20 208.19 429.89&#10;  Q 208.86 414.51 210.61 398.61&#10;  Q 210.71 397.66 210.54 396.73&#10;  Q 210.39 395.90 210.72 395.17&#10;  Q 211.13 394.27 211.32 393.35&#10;  Q 213.42 383.08 213.95 373.27"/>
<path stroke="#f7b8c8" d="&#10;  M 302.18 385.42&#10;  L 299.17 382.89"/>
<path stroke="#fdeff5" d="&#10;  M 332.81 407.30&#10;  Q 332.65 407.09 332.61 406.83&#10;  Q 332.53 406.31 332.03 406.21&#10;  L 331.54 406.10&#10;  A 1.02 1.01 82.3 0 1 330.85 405.57&#10;  Q 329.50 402.93 329.25 400.36&#10;  C 328.86 396.43 327.52 392.90 326.37 389.22&#10;  C 325.19 385.48 323.26 382.07 321.65 378.36&#10;  C 321.22 377.36 320.53 376.71 319.89 375.85&#10;  C 319.10 374.80 317.61 374.79 316.76 375.77"/>
<path stroke="#f5a8be" d="&#10;  M 316.76 375.77&#10;  Q 312.68 372.83 312.41 369.64"/>
<path stroke="#f5a8be" d="&#10;  M 314.58 366.85&#10;  Q 325.35 368.88 335.75 370.58&#10;  Q 336.42 370.69 336.47 370.67&#10;  A 0.97 0.96 -24.5 0 0 336.96 369.37&#10;  Q 332.60 360.18 321.66 360.87"/>
<path stroke="#f7b8c8" d="&#10;  M 298.43 388.82&#10;  L 296.47 385.39"/>
<path stroke="#f7b8c8" d="&#10;  M 280.63 396.50&#10;  L 279.79 392.25"/>
<path stroke="#f7b8c8" d="&#10;  M 277.25 392.32&#10;  Q 275.92 393.16 276.06 396.86"/>
<path stroke="#f7b8c8" d="&#10;  M 249.44 383.46&#10;  L 248.35 387.65"/>
<path stroke="#f7b8c8" d="&#10;  M 245.96 381.57&#10;  Q 245.42 383.24 243.72 384.89"/>
<path stroke="#f5a8be" d="&#10;  M 218.85 367.44&#10;  L 218.42 369.31"/>
<path stroke="#4b4d4c" d="&#10;  M 341.61 386.32&#10;  Q 346.20 375.26 349.38 364.54&#10;  C 350.54 360.63 352.56 351.03 344.99 352.37&#10;  Q 341.41 353.00 337.50 354.25&#10;  A 0.69 0.68 -16.5 0 0 337.04 355.09&#10;  C 340.53 367.83 339.22 381.40 337.33 394.18&#10;  Q 337.18 395.24 337.59 394.25&#10;  C 337.90 393.50 338.45 393.36 338.79 392.65&#10;  Q 340.27 389.54 341.61 386.32"/>
<path stroke="#808080" d="&#10;  M 332.08 418.67&#10;  C 325.50 441.12 315.22 462.25 299.68 479.26&#10;  Q 298.70 480.33 297.52 481.17&#10;  Q 297.38 481.27 297.47 481.41&#10;  L 297.61 481.64&#10;  Q 297.68 481.74 297.80 481.69&#10;  C 314.70 473.94 329.25 460.02 332.73 441.48&#10;  C 334.11 434.08 333.67 425.69 332.82 418.11&#10;  Q 332.76 417.64 332.46 417.99&#10;  Q 332.19 418.30 332.08 418.67"/>
<path stroke="#c06d49" d="&#10;  M 300.6925 266.2936&#10;  A 1.22 1.22 0.0 0 0 300.3308 264.6066&#10;  L 299.9950 264.3893&#10;  A 1.22 1.22 0.0 0 0 298.3080 264.7510&#10;  L 297.5475 265.9264&#10;  A 1.22 1.22 0.0 0 0 297.9092 267.6134&#10;  L 298.2450 267.8307&#10;  A 1.22 1.22 0.0 0 0 299.9320 267.4690&#10;  L 300.6925 266.2936"/>
<path stroke="#794029" d="&#10;  M 305.39 266.96&#10;  Q 305.27 266.86 305.16 266.97&#10;  Q 302.98 269.24 302.38 272.32&#10;  Q 302.35 272.51 302.54 272.56&#10;  L 302.55 272.56&#10;  Q 302.76 272.62 302.83 272.41&#10;  Q 303.70 269.61 305.41 267.12&#10;  Q 305.47 267.03 305.39 266.97&#10;  L 305.39 266.96"/>
<path stroke="#794029" d="&#10;  M 305.72 273.92&#10;  Q 306.81 271.31 308.31 269.07&#10;  Q 309.29 267.62 308.07 268.87&#10;  Q 305.96 271.03 305.46 273.84&#10;  Q 305.24 275.07 305.72 273.92"/>
<path stroke="#794029" d="&#10;  M 309.03 276.99&#10;  Q 310.51 273.58 312.48 270.40&#10;  Q 312.53 270.32 312.45 270.26&#10;  L 312.45 270.25&#10;  Q 312.32 270.16 312.23 270.28&#10;  Q 309.78 273.19 308.77 276.88&#10;  Q 308.74 277.01 308.87 277.06&#10;  L 308.88 277.06&#10;  Q 308.98 277.10 309.03 276.99"/>
<path stroke="#794029" d="&#10;  M 320.68 286.85&#10;  Q 321.76 288.32 321.53 286.54&#10;  Q 321.49 286.22 321.12 286.15&#10;  Q 320.52 286.02 320.23 285.47&#10;  L 318.78 282.69&#10;  Q 318.63 282.42 318.37 282.57&#10;  L 318.09 282.72&#10;  Q 317.87 282.84 318.01 283.05&#10;  Q 319.44 285.17 320.68 286.85"/>
<path stroke="#324966" d="&#10;  M 179.55 278.65&#10;  Q 180.65 282.46 183.62 284.86&#10;  Q 183.72 284.95 183.81 284.85&#10;  L 183.82 284.85&#10;  Q 183.94 284.72 183.82 284.60&#10;  Q 181.23 281.96 179.70 278.44&#10;  Q 179.67 278.36 179.59 278.36&#10;  Q 179.54 278.35 179.49 278.34&#10;  Q 179.32 278.32 179.44 278.44&#10;  Q 179.52 278.53 179.55 278.65"/>
<path stroke="#324966" d="&#10;  M 177.30 282.12&#10;  Q 178.24 285.27 180.95 287.36&#10;  Q 181.00 287.40 181.06 287.38&#10;  Q 181.24 287.33 181.11 287.19&#10;  Q 178.89 284.91 177.59 282.02&#10;  Q 177.53 281.88 177.39 281.93&#10;  L 177.39 281.94&#10;  Q 177.26 281.99 177.30 282.12"/>
<path stroke="#526986" d="&#10;  M 178.0490 289.0132&#10;  A 2.80 0.31 52.9 0 0 176.6073 286.5930&#10;  A 2.80 0.31 52.9 0 0 174.6710 284.5468&#10;  A 2.80 0.31 52.9 0 0 176.1127 286.9670&#10;  A 2.80 0.31 52.9 0 0 178.0490 289.0132"/>
</g>
<path fill="#010101" d="&#10;  M 307.47 261.43&#10;  L 297.91 263.15&#10;  L 293.81 262.23&#10;  Q 293.20 262.09 293.40 262.68&#10;  L 293.84 263.99&#10;  Q 292.90 263.42 292.47 262.79&#10;  A 1.88 1.85 78.3 0 0 291.30 262.01&#10;  L 289.77 261.71&#10;  Q 288.81 261.52 289.49 262.24&#10;  L 292.80 265.73&#10;  Q 292.93 265.87 292.81 266.01&#10;  L 292.64 266.21&#10;  Q 292.60 266.25 292.55 266.21&#10;  Q 290.34 264.46 288.76 262.02&#10;  A 1.23 1.22 76.0 0 0 287.87 261.48&#10;  L 281.69 260.87&#10;  Q 281.18 260.82 281.11 261.32&#10;  C 280.90 262.76 282.18 262.95 282.63 264.11&#10;  Q 282.92 264.86 282.21 264.49&#10;  C 280.17 263.43 278.61 262.10 276.86 260.68&#10;  Q 276.11 260.07 275.02 260.00&#10;  Q 263.85 259.29 253.34 259.45&#10;  A 1.64 1.60 20.0 0 0 252.15 259.99&#10;  C 249.31 263.14 246.56 264.60 246.67 269.53&#10;  Q 246.68 270.08 247.21 270.25&#10;  Q 251.95 271.77 255.56 275.46&#10;  A 1.84 1.80 -22.1 0 0 256.85 275.99&#10;  Q 275.68 275.80 295.72 278.62&#10;  A 0.40 0.40 0.0 0 0 296.12 278.02&#10;  Q 292.27 271.52 293.65 264.31&#10;  L 296.57 263.60&#10;  C 294.96 264.38 293.72 265.33 293.76 267.32&#10;  Q 293.88 273.52 297.67 279.36&#10;  Q 299.59 282.32 301.96 283.25&#10;  Q 302.10 283.38 302.13 283.58&#10;  Q 302.19 283.95 301.83 283.83&#10;  Q 299.58 283.11 298.31 281.30&#10;  Q 297.48 280.10 295.94 279.90&#10;  Q 276.52 277.35 257.44 277.14&#10;  A 0.31 0.31 0.0 0 0 257.16 277.60&#10;  Q 260.58 284.00 259.05 290.49&#10;  Q 258.91 291.07 259.51 291.10&#10;  Q 274.96 291.73 291.61 292.64&#10;  Q 291.82 292.65 291.81 292.86&#10;  L 291.81 292.87&#10;  Q 291.80 292.95 291.72 292.94&#10;  Q 275.11 292.10 259.25 291.78&#10;  Q 258.61 291.77 258.38 292.36&#10;  C 253.28 305.33 235.21 306.29 229.06 293.60&#10;  Q 228.73 292.94 228.00 293.00&#10;  Q 204.95 294.79 181.87 299.40&#10;  C 179.62 299.86 177.91 301.25 175.55 301.14&#10;  C 172.77 301.02 170.38 301.61 168.27 303.52&#10;  Q 163.48 307.85 159.16 311.81&#10;  Q 156.50 314.24 154.55 316.71&#10;  Q 154.15 317.22 154.78 317.06&#10;  Q 171.61 312.73 191.20 310.50&#10;  Q 248.41 303.98 305.41 307.83&#10;  C 319.41 308.77 332.55 309.70 346.06 312.81&#10;  Q 346.85 312.99 346.26 312.43&#10;  C 337.30 304.11 328.79 295.95 319.69 288.87&#10;  Q 319.17 288.47 318.73 288.95&#10;  L 318.52 289.18&#10;  Q 318.13 289.61 317.56 289.67&#10;  Q 310.76 290.39 306.13 285.35&#10;  Q 305.04 284.18 302.81 282.56&#10;  C 302.15 281.85 300.75 279.79 300.48 278.83&#10;  Q 300.23 277.95 300.79 278.68&#10;  C 303.14 281.74 305.60 284.28 308.68 286.73&#10;  C 311.30 288.81 313.99 289.50 317.27 289.13&#10;  A 1.30 1.29 88.9 0 0 318.41 287.94&#10;  C 318.70 284.14 314.19 282.80 311.22 283.69&#10;  Q 310.96 283.76 310.92 283.49&#10;  L 310.88 283.24&#10;  Q 310.85 283.05 311.04 283.03&#10;  Q 313.93 282.62 317.04 283.65&#10;  A 1.21 1.18 -4.5 0 1 317.69 284.19&#10;  C 318.72 286.04 319.02 287.56 321.43 288.05&#10;  Q 321.34 288.13 321.31 288.26&#10;  A 0.38 0.37 28.5 0 0 321.42 288.62&#10;  Q 334.95 300.24 347.84 312.39&#10;  C 349.05 313.52 349.96 314.12 350.14 315.93&#10;  A 1.84 1.83 72.3 0 1 349.22 317.71&#10;  Q 347.39 318.74 345.56 319.32&#10;  Q 334.96 322.67 322.89 325.06&#10;  A 1.17 1.17 0.0 0 0 322.00 326.56&#10;  Q 325.04 336.18 324.34 344.14&#10;  C 323.86 349.64 321.25 356.17 318.64 361.18&#10;  Q 318.19 362.05 318.99 361.49&#10;  Q 324.25 357.76 329.33 354.64&#10;  Q 331.89 353.07 334.44 352.65&#10;  C 338.35 352.00 342.39 350.09 346.17 350.15&#10;  C 355.68 350.32 351.19 361.78 349.49 366.77&#10;  Q 343.96 383.04 337.38 397.85&#10;  Q 335.85 401.29 335.41 404.03&#10;  C 334.82 407.66 333.16 411.24 334.13 414.94&#10;  C 335.92 421.76 336.56 428.76 336.39 436.06&#10;  C 335.85 458.66 319.87 474.84 300.36 484.19&#10;  A 0.66 0.66 0.0 0 0 300.33 485.36&#10;  C 302.78 486.71 307.18 490.75 302.69 493.25&#10;  C 305.56 489.17 301.10 486.87 297.98 485.85&#10;  Q 297.48 485.69 296.98 485.86&#10;  C 293.37 487.10 289.83 488.14 286.66 490.52&#10;  Q 283.55 492.85 280.24 494.94&#10;  A 1.90 1.88 -49.0 0 1 278.48 495.07&#10;  Q 275.00 493.56 271.26 491.72&#10;  Q 269.60 490.90 268.37 491.76&#10;  Q 260.05 490.42 257.06 493.71&#10;  Q 258.86 491.09 256.04 488.96&#10;  C 249.20 483.79 236.14 484.60 228.36 486.58&#10;  Q 227.06 486.91 223.54 488.96&#10;  Q 204.68 485.59 190.83 475.92&#10;  Q 182.22 469.92 176.48 459.59&#10;  Q 167.22 442.92 170.19 423.89&#10;  Q 171.49 415.60 174.44 407.78&#10;  Q 175.00 408.03 174.87 408.50&#10;  C 169.38 427.74 170.43 447.44 182.43 463.59&#10;  C 192.15 476.67 207.46 484.80 223.30 487.85&#10;  A 2.30 2.29 36.7 0 0 224.82 487.63&#10;  L 230.01 484.93&#10;  C 238.17 482.60 252.07 482.27 258.28 489.55&#10;  Q 258.66 490.00 259.24 489.95&#10;  L 265.28 489.42&#10;  Q 266.42 489.32 265.39 488.82&#10;  C 247.46 480.05 230.42 470.26 214.65 457.93&#10;  Q 204.12 449.51 196.11 439.89&#10;  Q 185.96 427.69 180.86 410.75&#10;  Q 180.61 409.92 179.74 409.63&#10;  C 177.99 409.04 176.20 407.82 174.57 406.99&#10;  Q 149.51 383.27 148.45 348.51&#10;  C 148.34 344.84 150.54 341.29 154.69 342.58&#10;  Q 159.75 344.15 164.07 346.75&#10;  C 165.34 347.50 166.72 347.30 167.98 347.95&#10;  Q 177.73 352.99 186.98 357.77&#10;  Q 188.68 358.65 187.88 356.91&#10;  Q 181.73 343.49 180.67 327.06&#10;  L 181.74 313.65&#10;  A 0.41 0.41 0.0 0 0 181.27 313.21&#10;  C 171.82 314.63 162.20 316.00 153.28 319.09&#10;  Q 151.96 319.55 151.92 320.79&#10;  Q 151.90 321.41 152.47 321.65&#10;  Q 160.28 324.90 169.41 325.80&#10;  Q 164.31 325.74 158.01 324.46&#10;  C 155.13 323.88 147.68 322.01 152.09 317.33&#10;  Q 160.15 308.78 169.60 300.94&#10;  A 1.03 1.02 -33.3 0 0 169.86 299.70&#10;  Q 169.02 298.05 168.74 296.20&#10;  Q 168.66 295.67 168.20 295.38&#10;  Q 164.86 293.29 166.70 289.49&#10;  Q 167.44 289.38 167.88 288.99&#10;  Q 168.37 288.56 168.21 287.88&#10;  Q 167.93 286.75 166.37 286.72&#10;  Q 167.00 278.02 174.59 272.69&#10;  L 175.27 272.80&#10;  Q 171.02 275.71 168.68 280.13&#10;  C 167.84 281.72 168.03 283.38 167.14 284.92&#10;  A 0.63 0.61 51.1 0 0 167.09 285.45&#10;  Q 167.27 285.94 167.73 285.95&#10;  A 0.62 0.61 76.7 0 1 168.28 286.29&#10;  Q 168.95 287.55 168.58 289.14&#10;  Q 168.45 289.67 168.00 289.96&#10;  Q 166.92 290.67 166.62 292.01&#10;  A 1.67 1.67 0.0 0 0 167.81 293.98&#10;  Q 170.36 294.69 169.85 297.51&#10;  Q 169.56 299.16 171.23 299.21&#10;  Q 171.96 299.23 172.58 298.48&#10;  Q 173.31 297.58 173.69 298.68&#10;  Q 173.79 299.00 173.78 299.35&#10;  Q 173.75 299.96 174.34 300.14&#10;  C 177.67 301.16 180.74 298.73 183.50 297.32&#10;  Q 184.13 297.64 184.51 297.58&#10;  Q 205.96 293.66 227.61 292.16&#10;  Q 228.08 292.13 228.03 291.66&#10;  L 227.60 287.53&#10;  Q 229.48 296.85 237.35 300.09&#10;  C 246.05 303.67 255.32 299.26 258.24 290.39&#10;  C 260.03 284.97 258.29 278.05 253.92 274.70&#10;  C 245.07 267.92 234.60 270.34 228.76 279.69&#10;  Q 228.85 279.34 228.82 279.04&#10;  Q 228.78 278.54 228.27 278.59&#10;  Q 211.92 280.25 196.56 283.51&#10;  A 1.83 1.82 -88.1 0 0 195.19 284.80&#10;  Q 194.05 288.76 191.42 292.16&#10;  Q 189.50 294.64 186.83 294.63&#10;  Q 190.62 292.79 191.58 291.10&#10;  Q 196.73 281.99 197.40 271.50&#10;  Q 197.42 271.24 197.81 270.99&#10;  Q 200.75 267.26 203.62 267.12&#10;  C 207.40 266.92 211.30 267.37 214.15 264.37&#10;  Q 215.85 262.58 213.46 263.21&#10;  Q 208.94 264.40 204.28 264.98&#10;  Q 202.06 265.25 200.38 266.46&#10;  Q 198.49 267.82 196.90 269.95&#10;  L 192.26 268.88&#10;  L 191.60 268.43&#10;  Q 192.27 267.41 192.54 265.76&#10;  Q 194.82 251.31 196.06 236.72&#10;  A 1.02 1.02 0.0 0 1 196.71 235.85&#10;  Q 199.00 234.97 201.50 234.25&#10;  Q 223.25 228.03 246.44 227.28&#10;  Q 264.49 226.69 279.30 228.62&#10;  Q 288.83 229.86 299.13 232.56&#10;  Q 300.26 232.86 301.37 233.37&#10;  A 2.07 2.07 0.0 0 1 302.57 235.10&#10;  Q 303.48 247.44 306.03 258.74&#10;  Q 306.45 260.56 307.47 261.43&#10;  Z&#10;  M 197.06 239.67&#10;  Q 196.33 247.78 195.25 255.76&#10;  A 0.47 0.47 0.0 0 0 195.84 256.28&#10;  Q 198.75 255.50 201.92 255.04&#10;  C 204.39 254.67 205.34 252.93 207.15 251.60&#10;  C 209.45 249.90 214.01 248.38 216.24 251.20&#10;  Q 216.88 252.00 217.91 251.85&#10;  Q 228.58 250.30 239.88 249.48&#10;  Q 240.37 249.45 240.70 249.08&#10;  Q 246.91 242.24 253.81 248.42&#10;  Q 254.27 248.83 254.88 248.82&#10;  Q 264.47 248.58 274.34 249.36&#10;  Q 274.88 249.40 275.30 249.07&#10;  C 276.47 248.15 277.45 247.04 278.92 246.58&#10;  C 282.96 245.32 286.43 247.02 288.73 250.33&#10;  Q 289.09 250.84 289.70 250.95&#10;  L 302.77 253.15&#10;  Q 303.75 253.32 303.57 252.34&#10;  Q 302.00 243.95 301.42 235.85&#10;  A 2.12 2.11 5.2 0 0 299.84 233.96&#10;  C 266.82 225.34 231.39 226.51 198.80 236.31&#10;  C 196.82 236.90 197.21 238.03 197.06 239.67&#10;  Z&#10;  M 239.37 256.40&#10;  Q 238.50 253.74 240.05 251.01&#10;  A 0.40 0.40 0.0 0 0 239.67 250.42&#10;  Q 224.25 251.39 208.88 254.38&#10;  Q 208.48 254.45 208.16 254.68&#10;  Q 207.90 254.88 207.70 255.15&#10;  Q 207.36 255.62 206.82 255.83&#10;  Q 204.31 256.78 202.31 258.10&#10;  Q 199.80 259.75 201.60 257.35&#10;  L 202.26 256.47&#10;  Q 202.78 255.77 201.93 255.94&#10;  L 195.53 257.23&#10;  Q 195.39 257.26 195.35 257.39&#10;  Q 194.76 259.15 193.81 266.04&#10;  A 0.12 0.12 0.0 0 0 193.95 266.17&#10;  Q 216.43 261.19 238.28 259.48&#10;  Q 238.78 259.44 239.03 259.00&#10;  L 240.23 256.86&#10;  Q 241.16 255.93 241.62 254.74&#10;  Q 241.80 254.26 241.65 253.77&#10;  Q 241.27 252.59 241.97 251.57&#10;  C 244.64 247.70 248.68 248.86 252.62 249.01&#10;  Q 253.44 249.04 252.88 248.44&#10;  Q 251.12 246.56 248.77 246.29&#10;  C 241.59 245.47 240.40 250.88 239.37 256.40&#10;  Z&#10;  M 280.40 261.52&#10;  Q 279.86 259.42 278.04 258.59&#10;  Q 277.58 258.38 277.34 257.92&#10;  Q 275.63 254.62 277.47 251.76&#10;  C 280.13 247.61 283.77 250.57 287.43 250.78&#10;  Q 288.28 250.82 287.76 250.16&#10;  C 283.98 245.34 277.33 245.53 274.83 251.30&#10;  C 272.88 255.81 276.62 260.33 280.43 262.70&#10;  A 0.39 0.38 35.3 0 0 280.93 262.62&#10;  Q 281.32 262.16 280.77 261.94&#10;  A 0.64 0.63 4.0 0 1 280.40 261.52&#10;  Z&#10;  M 242.39 254.81&#10;  L 240.15 258.46&#10;  Q 239.70 259.19 240.55 259.16&#10;  Q 246.34 258.98 251.49 258.80&#10;  Q 263.44 258.38 274.58 259.14&#10;  A 0.49 0.49 0.0 0 0 275.04 258.42&#10;  Q 273.01 254.73 274.19 251.06&#10;  A 0.70 0.70 0.0 0 0 273.57 250.15&#10;  Q 260.03 249.28 245.37 250.00&#10;  C 243.61 250.08 242.02 251.70 242.56 253.48&#10;  Q 242.78 254.18 242.39 254.81&#10;  Z&#10;  M 203.27 256.62&#10;  Q 203.78 256.59 204.32 256.23&#10;  C 205.36 255.54 206.29 255.39 206.98 254.19&#10;  Q 207.33 253.58 207.96 253.27&#10;  Q 209.22 252.66 210.61 252.75&#10;  Q 213.28 252.93 215.84 252.17&#10;  Q 216.46 251.99 215.96 251.57&#10;  C 210.98 247.36 206.44 253.51 203.06 256.07&#10;  A 0.31 0.31 0.0 0 0 203.27 256.62&#10;  Z&#10;  M 280.90 260.10&#10;  Q 288.24 260.38 295.91 261.94&#10;  C 298.96 262.56 301.33 261.50 304.33 261.26&#10;  A 0.82 0.82 0.0 0 0 305.06 260.25&#10;  L 303.81 254.93&#10;  Q 303.66 254.27 302.99 254.14&#10;  Q 292.67 252.14 281.45 250.79&#10;  C 277.00 250.25 275.52 256.48 278.83 258.14&#10;  C 279.69 258.57 280.16 259.21 280.67 259.97&#10;  A 0.27 0.27 0.0 0 0 280.90 260.10&#10;  Z&#10;  M 246.14 268.40&#10;  C 246.45 264.57 248.53 262.55 251.20 260.20&#10;  Q 252.28 259.24 250.85 259.41&#10;  C 245.45 260.04 244.80 265.06 244.18 269.41&#10;  Q 244.11 269.91 244.62 269.96&#10;  L 245.47 270.03&#10;  A 0.48 0.48 0.0 0 0 246.00 269.62&#10;  Q 246.09 269.01 246.14 268.40&#10;  Z&#10;  M 197.86 273.26&#10;  C 197.85 276.00 197.22 278.95 196.26 281.45&#10;  Q 195.96 282.24 196.79 282.07&#10;  Q 212.68 278.80 229.11 277.18&#10;  A 2.39 2.38 15.8 0 0 230.78 276.25&#10;  Q 235.43 270.12 242.85 269.78&#10;  Q 243.50 269.75 243.59 269.11&#10;  C 244.04 266.13 244.54 262.70 246.84 260.49&#10;  Q 247.66 259.72 246.53 259.76&#10;  Q 232.85 260.34 216.84 262.74&#10;  Q 215.90 262.88 215.34 263.69&#10;  Q 212.75 267.36 208.54 267.46&#10;  C 204.49 267.56 202.03 267.52 198.89 270.81&#10;  Q 197.87 271.88 197.86 273.26&#10;  Z&#10;  M 195.45 269.00&#10;  C 195.94 269.18 196.52 269.05 196.87 268.66&#10;  Q 197.84 267.59 199.04 266.69&#10;  Q 200.42 265.67 198.75 266.06&#10;  L 193.58 267.27&#10;  A 0.53 0.53 0.0 0 0 193.34 268.17&#10;  C 194.03 268.80 194.67 268.71 195.45 269.00&#10;  Z&#10;  M 250.21 308.04&#10;  Q 246.73 307.62 245.79 308.49&#10;  C 240.01 306.49 237.14 315.88 237.31 319.72&#10;  C 237.87 331.79 251.70 337.77 261.31 331.94&#10;  C 270.21 326.54 270.37 315.24 262.94 308.52&#10;  Q 262.17 307.82 261.00 307.80&#10;  Q 254.77 307.71 250.21 308.04&#10;  Z&#10;  M 274.18 315.71&#10;  Q 279.25 314.92 284.65 315.74&#10;  L 289.58 316.94&#10;  Q 290.14 317.08 290.24 316.51&#10;  Q 290.93 312.39 293.50 309.22&#10;  Q 293.93 308.67 293.24 308.64&#10;  L 284.33 308.26&#10;  L 273.07 307.96&#10;  L 265.67 307.92&#10;  Q 264.93 307.92 265.44 308.45&#10;  Q 268.57 311.73 269.53 315.86&#10;  Q 269.67 316.45 270.27 316.35&#10;  L 274.18 315.71&#10;  Z&#10;  M 205.44 310.46&#10;  L 184.94 312.82&#10;  Q 184.35 312.89 184.25 313.48&#10;  Q 180.49 336.73 191.42 358.81&#10;  C 192.57 361.14 195.75 362.13 197.89 363.35&#10;  C 200.30 364.72 203.12 363.38 205.80 364.46&#10;  C 207.68 365.22 209.65 364.18 211.79 364.69&#10;  C 221.30 366.94 227.74 370.91 238.63 376.35&#10;  Q 246.58 380.69 255.15 385.12&#10;  C 266.47 390.98 283.55 393.78 294.10 385.39&#10;  Q 301.77 379.28 308.24 373.14&#10;  C 310.10 371.38 311.44 369.32 313.13 367.42&#10;  C 317.76 362.25 321.20 353.26 322.31 347.51&#10;  Q 324.46 336.40 318.32 323.22&#10;  Q 317.89 322.30 317.70 323.30&#10;  C 315.23 336.10 300.01 340.52 292.68 328.86&#10;  Q 292.37 328.37 292.06 328.86&#10;  C 288.52 334.53 278.15 333.58 272.81 331.84&#10;  Q 269.20 330.67 268.29 328.03&#10;  Q 268.06 327.37 267.70 327.97&#10;  C 263.61 334.79 254.66 337.72 247.31 334.99&#10;  Q 236.87 331.12 235.57 320.35&#10;  Q 235.48 319.65 234.77 319.69&#10;  L 203.89 321.54&#10;  L 193.44 322.40&#10;  A 4.07 4.06 -80.1 0 0 190.06 324.78&#10;  L 187.15 331.23&#10;  A 1.41 1.40 26.0 0 1 185.22 331.89&#10;  L 184.67 331.60&#10;  Q 183.41 330.93 183.95 329.60&#10;  C 185.95 324.64 187.63 319.62 192.98 318.77&#10;  Q 193.09 319.20 193.43 319.50&#10;  Q 193.74 319.77 194.15 319.79&#10;  C 204.04 320.06 214.04 319.19 224.25 318.35&#10;  Q 225.01 318.29 224.43 317.79&#10;  Q 224.03 317.44 223.50 317.51&#10;  Q 217.75 318.28 212.33 317.43&#10;  L 235.52 315.03&#10;  Q 236.09 314.97 236.28 314.43&#10;  Q 237.47 311.04 239.65 308.66&#10;  A 0.27 0.27 0.0 0 0 239.44 308.21&#10;  L 205.44 310.46&#10;  Z&#10;  M 302.43 309.32&#10;  Q 297.82 307.35 295.62 312.17&#10;  Q 295.19 310.97 296.19 309.74&#10;  Q 297.63 307.97 295.70 309.20&#10;  Q 294.33 310.08 293.37 312.20&#10;  Q 290.11 319.39 293.00 326.13&#10;  C 297.30 336.15 309.97 336.87 314.76 326.99&#10;  Q 318.59 319.08 313.79 311.11&#10;  C 313.11 309.97 311.96 309.69 310.75 309.56&#10;  Q 305.69 309.03 302.43 309.32&#10;  Z&#10;  M 323.35 324.13&#10;  Q 334.95 321.93 346.74 317.86&#10;  Q 347.72 317.53 348.47 316.87&#10;  A 0.96 0.96 0.0 0 0 348.20 315.25&#10;  Q 343.84 313.55 339.09 312.70&#10;  Q 328.53 310.79 317.86 310.12&#10;  A 0.55 0.55 0.0 0 0 317.27 310.66&#10;  Q 317.16 317.80 321.08 324.27&#10;  Q 321.34 324.71 321.83 324.54&#10;  Q 322.55 324.28 323.35 324.13&#10;  Z&#10;  M 274.35 318.89&#10;  L 270.67 319.60&#10;  Q 270.18 319.70 270.14 320.20&#10;  Q 269.87 323.64 268.39 326.82&#10;  Q 268.34 326.93 268.41 326.84&#10;  Q 270.76 324.09 274.26 323.37&#10;  Q 278.98 322.49 283.35 323.62&#10;  C 279.18 323.82 272.01 324.24 269.01 327.42&#10;  Q 268.63 327.82 268.90 328.30&#10;  Q 269.92 330.15 271.81 330.75&#10;  C 276.78 332.33 285.93 332.53 290.59 328.72&#10;  A 1.07 1.06 -43.7 0 0 290.63 327.10&#10;  L 288.19 324.95&#10;  Q 288.14 324.81 288.51 324.61&#10;  L 290.45 325.70&#10;  Q 291.21 326.12 290.92 325.30&#10;  Q 289.95 322.50 290.03 319.68&#10;  Q 290.05 319.05 289.42 318.97&#10;  L 285.19 318.41&#10;  Q 279.71 317.93 274.35 318.89&#10;  Z&#10;  M 153.33 343.42&#10;  C 149.06 342.47 149.27 349.40 149.60 351.64&#10;  Q 152.55 371.89 164.59 389.78&#10;  C 168.72 395.93 172.73 402.10 179.05 406.20&#10;  Q 179.59 406.55 179.46 405.92&#10;  C 175.81 388.12 172.68 370.42 167.94 353.01&#10;  A 3.71 3.68 10.1 0 0 166.49 350.95&#10;  Q 162.02 347.87 157.50 345.10&#10;  Q 155.59 343.93 153.33 343.42&#10;  Z&#10;  M 178.58 390.79&#10;  L 179.46 394.05&#10;  Q 179.29 395.23 180.19 397.75&#10;  Q 185.05 428.54 207.87 449.21&#10;  L 217.09 457.30&#10;  Q 232.69 469.74 251.43 480.09&#10;  L 257.10 483.34&#10;  L 278.49 494.25&#10;  A 1.52 1.51 -47.2 0 0 279.98 494.19&#10;  Q 289.35 488.48 297.32 480.50&#10;  L 303.70 473.23&#10;  Q 307.10 469.03 309.33 465.56&#10;  Q 322.08 445.68 328.55 423.38&#10;  L 332.81 407.30&#10;  Q 332.84 407.26 332.87 407.22&#10;  Q 332.90 407.18 332.92 407.12&#10;  Q 337.67 387.74 337.58 368.26&#10;  Q 337.55 360.81 335.25 354.38&#10;  A 1.23 1.22 -21.6 0 0 333.60 353.67&#10;  Q 327.18 356.48 321.66 360.87&#10;  Q 318.18 362.60 314.58 366.85&#10;  Q 313.56 367.41 312.41 369.64&#10;  L 299.17 382.89&#10;  L 296.47 385.39&#10;  Q 294.98 386.50 293.49 387.62&#10;  C 289.54 390.58 284.71 391.96 279.79 392.25&#10;  L 277.25 392.32&#10;  Q 267.29 392.17 257.76 387.79&#10;  Q 253.62 385.89 249.44 383.46&#10;  L 245.96 381.57&#10;  L 218.85 367.44&#10;  C 215.97 366.22 213.97 366.10 211.52 365.18&#10;  Q 210.27 364.71 208.87 365.32&#10;  Q 208.11 365.64 208.92 365.79&#10;  C 210.12 366.01 211.13 366.04 212.27 366.61&#10;  Q 215.27 368.10 218.42 369.31&#10;  L 243.72 384.89&#10;  L 248.35 387.65&#10;  C 256.34 392.81 266.35 396.58 276.06 396.86&#10;  L 280.63 396.50&#10;  Q 290.64 395.30 298.43 388.82&#10;  L 302.18 385.42&#10;  Q 307.59 379.34 311.64 372.30&#10;  Q 311.74 372.11 311.93 372.22&#10;  L 311.93 372.22&#10;  Q 312.12 372.33 312.01 372.51&#10;  Q 307.99 379.60 302.61 385.73&#10;  L 298.52 389.43&#10;  Q 290.58 395.92 280.75 397.22&#10;  L 277.91 397.61&#10;  Q 266.78 397.60 256.42 392.88&#10;  Q 252.49 391.10 248.22 388.56&#10;  L 243.65 385.78&#10;  Q 231.43 377.26 218.08 370.10&#10;  L 212.36 367.60&#10;  Q 207.97 365.86 203.36 364.99&#10;  Q 199.95 364.34 202.94 366.10&#10;  Q 204.90 367.25 208.57 369.08&#10;  Q 208.78 369.18 208.67 369.40&#10;  L 208.67 369.41&#10;  Q 208.56 369.62 208.35 369.51&#10;  Q 200.99 365.84 193.58 362.24&#10;  L 169.47 350.16&#10;  Q 168.29 349.57 168.89 350.74&#10;  Q 169.44 351.84 169.94 353.55&#10;  Q 175.20 371.95 178.58 390.79&#10;  Z&#10;  M 341.61 386.32&#10;  Q 346.20 375.26 349.38 364.54&#10;  C 350.54 360.63 352.56 351.03 344.99 352.37&#10;  Q 341.41 353.00 337.50 354.25&#10;  A 0.69 0.68 -16.5 0 0 337.04 355.09&#10;  C 340.53 367.83 339.22 381.40 337.33 394.18&#10;  Q 337.18 395.24 337.59 394.25&#10;  C 337.90 393.50 338.45 393.36 338.79 392.65&#10;  Q 340.27 389.54 341.61 386.32&#10;  Z&#10;  M 332.08 418.67&#10;  C 325.50 441.12 315.22 462.25 299.68 479.26&#10;  Q 298.70 480.33 297.52 481.17&#10;  Q 297.38 481.27 297.47 481.41&#10;  L 297.61 481.64&#10;  Q 297.68 481.74 297.80 481.69&#10;  C 314.70 473.94 329.25 460.02 332.73 441.48&#10;  C 334.11 434.08 333.67 425.69 332.82 418.11&#10;  Q 332.76 417.64 332.46 417.99&#10;  Q 332.19 418.30 332.08 418.67&#10;  Z"/>
<path fill="#a78762" d="&#10;  M 197.06 239.67&#10;  C 197.21 238.03 196.82 236.90 198.80 236.31&#10;  C 231.39 226.51 266.82 225.34 299.84 233.96&#10;  A 2.12 2.11 5.2 0 1 301.42 235.85&#10;  Q 302.00 243.95 303.57 252.34&#10;  Q 303.75 253.32 302.77 253.15&#10;  L 289.70 250.95&#10;  Q 289.09 250.84 288.73 250.33&#10;  C 286.43 247.02 282.96 245.32 278.92 246.58&#10;  C 277.45 247.04 276.47 248.15 275.30 249.07&#10;  Q 274.88 249.40 274.34 249.36&#10;  Q 264.47 248.58 254.88 248.82&#10;  Q 254.27 248.83 253.81 248.42&#10;  Q 246.91 242.24 240.70 249.08&#10;  Q 240.37 249.45 239.88 249.48&#10;  Q 228.58 250.30 217.91 251.85&#10;  Q 216.88 252.00 216.24 251.20&#10;  C 214.01 248.38 209.45 249.90 207.15 251.60&#10;  C 205.34 252.93 204.39 254.67 201.92 255.04&#10;  Q 198.75 255.50 195.84 256.28&#10;  A 0.47 0.47 0.0 0 1 195.25 255.76&#10;  Q 196.33 247.78 197.06 239.67&#10;  Z"/>
<path fill="#a78762" d="&#10;  M 240.23 256.86&#10;  Q 239.74 256.38 239.37 256.40&#10;  C 240.40 250.88 241.59 245.47 248.77 246.29&#10;  Q 251.12 246.56 252.88 248.44&#10;  Q 253.44 249.04 252.62 249.01&#10;  C 248.68 248.86 244.64 247.70 241.97 251.57&#10;  Q 241.27 252.59 241.65 253.77&#10;  Q 241.80 254.26 241.62 254.74&#10;  Q 241.16 255.93 240.23 256.86&#10;  Z"/>
<path fill="#a78762" d="&#10;  M 280.77 261.94&#10;  Q 281.32 262.16 280.93 262.62&#10;  A 0.39 0.38 35.3 0 1 280.43 262.70&#10;  C 276.62 260.33 272.88 255.81 274.83 251.30&#10;  C 277.33 245.53 283.98 245.34 287.76 250.16&#10;  Q 288.28 250.82 287.43 250.78&#10;  C 283.77 250.57 280.13 247.61 277.47 251.76&#10;  Q 275.63 254.62 277.34 257.92&#10;  Q 277.58 258.38 278.04 258.59&#10;  Q 279.86 259.42 280.40 261.52&#10;  A 0.64 0.63 4.0 0 0 280.77 261.94&#10;  Z"/>
<path fill="#8e5b40" d="&#10;  M 242.56 253.48&#10;  C 242.02 251.70 243.61 250.08 245.37 250.00&#10;  Q 260.03 249.28 273.57 250.15&#10;  A 0.70 0.70 0.0 0 1 274.19 251.06&#10;  Q 273.01 254.73 275.04 258.42&#10;  A 0.49 0.49 0.0 0 1 274.58 259.14&#10;  Q 263.44 258.38 251.49 258.80&#10;  Q 246.34 258.98 240.55 259.16&#10;  Q 239.70 259.19 240.15 258.46&#10;  L 242.39 254.81&#10;  Q 242.78 254.18 242.56 253.48&#10;  Z"/>
<path fill="#a78762" d="&#10;  M 203.06 256.07&#10;  C 206.44 253.51 210.98 247.36 215.96 251.57&#10;  Q 216.46 251.99 215.84 252.17&#10;  Q 213.28 252.93 210.61 252.75&#10;  Q 209.22 252.66 207.96 253.27&#10;  Q 207.33 253.58 206.98 254.19&#10;  C 206.29 255.39 205.36 255.54 204.32 256.23&#10;  Q 203.78 256.59 203.27 256.62&#10;  A 0.31 0.31 0.0 0 1 203.06 256.07&#10;  Z"/>
<path fill="#8e5b40" d="&#10;  M 239.37 256.40&#10;  Q 239.74 256.38 240.23 256.86&#10;  L 239.03 259.00&#10;  Q 238.78 259.44 238.28 259.48&#10;  Q 216.43 261.19 193.95 266.17&#10;  A 0.12 0.12 0.0 0 1 193.81 266.04&#10;  Q 194.76 259.15 195.35 257.39&#10;  Q 195.39 257.26 195.53 257.23&#10;  L 201.93 255.94&#10;  Q 202.78 255.77 202.26 256.47&#10;  L 201.60 257.35&#10;  Q 199.80 259.75 202.31 258.10&#10;  Q 204.31 256.78 206.82 255.83&#10;  Q 207.36 255.62 207.70 255.15&#10;  Q 207.90 254.88 208.16 254.68&#10;  Q 208.48 254.45 208.88 254.38&#10;  Q 224.25 251.39 239.67 250.42&#10;  A 0.40 0.40 0.0 0 1 240.05 251.01&#10;  Q 238.50 253.74 239.37 256.40&#10;  Z"/>
<path fill="#8e5b40" d="&#10;  M 280.90 260.10&#10;  A 0.27 0.27 0.0 0 1 280.67 259.97&#10;  C 280.16 259.21 279.69 258.57 278.83 258.14&#10;  C 275.52 256.48 277.00 250.25 281.45 250.79&#10;  Q 292.67 252.14 302.99 254.14&#10;  Q 303.66 254.27 303.81 254.93&#10;  L 305.06 260.25&#10;  A 0.82 0.82 0.0 0 1 304.33 261.26&#10;  C 301.33 261.50 298.96 262.56 295.91 261.94&#10;  Q 288.24 260.38 280.90 260.10&#10;  Z"/>
<path fill="#a78762" d="&#10;  M 246.14 268.40&#10;  Q 246.09 269.01 246.00 269.62&#10;  A 0.48 0.48 0.0 0 1 245.47 270.03&#10;  L 244.62 269.96&#10;  Q 244.11 269.91 244.18 269.41&#10;  C 244.80 265.06 245.45 260.04 250.85 259.41&#10;  Q 252.28 259.24 251.20 260.20&#10;  C 248.53 262.55 246.45 264.57 246.14 268.40&#10;  Z"/>
<path fill="#a78762" d="&#10;  M 293.84 263.99&#10;  Q 293.75 264.15 293.65 264.31&#10;  Q 292.27 271.52 296.12 278.02&#10;  A 0.40 0.40 0.0 0 1 295.72 278.62&#10;  Q 275.68 275.80 256.85 275.99&#10;  A 1.84 1.80 -22.1 0 1 255.56 275.46&#10;  Q 251.95 271.77 247.21 270.25&#10;  Q 246.68 270.08 246.67 269.53&#10;  C 246.56 264.60 249.31 263.14 252.15 259.99&#10;  A 1.64 1.60 20.0 0 1 253.34 259.45&#10;  Q 263.85 259.29 275.02 260.00&#10;  Q 276.11 260.07 276.86 260.68&#10;  C 278.61 262.10 280.17 263.43 282.21 264.49&#10;  Q 282.92 264.86 282.63 264.11&#10;  C 282.18 262.95 280.90 262.76 281.11 261.32&#10;  Q 281.18 260.82 281.69 260.87&#10;  L 287.87 261.48&#10;  A 1.23 1.22 76.0 0 1 288.76 262.02&#10;  Q 290.34 264.46 292.55 266.21&#10;  Q 292.60 266.25 292.64 266.21&#10;  L 292.81 266.01&#10;  Q 292.93 265.87 292.80 265.73&#10;  L 289.49 262.24&#10;  Q 288.81 261.52 289.77 261.71&#10;  L 291.30 262.01&#10;  A 1.88 1.85 78.3 0 1 292.47 262.79&#10;  Q 292.90 263.42 293.84 263.99&#10;  Z"/>
<path fill="#a78762" d="&#10;  M 196.26 281.45&#10;  C 197.22 278.95 197.85 276.00 197.86 273.26&#10;  Q 197.87 271.88 198.89 270.81&#10;  C 202.03 267.52 204.49 267.56 208.54 267.46&#10;  Q 212.75 267.36 215.34 263.69&#10;  Q 215.90 262.88 216.84 262.74&#10;  Q 232.85 260.34 246.53 259.76&#10;  Q 247.66 259.72 246.84 260.49&#10;  C 244.54 262.70 244.04 266.13 243.59 269.11&#10;  Q 243.50 269.75 242.85 269.78&#10;  Q 235.43 270.12 230.78 276.25&#10;  A 2.39 2.38 15.8 0 1 229.11 277.18&#10;  Q 212.68 278.80 196.79 282.07&#10;  Q 195.96 282.24 196.26 281.45&#10;  Z"/>
<path fill="#f17e51" d="&#10;  M 307.47 261.43&#10;  Q 307.08 261.19 307.95 261.32&#10;  Q 307.83 261.44 307.91 261.56&#10;  Q 307.97 261.67 308.09 261.67&#10;  Q 313.79 261.70 318.87 264.77&#10;  Q 322.41 267.46 324.46 272.36&#10;  Q 324.76 273.84 322.87 273.38&#10;  A 1.58 1.57 86.7 0 1 321.77 272.39&#10;  Q 321.39 271.34 320.85 269.80&#10;  Q 320.79 269.64 320.62 269.69&#10;  L 320.62 269.69&#10;  Q 320.54 269.72 320.55 269.80&#10;  Q 320.88 271.49 321.27 273.03&#10;  A 1.17 1.16 -2.6 0 0 322.22 273.89&#10;  C 325.18 274.34 328.87 276.56 327.83 280.06&#10;  Q 327.69 280.53 327.28 280.81&#10;  L 324.03 283.00&#10;  Q 324.66 285.14 324.36 286.96&#10;  Q 324.28 287.44 323.81 287.54&#10;  L 321.43 288.05&#10;  C 319.02 287.56 318.72 286.04 317.69 284.19&#10;  A 1.21 1.18 -4.5 0 0 317.04 283.65&#10;  Q 313.93 282.62 311.04 283.03&#10;  Q 310.85 283.05 310.88 283.24&#10;  L 310.92 283.49&#10;  Q 310.96 283.76 311.22 283.69&#10;  C 314.19 282.80 318.70 284.14 318.41 287.94&#10;  A 1.30 1.29 88.9 0 1 317.27 289.13&#10;  C 313.99 289.50 311.30 288.81 308.68 286.73&#10;  C 305.60 284.28 303.14 281.74 300.79 278.68&#10;  Q 300.23 277.95 300.48 278.83&#10;  C 300.75 279.79 302.15 281.85 302.81 282.56&#10;  Q 302.23 282.90 301.96 283.25&#10;  Q 299.59 282.32 297.67 279.36&#10;  Q 293.88 273.52 293.76 267.32&#10;  C 293.72 265.33 294.96 264.38 296.57 263.60&#10;  Q 297.14 263.94 297.91 263.15&#10;  L 307.47 261.43&#10;  Z&#10;  M 300.6925 266.2936&#10;  A 1.22 1.22 0.0 0 0 300.3308 264.6066&#10;  L 299.9950 264.3893&#10;  A 1.22 1.22 0.0 0 0 298.3080 264.7510&#10;  L 297.5475 265.9264&#10;  A 1.22 1.22 0.0 0 0 297.9092 267.6134&#10;  L 298.2450 267.8307&#10;  A 1.22 1.22 0.0 0 0 299.9320 267.4690&#10;  L 300.6925 266.2936&#10;  Z&#10;  M 305.39 266.96&#10;  Q 305.27 266.86 305.16 266.97&#10;  Q 302.98 269.24 302.38 272.32&#10;  Q 302.35 272.51 302.54 272.56&#10;  L 302.55 272.56&#10;  Q 302.76 272.62 302.83 272.41&#10;  Q 303.70 269.61 305.41 267.12&#10;  Q 305.47 267.03 305.39 266.97&#10;  L 305.39 266.96&#10;  Z&#10;  M 305.72 273.92&#10;  Q 306.81 271.31 308.31 269.07&#10;  Q 309.29 267.62 308.07 268.87&#10;  Q 305.96 271.03 305.46 273.84&#10;  Q 305.24 275.07 305.72 273.92&#10;  Z&#10;  M 309.03 276.99&#10;  Q 310.51 273.58 312.48 270.40&#10;  Q 312.53 270.32 312.45 270.26&#10;  L 312.45 270.25&#10;  Q 312.32 270.16 312.23 270.28&#10;  Q 309.78 273.19 308.77 276.88&#10;  Q 308.74 277.01 308.87 277.06&#10;  L 308.88 277.06&#10;  Q 308.98 277.10 309.03 276.99&#10;  Z&#10;  M 320.68 286.85&#10;  Q 321.76 288.32 321.53 286.54&#10;  Q 321.49 286.22 321.12 286.15&#10;  Q 320.52 286.02 320.23 285.47&#10;  L 318.78 282.69&#10;  Q 318.63 282.42 318.37 282.57&#10;  L 318.09 282.72&#10;  Q 317.87 282.84 318.01 283.05&#10;  Q 319.44 285.17 320.68 286.85&#10;  Z"/>
<path fill="#010101" d="&#10;  M 307.95 261.32&#10;  Q 313.47 261.18 318.24 263.76&#10;  Q 318.93 264.14 318.87 264.77&#10;  Q 313.79 261.70 308.09 261.67&#10;  Q 307.97 261.67 307.91 261.56&#10;  Q 307.83 261.44 307.95 261.32&#10;  Z"/>
<path fill="#8e5b40" d="&#10;  M 297.91 263.15&#10;  Q 297.14 263.94 296.57 263.60&#10;  L 293.65 264.31&#10;  Q 293.75 264.15 293.84 263.99&#10;  L 293.40 262.68&#10;  Q 293.20 262.09 293.81 262.23&#10;  L 297.91 263.15&#10;  Z"/>
<path fill="#a78762" d="&#10;  M 197.81 270.99&#10;  Q 197.38 270.23 196.90 269.95&#10;  Q 198.49 267.82 200.38 266.46&#10;  Q 202.06 265.25 204.28 264.98&#10;  Q 208.94 264.40 213.46 263.21&#10;  Q 215.85 262.58 214.15 264.37&#10;  C 211.30 267.37 207.40 266.92 203.62 267.12&#10;  Q 200.75 267.26 197.81 270.99&#10;  Z"/>
<rect fill="#8e5b40" x="-1.42" y="-1.92" transform="translate(299.12,266.11) rotate(32.9)" width="2.84" height="3.84" rx="1.22"/>
<path fill="#a78762" d="&#10;  M 195.45 269.00&#10;  C 194.67 268.71 194.03 268.80 193.34 268.17&#10;  A 0.53 0.53 0.0 0 1 193.58 267.27&#10;  L 198.75 266.06&#10;  Q 200.42 265.67 199.04 266.69&#10;  Q 197.84 267.59 196.87 268.66&#10;  C 196.52 269.05 195.94 269.18 195.45 269.00&#10;  Z"/>
<path fill="#010101" d="&#10;  M 305.41 267.12&#10;  Q 303.70 269.61 302.83 272.41&#10;  Q 302.76 272.62 302.55 272.56&#10;  L 302.54 272.56&#10;  Q 302.35 272.51 302.38 272.32&#10;  Q 302.98 269.24 305.16 266.97&#10;  Q 305.27 266.86 305.39 266.96&#10;  L 305.39 266.97&#10;  Q 305.47 267.03 305.41 267.12&#10;  Z"/>
<path fill="#010101" d="&#10;  M 305.46 273.84&#10;  Q 305.96 271.03 308.07 268.87&#10;  Q 309.29 267.62 308.31 269.07&#10;  Q 306.81 271.31 305.72 273.92&#10;  Q 305.24 275.07 305.46 273.84&#10;  Z"/>
<path fill="#414142" d="&#10;  M 191.60 268.43&#10;  L 192.26 268.88&#10;  Q 191.70 269.45 191.00 269.44&#10;  Q 182.64 269.33 175.27 272.80&#10;  L 174.59 272.69&#10;  Q 176.16 271.44 177.60 270.86&#10;  Q 184.08 268.24 191.60 268.43&#10;  Z"/>
<path fill="#6290ca" d="&#10;  M 192.26 268.88&#10;  L 196.90 269.95&#10;  Q 197.38 270.23 197.81 270.99&#10;  Q 197.42 271.24 197.40 271.50&#10;  Q 196.73 281.99 191.58 291.10&#10;  Q 190.62 292.79 186.83 294.63&#10;  Q 186.71 294.91 186.14 295.32&#10;  Q 186.14 294.57 186.73 293.96&#10;  A 0.28 0.28 0.0 0 0 186.74 293.59&#10;  L 186.56 293.38&#10;  Q 186.46 293.26 186.33 293.36&#10;  Q 184.24 294.93 183.50 297.32&#10;  C 180.74 298.73 177.67 301.16 174.34 300.14&#10;  Q 173.75 299.96 173.78 299.35&#10;  Q 173.79 299.00 173.69 298.68&#10;  Q 173.31 297.58 172.58 298.48&#10;  Q 171.96 299.23 171.23 299.21&#10;  Q 169.56 299.16 169.85 297.51&#10;  Q 170.36 294.69 167.81 293.98&#10;  A 1.67 1.67 0.0 0 1 166.62 292.01&#10;  Q 166.92 290.67 168.00 289.96&#10;  Q 168.45 289.67 168.58 289.14&#10;  Q 168.95 287.55 168.28 286.29&#10;  A 0.62 0.61 76.7 0 0 167.73 285.95&#10;  Q 167.27 285.94 167.09 285.45&#10;  A 0.63 0.61 51.1 0 1 167.14 284.92&#10;  C 168.03 283.38 167.84 281.72 168.68 280.13&#10;  Q 171.02 275.71 175.27 272.80&#10;  Q 182.64 269.33 191.00 269.44&#10;  Q 191.70 269.45 192.26 268.88&#10;  Z&#10;  M 179.55 278.65&#10;  Q 180.65 282.46 183.62 284.86&#10;  Q 183.72 284.95 183.81 284.85&#10;  L 183.82 284.85&#10;  Q 183.94 284.72 183.82 284.60&#10;  Q 181.23 281.96 179.70 278.44&#10;  Q 179.67 278.36 179.59 278.36&#10;  Q 179.54 278.35 179.49 278.34&#10;  Q 179.32 278.32 179.44 278.44&#10;  Q 179.52 278.53 179.55 278.65&#10;  Z&#10;  M 177.30 282.12&#10;  Q 178.24 285.27 180.95 287.36&#10;  Q 181.00 287.40 181.06 287.38&#10;  Q 181.24 287.33 181.11 287.19&#10;  Q 178.89 284.91 177.59 282.02&#10;  Q 177.53 281.88 177.39 281.93&#10;  L 177.39 281.94&#10;  Q 177.26 281.99 177.30 282.12&#10;  Z&#10;  M 178.0490 289.0132&#10;  A 2.80 0.31 52.9 0 0 176.6073 286.5930&#10;  A 2.80 0.31 52.9 0 0 174.6710 284.5468&#10;  A 2.80 0.31 52.9 0 0 176.1127 286.9670&#10;  A 2.80 0.31 52.9 0 0 178.0490 289.0132&#10;  Z"/>
<path fill="#010101" d="&#10;  M 324.46 272.36&#10;  L 324.90 273.53&#10;  Q 325.07 273.99 325.50 274.24&#10;  C 327.82 275.60 329.99 279.58 327.25 281.74&#10;  Q 325.72 282.95 324.03 283.00&#10;  L 327.28 280.81&#10;  Q 327.69 280.53 327.83 280.06&#10;  C 328.87 276.56 325.18 274.34 322.22 273.89&#10;  A 1.17 1.16 -2.6 0 1 321.27 273.03&#10;  Q 320.88 271.49 320.55 269.80&#10;  Q 320.54 269.72 320.62 269.69&#10;  L 320.62 269.69&#10;  Q 320.79 269.64 320.85 269.80&#10;  Q 321.39 271.34 321.77 272.39&#10;  A 1.58 1.57 86.7 0 0 322.87 273.38&#10;  Q 324.76 273.84 324.46 272.36&#10;  Z"/>
<path fill="#010101" d="&#10;  M 309.03 276.99&#10;  Q 308.98 277.10 308.88 277.06&#10;  L 308.87 277.06&#10;  Q 308.74 277.01 308.77 276.88&#10;  Q 309.78 273.19 312.23 270.28&#10;  Q 312.32 270.16 312.45 270.25&#10;  L 312.45 270.26&#10;  Q 312.53 270.32 312.48 270.40&#10;  Q 310.51 273.58 309.03 276.99&#10;  Z"/>
<path fill="#fcaf46" d="&#10;  M 227.60 287.53&#10;  Q 227.47 283.84 229.25 281.76&#10;  C 237.74 278.20 249.62 281.67 256.74 286.81&#10;  Q 256.92 286.94 257.06 286.76&#10;  L 257.06 286.75&#10;  Q 257.20 286.58 257.03 286.43&#10;  Q 247.32 278.62 234.74 279.66&#10;  Q 231.86 279.90 229.47 281.36&#10;  Q 228.43 281.02 228.76 279.69&#10;  C 234.60 270.34 245.07 267.92 253.92 274.70&#10;  C 258.29 278.05 260.03 284.97 258.24 290.39&#10;  C 255.32 299.26 246.05 303.67 237.35 300.09&#10;  Q 229.48 296.85 227.60 287.53&#10;  Z"/>
<path fill="#a78762" d="&#10;  M 301.96 283.25&#10;  Q 302.23 282.90 302.81 282.56&#10;  Q 305.04 284.18 306.13 285.35&#10;  Q 310.76 290.39 317.56 289.67&#10;  Q 318.13 289.61 318.52 289.18&#10;  L 318.73 288.95&#10;  Q 319.17 288.47 319.69 288.87&#10;  C 328.79 295.95 337.30 304.11 346.26 312.43&#10;  Q 346.85 312.99 346.06 312.81&#10;  C 332.55 309.70 319.41 308.77 305.41 307.83&#10;  Q 248.41 303.98 191.20 310.50&#10;  Q 171.61 312.73 154.78 317.06&#10;  Q 154.15 317.22 154.55 316.71&#10;  Q 156.50 314.24 159.16 311.81&#10;  Q 163.48 307.85 168.27 303.52&#10;  C 170.38 301.61 172.77 301.02 175.55 301.14&#10;  C 177.91 301.25 179.62 299.86 181.87 299.40&#10;  Q 204.95 294.79 228.00 293.00&#10;  Q 228.73 292.94 229.06 293.60&#10;  C 235.21 306.29 253.28 305.33 258.38 292.36&#10;  Q 258.61 291.77 259.25 291.78&#10;  Q 275.11 292.10 291.72 292.94&#10;  Q 291.80 292.95 291.81 292.87&#10;  L 291.81 292.86&#10;  Q 291.82 292.65 291.61 292.64&#10;  Q 274.96 291.73 259.51 291.10&#10;  Q 258.91 291.07 259.05 290.49&#10;  Q 260.58 284.00 257.16 277.60&#10;  A 0.31 0.31 0.0 0 1 257.44 277.14&#10;  Q 276.52 277.35 295.94 279.90&#10;  Q 297.48 280.10 298.31 281.30&#10;  Q 299.58 283.11 301.83 283.83&#10;  Q 302.19 283.95 302.13 283.58&#10;  Q 302.10 283.38 301.96 283.25&#10;  Z"/>
<path fill="#010101" d="&#10;  M 179.55 278.65&#10;  Q 179.52 278.53 179.44 278.44&#10;  Q 179.32 278.32 179.49 278.34&#10;  Q 179.54 278.35 179.59 278.36&#10;  Q 179.67 278.36 179.70 278.44&#10;  Q 181.23 281.96 183.82 284.60&#10;  Q 183.94 284.72 183.82 284.85&#10;  L 183.81 284.85&#10;  Q 183.72 284.95 183.62 284.86&#10;  Q 180.65 282.46 179.55 278.65&#10;  Z"/>
<path fill="#a78762" d="&#10;  M 228.76 279.69&#10;  Q 228.43 281.02 229.47 281.36&#10;  Q 229.25 281.40 229.25 281.76&#10;  Q 227.47 283.84 227.60 287.53&#10;  L 228.03 291.66&#10;  Q 228.08 292.13 227.61 292.16&#10;  Q 205.96 293.66 184.51 297.58&#10;  Q 184.78 296.41 186.14 295.32&#10;  Q 186.71 294.91 186.83 294.63&#10;  Q 189.50 294.64 191.42 292.16&#10;  Q 194.05 288.76 195.19 284.80&#10;  A 1.83 1.82 -88.1 0 1 196.56 283.51&#10;  Q 211.92 280.25 228.27 278.59&#10;  Q 228.78 278.54 228.82 279.04&#10;  Q 228.85 279.34 228.76 279.69&#10;  Z"/>
<path fill="#010101" d="&#10;  M 229.25 281.76&#10;  Q 229.25 281.40 229.47 281.36&#10;  Q 231.86 279.90 234.74 279.66&#10;  Q 247.32 278.62 257.03 286.43&#10;  Q 257.20 286.58 257.06 286.75&#10;  L 257.06 286.76&#10;  Q 256.92 286.94 256.74 286.81&#10;  C 249.62 281.67 237.74 278.20 229.25 281.76&#10;  Z"/>
<path fill="#010101" d="&#10;  M 177.30 282.12&#10;  Q 177.26 281.99 177.39 281.94&#10;  L 177.39 281.93&#10;  Q 177.53 281.88 177.59 282.02&#10;  Q 178.89 284.91 181.11 287.19&#10;  Q 181.24 287.33 181.06 287.38&#10;  Q 181.00 287.40 180.95 287.36&#10;  Q 178.24 285.27 177.30 282.12&#10;  Z"/>
<path fill="#010101" d="&#10;  M 320.68 286.85&#10;  Q 319.44 285.17 318.01 283.05&#10;  Q 317.87 282.84 318.09 282.72&#10;  L 318.37 282.57&#10;  Q 318.63 282.42 318.78 282.69&#10;  L 320.23 285.47&#10;  Q 320.52 286.02 321.12 286.15&#10;  Q 321.49 286.22 321.53 286.54&#10;  Q 321.76 288.32 320.68 286.85&#10;  Z"/>
<ellipse fill="#414142" cx="0.00" cy="0.00" transform="translate(176.36,286.78) rotate(52.9)" rx="2.80" ry="0.31"/>
<path fill="#6290ca" d="&#10;  M 166.37 286.72&#10;  Q 167.93 286.75 168.21 287.88&#10;  Q 168.37 288.56 167.88 288.99&#10;  Q 167.44 289.38 166.70 289.49&#10;  L 166.37 286.72&#10;  Z"/>
<path fill="#414142" d="&#10;  M 186.14 295.32&#10;  Q 184.78 296.41 184.51 297.58&#10;  Q 184.13 297.64 183.50 297.32&#10;  Q 184.24 294.93 186.33 293.36&#10;  Q 186.46 293.26 186.56 293.38&#10;  L 186.74 293.59&#10;  A 0.28 0.28 0.0 0 1 186.73 293.96&#10;  Q 186.14 294.57 186.14 295.32&#10;  Z"/>
<path fill="#414142" d="&#10;  M 245.79 308.49&#10;  Q 244.40 310.22 243.04 312.01&#10;  Q 239.68 316.44 239.93 322.19&#10;  Q 240.00 323.77 241.58 323.76&#10;  L 242.02 323.76&#10;  Q 243.04 323.76 243.05 322.74&#10;  Q 243.12 318.87 243.72 317.24&#10;  Q 245.03 313.67 250.21 308.04&#10;  Q 254.77 307.71 261.00 307.80&#10;  Q 262.17 307.82 262.94 308.52&#10;  C 270.37 315.24 270.21 326.54 261.31 331.94&#10;  C 251.70 337.77 237.87 331.79 237.31 319.72&#10;  C 237.14 315.88 240.01 306.49 245.79 308.49&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 273.07 307.96&#10;  Q 274.32 311.93 274.18 315.71&#10;  L 270.27 316.35&#10;  Q 269.67 316.45 269.53 315.86&#10;  Q 268.57 311.73 265.44 308.45&#10;  Q 264.93 307.92 265.67 307.92&#10;  L 273.07 307.96&#10;  Z"/>
<path fill="#959897" d="&#10;  M 284.33 308.26&#10;  L 284.65 315.74&#10;  Q 279.25 314.92 274.18 315.71&#10;  Q 274.32 311.93 273.07 307.96&#10;  L 284.33 308.26&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 250.21 308.04&#10;  Q 245.03 313.67 243.72 317.24&#10;  Q 243.12 318.87 243.05 322.74&#10;  Q 243.04 323.76 242.02 323.76&#10;  L 241.58 323.76&#10;  Q 240.00 323.77 239.93 322.19&#10;  Q 239.68 316.44 243.04 312.01&#10;  Q 244.40 310.22 245.79 308.49&#10;  Q 246.73 307.62 250.21 308.04&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 212.33 317.43&#10;  Q 209.30 316.93 205.44 317.86&#10;  Q 204.29 318.09 204.23 317.00&#10;  Q 204.15 315.59 205.44 310.46&#10;  L 239.44 308.21&#10;  A 0.27 0.27 0.0 0 1 239.65 308.66&#10;  Q 237.47 311.04 236.28 314.43&#10;  Q 236.09 314.97 235.52 315.03&#10;  L 212.33 317.43&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 284.33 308.26&#10;  L 293.24 308.64&#10;  Q 293.93 308.67 293.50 309.22&#10;  Q 290.93 312.39 290.24 316.51&#10;  Q 290.14 317.08 289.58 316.94&#10;  L 284.65 315.74&#10;  L 284.33 308.26&#10;  Z"/>
<path fill="#414142" d="&#10;  M 295.62 312.17&#10;  Q 293.13 316.73 293.59 322.24&#10;  Q 293.72 323.85 295.43 323.83&#10;  A 1.20 1.20 0.0 0 0 296.60 322.51&#10;  Q 295.78 314.86 302.43 309.32&#10;  Q 305.69 309.03 310.75 309.56&#10;  C 311.96 309.69 313.11 309.97 313.79 311.11&#10;  Q 318.59 319.08 314.76 326.99&#10;  C 309.97 336.87 297.30 336.15 293.00 326.13&#10;  Q 290.11 319.39 293.37 312.20&#10;  Q 294.33 310.08 295.70 309.20&#10;  Q 297.63 307.97 296.19 309.74&#10;  Q 295.19 310.97 295.62 312.17&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 302.43 309.32&#10;  Q 295.78 314.86 296.60 322.51&#10;  A 1.20 1.20 0.0 0 1 295.43 323.83&#10;  Q 293.72 323.85 293.59 322.24&#10;  Q 293.13 316.73 295.62 312.17&#10;  Q 297.82 307.35 302.43 309.32&#10;  Z"/>
<path fill="#72665d" d="&#10;  M 323.35 324.13&#10;  Q 322.55 324.28 321.83 324.54&#10;  Q 321.34 324.71 321.08 324.27&#10;  Q 317.16 317.80 317.27 310.66&#10;  A 0.55 0.55 0.0 0 1 317.86 310.12&#10;  Q 328.53 310.79 339.09 312.70&#10;  Q 343.84 313.55 348.20 315.25&#10;  A 0.96 0.96 0.0 0 1 348.47 316.87&#10;  Q 347.72 317.53 346.74 317.86&#10;  Q 334.95 321.93 323.35 324.13&#10;  Z"/>
<path fill="#959897" d="&#10;  M 205.44 310.46&#10;  Q 204.15 315.59 204.23 317.00&#10;  Q 204.29 318.09 205.44 317.86&#10;  Q 204.16 317.81 204.00 318.33&#10;  Q 198.63 317.79 193.40 318.78&#10;  Q 193.63 319.08 192.98 318.77&#10;  C 187.63 319.62 185.95 324.64 183.95 329.60&#10;  Q 183.41 330.93 184.67 331.60&#10;  L 185.22 331.89&#10;  A 1.41 1.40 26.0 0 0 187.15 331.23&#10;  L 190.06 324.78&#10;  A 4.07 4.06 -80.1 0 1 193.44 322.40&#10;  L 203.89 321.54&#10;  Q 202.24 330.29 204.35 339.23&#10;  Q 206.59 348.73 213.98 355.04&#10;  Q 221.75 361.68 230.03 367.67&#10;  Q 235.48 371.62 238.63 376.35&#10;  C 227.74 370.91 221.30 366.94 211.79 364.69&#10;  C 209.65 364.18 207.68 365.22 205.80 364.46&#10;  C 203.12 363.38 200.30 364.72 197.89 363.35&#10;  C 195.75 362.13 192.57 361.14 191.42 358.81&#10;  Q 180.49 336.73 184.25 313.48&#10;  Q 184.35 312.89 184.94 312.82&#10;  L 205.44 310.46&#10;  Z"/>
<path fill="#72665d" d="&#10;  M 180.67 327.06&#10;  L 169.41 325.80&#10;  Q 160.28 324.90 152.47 321.65&#10;  Q 151.90 321.41 151.92 320.79&#10;  Q 151.96 319.55 153.28 319.09&#10;  C 162.20 316.00 171.82 314.63 181.27 313.21&#10;  A 0.41 0.41 0.0 0 1 181.74 313.65&#10;  L 180.67 327.06&#10;  Z"/>
<path fill="#414142" d="&#10;  M 212.33 317.43&#10;  Q 217.75 318.28 223.50 317.51&#10;  Q 224.03 317.44 224.43 317.79&#10;  Q 225.01 318.29 224.25 318.35&#10;  C 214.04 319.19 204.04 320.06 194.15 319.79&#10;  Q 193.74 319.77 193.43 319.50&#10;  Q 193.09 319.20 192.98 318.77&#10;  Q 193.63 319.08 193.40 318.78&#10;  L 204.15 319.16&#10;  A 0.50 0.49 79.6 0 0 204.62 318.47&#10;  Q 204.46 318.08 204.00 318.33&#10;  Q 204.16 317.81 205.44 317.86&#10;  Q 209.30 316.93 212.33 317.43&#10;  Z"/>
<path fill="#010101" d="&#10;  M 204.00 318.33&#10;  Q 204.46 318.08 204.62 318.47&#10;  A 0.50 0.49 79.6 0 1 204.15 319.16&#10;  L 193.40 318.78&#10;  Q 198.63 317.79 204.00 318.33&#10;  Z"/>
<path fill="#959897" d="&#10;  M 285.19 318.41&#10;  Q 284.72 320.91 285.66 323.23&#10;  A 1.07 1.06 -1.2 0 0 286.31 323.85&#10;  L 288.51 324.61&#10;  Q 288.14 324.81 288.19 324.95&#10;  L 283.35 323.62&#10;  Q 278.98 322.49 274.26 323.37&#10;  L 274.35 318.89&#10;  Q 279.71 317.93 285.19 318.41&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 285.19 318.41&#10;  L 289.42 318.97&#10;  Q 290.05 319.05 290.03 319.68&#10;  Q 289.95 322.50 290.92 325.30&#10;  Q 291.21 326.12 290.45 325.70&#10;  L 288.51 324.61&#10;  L 286.31 323.85&#10;  A 1.07 1.06 -1.2 0 1 285.66 323.23&#10;  Q 284.72 320.91 285.19 318.41&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 274.35 318.89&#10;  L 274.26 323.37&#10;  Q 270.76 324.09 268.41 326.84&#10;  Q 268.34 326.93 268.39 326.82&#10;  Q 269.87 323.64 270.14 320.20&#10;  Q 270.18 319.70 270.67 319.60&#10;  L 274.35 318.89&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 238.63 376.35&#10;  Q 235.48 371.62 230.03 367.67&#10;  Q 221.75 361.68 213.98 355.04&#10;  Q 206.59 348.73 204.35 339.23&#10;  Q 202.24 330.29 203.89 321.54&#10;  L 234.77 319.69&#10;  Q 235.48 319.65 235.57 320.35&#10;  Q 236.87 331.12 247.31 334.99&#10;  C 254.66 337.72 263.61 334.79 267.70 327.97&#10;  Q 268.06 327.37 268.29 328.03&#10;  Q 269.20 330.67 272.81 331.84&#10;  C 278.15 333.58 288.52 334.53 292.06 328.86&#10;  Q 292.37 328.37 292.68 328.86&#10;  C 300.01 340.52 315.23 336.10 317.70 323.30&#10;  Q 317.89 322.30 318.32 323.22&#10;  Q 324.46 336.40 322.31 347.51&#10;  C 321.20 353.26 317.76 362.25 313.13 367.42&#10;  C 311.44 369.32 310.10 371.38 308.24 373.14&#10;  Q 301.77 379.28 294.10 385.39&#10;  C 283.55 393.78 266.47 390.98 255.15 385.12&#10;  Q 246.58 380.69 238.63 376.35&#10;  Z"/>
<path fill="#fcaf46" d="&#10;  M 283.35 323.62&#10;  L 288.19 324.95&#10;  L 290.63 327.10&#10;  A 1.07 1.06 -43.7 0 1 290.59 328.72&#10;  C 285.93 332.53 276.78 332.33 271.81 330.75&#10;  Q 269.92 330.15 268.90 328.30&#10;  Q 268.63 327.82 269.01 327.42&#10;  C 272.01 324.24 279.18 323.82 283.35 323.62&#10;  Z"/>
<path fill="#959897" d="&#10;  M 149.60 351.64&#10;  C 149.27 349.40 149.06 342.47 153.33 343.42&#10;  Q 155.59 343.93 157.50 345.10&#10;  Q 162.02 347.87 166.49 350.95&#10;  A 3.71 3.68 10.1 0 1 167.94 353.01&#10;  C 172.68 370.42 175.81 388.12 179.46 405.92&#10;  Q 179.59 406.55 179.05 406.20&#10;  C 172.73 402.10 168.72 395.93 164.59 389.78&#10;  Q 152.55 371.89 149.60 351.64&#10;  Z"/>
<path fill="#fadfea" d="&#10;  M 193.58 362.24&#10;  Q 187.17 364.27 184.97 369.52&#10;  Q 184.27 371.22 183.69 373.12&#10;  Q 181.11 381.70 179.30 390.52&#10;  Q 179.24 390.83 178.93 390.86&#10;  Q 178.74 390.88 178.58 390.79&#10;  Q 175.20 371.95 169.94 353.55&#10;  Q 169.44 351.84 168.89 350.74&#10;  Q 168.29 349.57 169.47 350.16&#10;  L 193.58 362.24&#10;  Z"/>
<path fill="#959897" d="&#10;  M 341.61 386.32&#10;  Q 340.27 389.54 338.79 392.65&#10;  C 338.45 393.36 337.90 393.50 337.59 394.25&#10;  Q 337.18 395.24 337.33 394.18&#10;  C 339.22 381.40 340.53 367.83 337.04 355.09&#10;  A 0.69 0.68 -16.5 0 1 337.50 354.25&#10;  Q 341.41 353.00 344.99 352.37&#10;  C 352.56 351.03 350.54 360.63 349.38 364.54&#10;  Q 346.20 375.26 341.61 386.32&#10;  Z"/>
<path fill="#fadfea" d="&#10;  M 332.81 407.30&#10;  Q 332.65 407.09 332.61 406.83&#10;  Q 332.53 406.31 332.03 406.21&#10;  L 331.54 406.10&#10;  A 1.02 1.01 82.3 0 1 330.85 405.57&#10;  Q 329.50 402.93 329.25 400.36&#10;  C 328.86 396.43 327.52 392.90 326.37 389.22&#10;  C 325.19 385.48 323.26 382.07 321.65 378.36&#10;  C 321.22 377.36 320.53 376.71 319.89 375.85&#10;  C 319.10 374.80 317.61 374.79 316.76 375.77&#10;  Q 312.68 372.83 312.41 369.64&#10;  Q 313.56 367.41 314.58 366.85&#10;  Q 325.35 368.88 335.75 370.58&#10;  Q 336.42 370.69 336.47 370.67&#10;  A 0.97 0.96 -24.5 0 0 336.96 369.37&#10;  Q 332.60 360.18 321.66 360.87&#10;  Q 327.18 356.48 333.60 353.67&#10;  A 1.23 1.22 -21.6 0 1 335.25 354.38&#10;  Q 337.55 360.81 337.58 368.26&#10;  Q 337.67 387.74 332.92 407.12&#10;  Q 332.90 407.18 332.87 407.22&#10;  Q 332.84 407.26 332.81 407.30&#10;  Z"/>
<path fill="#ef7191" d="&#10;  M 321.66 360.87&#10;  Q 332.60 360.18 336.96 369.37&#10;  A 0.97 0.96 -24.5 0 1 336.47 370.67&#10;  Q 336.42 370.69 335.75 370.58&#10;  Q 325.35 368.88 314.58 366.85&#10;  Q 318.18 362.60 321.66 360.87&#10;  Z"/>
<path fill="#ef7191" d="&#10;  M 193.58 362.24&#10;  Q 200.99 365.84 208.35 369.51&#10;  Q 208.56 369.62 208.67 369.41&#10;  L 208.67 369.40&#10;  Q 208.78 369.18 208.57 369.08&#10;  Q 204.90 367.25 202.94 366.10&#10;  Q 199.95 364.34 203.36 364.99&#10;  Q 207.97 365.86 212.36 367.60&#10;  Q 211.54 368.95 210.61 369.48&#10;  A 0.77 0.77 0.0 0 0 210.54 370.78&#10;  L 213.95 373.27&#10;  Q 212.12 373.41 211.80 372.99&#10;  Q 210.89 371.40 209.55 371.04&#10;  Q 209.05 370.91 208.66 371.24&#10;  Q 194.70 383.25 179.46 394.05&#10;  L 178.58 390.79&#10;  Q 178.74 390.88 178.93 390.86&#10;  Q 179.24 390.83 179.30 390.52&#10;  Q 181.11 381.70 183.69 373.12&#10;  Q 184.27 371.22 184.97 369.52&#10;  Q 187.17 364.27 193.58 362.24&#10;  Z"/>
<path fill="#fadfea" d="&#10;  M 218.85 367.44&#10;  L 218.42 369.31&#10;  Q 215.27 368.10 212.27 366.61&#10;  C 211.13 366.04 210.12 366.01 208.92 365.79&#10;  Q 208.11 365.64 208.87 365.32&#10;  Q 210.27 364.71 211.52 365.18&#10;  C 213.97 366.10 215.97 366.22 218.85 367.44&#10;  Z"/>
<path fill="#ef7191" d="&#10;  M 218.85 367.44&#10;  L 245.96 381.57&#10;  Q 245.42 383.24 243.72 384.89&#10;  L 218.42 369.31&#10;  L 218.85 367.44&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 212.36 367.60&#10;  L 218.08 370.10&#10;  Q 214.02 394.26 212.12 418.25&#10;  Q 210.97 432.73 211.07 447.24&#10;  A 0.39 0.39 0.0 0 0 211.62 447.59&#10;  Q 211.89 447.47 212.09 447.11&#10;  Q 223.66 425.01 234.57 402.58&#10;  Q 236.40 398.81 243.65 385.78&#10;  L 248.22 388.56&#10;  Q 245.11 410.91 246.94 432.95&#10;  Q 248.87 456.12 254.24 477.47&#10;  Q 254.85 479.88 255.57 477.50&#10;  Q 267.32 438.51 275.31 398.54&#10;  Q 275.41 398.04 275.89 397.84&#10;  Q 276.72 397.50 277.91 397.61&#10;  L 280.75 397.22&#10;  Q 283.64 410.09 287.02 422.51&#10;  Q 291.79 440.06 296.60 457.32&#10;  C 297.66 461.12 298.66 465.91 298.78 469.84&#10;  Q 298.82 471.16 298.94 472.54&#10;  Q 299.12 474.45 299.73 472.63&#10;  C 308.74 445.65 307.88 416.20 298.52 389.43&#10;  L 302.61 385.73&#10;  Q 315.97 397.66 325.23 412.83&#10;  Q 326.64 415.13 327.67 417.81&#10;  Q 328.85 420.85 328.87 417.59&#10;  C 328.99 403.52 326.02 386.96 316.76 375.77&#10;  C 317.61 374.79 319.10 374.80 319.89 375.85&#10;  C 320.53 376.71 321.22 377.36 321.65 378.36&#10;  C 323.26 382.07 325.19 385.48 326.37 389.22&#10;  C 327.52 392.90 328.86 396.43 329.25 400.36&#10;  Q 329.50 402.93 330.85 405.57&#10;  A 1.02 1.01 82.3 0 0 331.54 406.10&#10;  L 332.03 406.21&#10;  Q 332.53 406.31 332.61 406.83&#10;  Q 332.65 407.09 332.81 407.30&#10;  L 328.55 423.38&#10;  Q 325.71 420.73 323.88 417.05&#10;  Q 321.65 412.55 320.68 411.16&#10;  Q 315.88 404.28 310.77 398.41&#10;  Q 309.52 396.97 308.58 395.54&#10;  C 307.46 393.82 305.82 392.36 304.07 391.36&#10;  Q 301.53 389.90 302.41 392.69&#10;  Q 306.51 405.71 307.74 417.06&#10;  C 308.11 420.45 308.77 423.87 308.90 427.34&#10;  Q 309.32 438.87 308.08 447.14&#10;  Q 307.25 452.69 306.62 458.48&#10;  C 306.34 461.11 305.18 463.28 304.63 465.90&#10;  Q 304.53 466.36 303.49 468.97&#10;  Q 302.71 470.94 303.70 473.23&#10;  L 297.32 480.50&#10;  Q 296.37 479.82 296.39 479.34&#10;  Q 296.66 467.31 293.00 456.81&#10;  Q 291.37 452.12 290.37 447.18&#10;  Q 289.40 442.44 288.04 437.90&#10;  Q 285.35 428.96 283.92 422.49&#10;  Q 282.11 414.36 279.81 405.41&#10;  Q 279.53 404.31 278.98 403.42&#10;  A 0.70 0.70 0.0 0 0 277.72 403.56&#10;  Q 275.77 409.26 274.72 414.94&#10;  C 273.06 423.85 270.94 432.53 269.05 441.25&#10;  Q 268.55 443.54 267.32 447.39&#10;  Q 266.46 450.10 265.60 453.54&#10;  Q 263.72 461.08 257.10 483.34&#10;  L 251.43 480.09&#10;  Q 247.02 460.54 245.77 451.24&#10;  Q 243.55 434.71 243.22 424.70&#10;  Q 243.03 419.22 243.09 414.09&#10;  C 243.17 407.34 243.95 400.91 244.31 394.25&#10;  Q 244.36 393.42 243.93 393.02&#10;  A 0.56 0.56 0.0 0 0 243.05 393.16&#10;  Q 237.85 402.70 233.44 412.43&#10;  Q 232.00 415.59 230.34 418.47&#10;  C 227.51 423.38 225.54 428.76 222.78 433.66&#10;  Q 219.70 439.12 216.57 444.56&#10;  C 216.14 445.32 215.92 446.24 215.59 447.04&#10;  Q 215.42 447.45 215.07 447.72&#10;  Q 213.93 448.62 213.38 450.00&#10;  A 1.93 1.93 0.0 0 0 214.04 452.27&#10;  Q 215.60 453.39 216.87 454.88&#10;  Q 217.38 455.48 217.09 457.30&#10;  L 207.87 449.21&#10;  Q 207.69 446.54 208.01 443.88&#10;  Q 208.37 440.80 208.25 438.61&#10;  Q 208.01 434.20 208.19 429.89&#10;  Q 208.86 414.51 210.61 398.61&#10;  Q 210.71 397.66 210.54 396.73&#10;  Q 210.39 395.90 210.72 395.17&#10;  Q 211.13 394.27 211.32 393.35&#10;  Q 213.42 383.08 213.95 373.27&#10;  L 210.54 370.78&#10;  A 0.77 0.77 0.0 0 1 210.61 369.48&#10;  Q 211.54 368.95 212.36 367.60&#10;  Z"/>
<path fill="#ef7191" d="&#10;  M 312.41 369.64&#10;  Q 312.68 372.83 316.76 375.77&#10;  C 326.02 386.96 328.99 403.52 328.87 417.59&#10;  Q 328.85 420.85 327.67 417.81&#10;  Q 326.64 415.13 325.23 412.83&#10;  Q 315.97 397.66 302.61 385.73&#10;  Q 307.99 379.60 312.01 372.51&#10;  Q 312.12 372.33 311.93 372.22&#10;  L 311.93 372.22&#10;  Q 311.74 372.11 311.64 372.30&#10;  Q 307.59 379.34 302.18 385.42&#10;  L 299.17 382.89&#10;  L 312.41 369.64&#10;  Z"/>
<path fill="#ef7191" d="&#10;  M 218.08 370.10&#10;  Q 231.43 377.26 243.65 385.78&#10;  Q 236.40 398.81 234.57 402.58&#10;  Q 223.66 425.01 212.09 447.11&#10;  Q 211.89 447.47 211.62 447.59&#10;  A 0.39 0.39 0.0 0 1 211.07 447.24&#10;  Q 210.97 432.73 212.12 418.25&#10;  Q 214.02 394.26 218.08 370.10&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 211.80 372.99&#10;  L 211.77 373.36&#10;  Q 211.73 373.82 211.32 374.01&#10;  Q 207.59 375.78 204.42 378.77&#10;  C 200.81 382.19 196.85 384.88 193.06 388.00&#10;  C 189.94 390.58 186.21 392.73 182.81 395.01&#10;  C 181.97 395.57 181.84 396.29 180.99 396.77&#10;  A 0.04 0.04 0.0 0 0 181.01 396.84&#10;  Q 181.17 396.84 181.26 396.97&#10;  Q 181.42 397.20 181.27 397.44&#10;  Q 180.84 398.12 180.19 397.75&#10;  Q 179.29 395.23 179.46 394.05&#10;  Q 194.70 383.25 208.66 371.24&#10;  Q 209.05 370.91 209.55 371.04&#10;  Q 210.89 371.40 211.80 372.99&#10;  Z"/>
<path fill="#fadfea" d="&#10;  M 211.80 372.99&#10;  Q 212.12 373.41 213.95 373.27&#10;  Q 213.42 383.08 211.32 393.35&#10;  Q 211.13 394.27 210.72 395.17&#10;  Q 210.39 395.90 210.54 396.73&#10;  Q 210.71 397.66 210.61 398.61&#10;  Q 208.86 414.51 208.19 429.89&#10;  Q 208.01 434.20 208.25 438.61&#10;  Q 208.37 440.80 208.01 443.88&#10;  Q 207.69 446.54 207.87 449.21&#10;  Q 185.05 428.54 180.19 397.75&#10;  Q 180.84 398.12 181.27 397.44&#10;  Q 181.42 397.20 181.26 396.97&#10;  Q 181.17 396.84 181.01 396.84&#10;  A 0.04 0.04 0.0 0 1 180.99 396.77&#10;  C 181.84 396.29 181.97 395.57 182.81 395.01&#10;  C 186.21 392.73 189.94 390.58 193.06 388.00&#10;  C 196.85 384.88 200.81 382.19 204.42 378.77&#10;  Q 207.59 375.78 211.32 374.01&#10;  Q 211.73 373.82 211.77 373.36&#10;  L 211.80 372.99&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 245.96 381.57&#10;  L 249.44 383.46&#10;  L 248.35 387.65&#10;  L 243.72 384.89&#10;  Q 245.42 383.24 245.96 381.57&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 299.17 382.89&#10;  L 302.18 385.42&#10;  L 298.43 388.82&#10;  L 296.47 385.39&#10;  L 299.17 382.89&#10;  Z"/>
<path fill="#ef7191" d="&#10;  M 249.44 383.46&#10;  Q 253.62 385.89 257.76 387.79&#10;  Q 267.29 392.17 277.25 392.32&#10;  Q 275.92 393.16 276.06 396.86&#10;  C 266.35 396.58 256.34 392.81 248.35 387.65&#10;  L 249.44 383.46&#10;  Z"/>
<path fill="#ef7191" d="&#10;  M 296.47 385.39&#10;  L 298.43 388.82&#10;  Q 290.64 395.30 280.63 396.50&#10;  L 279.79 392.25&#10;  C 284.71 391.96 289.54 390.58 293.49 387.62&#10;  Q 294.98 386.50 296.47 385.39&#10;  Z"/>
<path fill="#ef7191" d="&#10;  M 248.22 388.56&#10;  Q 252.49 391.10 256.42 392.88&#10;  Q 266.78 397.60 277.91 397.61&#10;  Q 276.72 397.50 275.89 397.84&#10;  Q 275.41 398.04 275.31 398.54&#10;  Q 267.32 438.51 255.57 477.50&#10;  Q 254.85 479.88 254.24 477.47&#10;  Q 248.87 456.12 246.94 432.95&#10;  Q 245.11 410.91 248.22 388.56&#10;  Z"/>
<path fill="#ef7191" d="&#10;  M 298.52 389.43&#10;  C 307.88 416.20 308.74 445.65 299.73 472.63&#10;  Q 299.12 474.45 298.94 472.54&#10;  Q 298.82 471.16 298.78 469.84&#10;  C 298.66 465.91 297.66 461.12 296.60 457.32&#10;  Q 291.79 440.06 287.02 422.51&#10;  Q 283.64 410.09 280.75 397.22&#10;  Q 290.58 395.92 298.52 389.43&#10;  Z"/>
<path fill="#fadfea" d="&#10;  M 328.55 423.38&#10;  Q 322.08 445.68 309.33 465.56&#10;  Q 307.10 469.03 303.70 473.23&#10;  Q 302.71 470.94 303.49 468.97&#10;  Q 304.53 466.36 304.63 465.90&#10;  C 305.18 463.28 306.34 461.11 306.62 458.48&#10;  Q 307.25 452.69 308.08 447.14&#10;  Q 309.32 438.87 308.90 427.34&#10;  C 308.77 423.87 308.11 420.45 307.74 417.06&#10;  Q 306.51 405.71 302.41 392.69&#10;  Q 301.53 389.90 304.07 391.36&#10;  C 305.82 392.36 307.46 393.82 308.58 395.54&#10;  Q 309.52 396.97 310.77 398.41&#10;  Q 315.88 404.28 320.68 411.16&#10;  Q 321.65 412.55 323.88 417.05&#10;  Q 325.71 420.73 328.55 423.38&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 277.25 392.32&#10;  L 279.79 392.25&#10;  L 280.63 396.50&#10;  L 276.06 396.86&#10;  Q 275.92 393.16 277.25 392.32&#10;  Z"/>
<path fill="#fadfea" d="&#10;  M 251.43 480.09&#10;  Q 232.69 469.74 217.09 457.30&#10;  Q 217.38 455.48 216.87 454.88&#10;  Q 215.60 453.39 214.04 452.27&#10;  A 1.93 1.93 0.0 0 1 213.38 450.00&#10;  Q 213.93 448.62 215.07 447.72&#10;  Q 215.42 447.45 215.59 447.04&#10;  C 215.92 446.24 216.14 445.32 216.57 444.56&#10;  Q 219.70 439.12 222.78 433.66&#10;  C 225.54 428.76 227.51 423.38 230.34 418.47&#10;  Q 232.00 415.59 233.44 412.43&#10;  Q 237.85 402.70 243.05 393.16&#10;  A 0.56 0.56 0.0 0 1 243.93 393.02&#10;  Q 244.36 393.42 244.31 394.25&#10;  C 243.95 400.91 243.17 407.34 243.09 414.09&#10;  Q 243.03 419.22 243.22 424.70&#10;  Q 243.55 434.71 245.77 451.24&#10;  Q 247.02 460.54 251.43 480.09&#10;  Z"/>
<path fill="#fadfea" d="&#10;  M 297.32 480.50&#10;  Q 289.35 488.48 279.98 494.19&#10;  A 1.52 1.51 -47.2 0 1 278.49 494.25&#10;  L 257.10 483.34&#10;  Q 263.72 461.08 265.60 453.54&#10;  Q 266.46 450.10 267.32 447.39&#10;  Q 268.55 443.54 269.05 441.25&#10;  C 270.94 432.53 273.06 423.85 274.72 414.94&#10;  Q 275.77 409.26 277.72 403.56&#10;  A 0.70 0.70 0.0 0 1 278.98 403.42&#10;  Q 279.53 404.31 279.81 405.41&#10;  Q 282.11 414.36 283.92 422.49&#10;  Q 285.35 428.96 288.04 437.90&#10;  Q 289.40 442.44 290.37 447.18&#10;  Q 291.37 452.12 293.00 456.81&#10;  Q 296.66 467.31 296.39 479.34&#10;  Q 296.37 479.82 297.32 480.50&#10;  Z"/>
<path fill="#959897" d="&#10;  M 174.57 406.99&#10;  C 176.20 407.82 177.99 409.04 179.74 409.63&#10;  Q 180.61 409.92 180.86 410.75&#10;  Q 185.96 427.69 196.11 439.89&#10;  Q 204.12 449.51 214.65 457.93&#10;  Q 214.35 469.84 221.96 478.03&#10;  C 224.04 480.26 227.42 482.50 230.01 484.93&#10;  L 224.82 487.63&#10;  A 2.30 2.29 36.7 0 1 223.30 487.85&#10;  C 207.46 484.80 192.15 476.67 182.43 463.59&#10;  C 170.43 447.44 169.38 427.74 174.87 408.50&#10;  Q 175.00 408.03 174.44 407.78&#10;  L 174.57 406.99&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 299.68 479.26&#10;  C 315.22 462.25 325.50 441.12 332.08 418.67&#10;  Q 332.19 418.30 332.46 417.99&#10;  Q 332.76 417.64 332.82 418.11&#10;  C 333.67 425.69 334.11 434.08 332.73 441.48&#10;  C 329.25 460.02 314.70 473.94 297.80 481.69&#10;  Q 297.68 481.74 297.61 481.64&#10;  L 297.47 481.41&#10;  Q 297.38 481.27 297.52 481.17&#10;  Q 298.70 480.33 299.68 479.26&#10;  Z"/>
<path fill="#ffffff" d="&#10;  M 214.65 457.93&#10;  C 230.42 470.26 247.46 480.05 265.39 488.82&#10;  Q 266.42 489.32 265.28 489.42&#10;  L 259.24 489.95&#10;  Q 258.66 490.00 258.28 489.55&#10;  C 252.07 482.27 238.17 482.60 230.01 484.93&#10;  C 227.42 482.50 224.04 480.26 221.96 478.03&#10;  Q 214.35 469.84 214.65 457.93&#10;  Z"/>
<path fill="#fcaf46" d="&#10;  M 257.06 493.71&#10;  Q 254.68 496.92 249.79 497.73&#10;  Q 237.36 499.83 225.74 495.94&#10;  Q 225.11 495.19 224.35 494.54&#10;  C 222.51 492.95 221.97 491.14 223.54 488.96&#10;  Q 227.06 486.91 228.36 486.58&#10;  C 236.14 484.60 249.20 483.79 256.04 488.96&#10;  Q 258.86 491.09 257.06 493.71&#10;  Z"/>
<path fill="#fcaf46" d="&#10;  M 302.69 493.25&#10;  Q 299.90 495.84 295.82 496.86&#10;  Q 284.99 498.41 274.65 495.76&#10;  Q 274.17 495.64 273.83 495.29&#10;  Q 273.35 494.80 272.89 494.66&#10;  C 272.43 493.34 271.19 492.44 269.76 492.22&#10;  Q 268.86 492.08 268.37 491.76&#10;  Q 269.60 490.90 271.26 491.72&#10;  Q 275.00 493.56 278.48 495.07&#10;  A 1.90 1.88 -49.0 0 0 280.24 494.94&#10;  Q 283.55 492.85 286.66 490.52&#10;  C 289.83 488.14 293.37 487.10 296.98 485.86&#10;  Q 297.48 485.69 297.98 485.85&#10;  C 301.10 486.87 305.56 489.17 302.69 493.25&#10;  Z"/>
<path fill="#010101" d="&#10;  M 272.89 494.66&#10;  Q 273.35 494.80 273.83 495.29&#10;  Q 274.17 495.64 274.65 495.76&#10;  Q 284.99 498.41 295.82 496.86&#10;  Q 291.82 497.86 287.70 498.46&#10;  C 285.04 498.84 282.61 498.31 280.00 498.03&#10;  Q 277.96 497.81 276.14 497.11&#10;  Q 274.17 496.34 272.53 495.36&#10;  Q 272.23 495.19 272.07 494.88&#10;  Q 271.79 494.33 272.39 494.51&#10;  L 272.89 494.66&#10;  Z"/>
<path fill="#010101" d="&#10;  M 225.74 495.94&#10;  Q 237.36 499.83 249.79 497.73&#10;  Q 245.41 499.36 241.88 499.68&#10;  Q 233.12 500.49 225.74 495.94&#10;  Z"/>
</svg>
</file>

<file path="src/apis/notion-client/getRecordMap.ts">
import { NotionAPI } from "notion-client"

export const getRecordMap = async (pageId: string) => {
  const api = new NotionAPI()
  const recordMap = await api.getPage(pageId)
  return recordMap
}
</file>

<file path="src/assets/fonts/roboto/index.ts">
import { Roboto } from 'next/font/google'

export const roboto = Roboto({
  weight: ['900'],
  style: ['italic'],
  subsets: ['latin'],
})
</file>

<file path="src/assets/index.ts">
export * from './fonts'
</file>

<file path="src/components/CallOut/index.tsx">
import { Excalidraw } from "src/components/Excalidraw"

export const CallOut: React.FC<{
  block: any
}> = (props) => {
  return (
    <div className="w-full">
      <Excalidraw refUrl="/1rsc.json" />
    </div>
  )
}
</file>

<file path="src/components/Category/index.tsx">
import { useRouter } from "next/router"
import React from "react"
import { COLOR_SET } from "./constants"
import styled from "@emotion/styled"
import { colors } from "src/styles"

export const getColorClassByName = (name: string): string => {
  try {
    let sum = 0
    name.split("").forEach((alphabet) => (sum = sum + alphabet.charCodeAt(0)))
    const colorKey = sum
      .toString(16)
      ?.[sum.toString(16).length - 1].toUpperCase()
    return COLOR_SET[colorKey]
  } catch {
    return COLOR_SET[0]
  }
}

type Props = {
  children: string
  readOnly?: boolean
}

const Category: React.FC<Props> = ({ readOnly = false, children }) => {
  const router = useRouter()

  const handleClick = (value: string) => {
    if (readOnly) return
    router.push(`/?category=${value}`)
  }
  return (
    <StyledWrapper
      onClick={() => handleClick(children)}
      css={{
        backgroundColor: getColorClassByName(children),
        cursor: readOnly ? "default" : "pointer",
      }}
    >
      {children}
    </StyledWrapper>
  )
}

export default Category

const StyledWrapper = styled.div`
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
  padding-left: 0.5rem;
  padding-right: 0.5rem;
  border-radius: 9999px;
  width: fit-content;
  font-size: 0.875rem;
  line-height: 1.25rem;
  opacity: 0.9;
  color: ${colors.dark.gray1};
`
</file>

<file path="src/components/Excalidraw/core.tsx">
"use client"
import { useEffect, useMemo, useRef, useState } from "react"
import type { ExcalidrawElement } from "@excalidraw/excalidraw/types/element/types"
import type {
  AppState,
  BinaryFiles,
  ExcalidrawImperativeAPI,
} from "@excalidraw/excalidraw/types/types"
import { Excalidraw as Board, exportToBlob } from "@excalidraw/excalidraw"

import { safeJsonParse } from "src/libs/utils/parse-json"
import { clsx } from "clsx"

// import { useModalStack } from "../modal"
import useScheme from "src/hooks/useScheme"

export interface ExcalidrawProps {
  zenModeEnabled?: boolean
  viewModeEnabled?: boolean
  showExtendButton?: boolean
  onChange?: (
    elements: readonly ExcalidrawElement[],
    appState: AppState,
    files: BinaryFiles
  ) => void
  className?: string
  onReady?: (api: ExcalidrawImperativeAPI) => void

  data?: object
  refUrl?: string
}

export function Excalidraw({
  data,
  viewModeEnabled = true,
  zenModeEnabled = false,
  onChange,
  className,

  onReady,
  showExtendButton,
  refUrl,
}: ExcalidrawProps) {
  const excalidrawAPIRef = useRef<ExcalidrawImperativeAPI>()

  const [scheme] = useScheme()
  const isDarkMode = scheme === "dark"

  const [finalData, setFinalData] = useState<ExcalidrawElement | null>(null)

  const [loading, setLoading] = useState(false)

  useEffect(() => {
    let isMounted = true
    if (refUrl) {
      console.info("refUrl", refUrl)
      setLoading(true)
      fetch(refUrl)
        .then((res) => res.text())
        .then((text) => {
          if (!isMounted) return
          const tryParseJson = safeJsonParse(text)
          console.info("try", tryParseJson)
          if (tryParseJson) {
            setFinalData(tryParseJson as ExcalidrawElement)
          }

          setLoading(false)
        })
    } else {
      setFinalData(data as ExcalidrawElement)
      setLoading(false)
    }

    return () => {
      setLoading(false)
      isMounted = false
    }
  }, [data, refUrl])
  //   const modal = useModalStack()
  return (
    <div
      onKeyDown={(e) => e.stopPropagation()}
      onKeyUp={(e) => e.stopPropagation()}
      className={clsx("relative h-[500px] w-full", className)}
    >
      {loading && (
        <div className="absolute inset-0 z-[10] flex center">
          <div className="loading loading-spinner" />
        </div>
      )}
      <Board
        key={JSON.stringify(finalData)}
        theme={isDarkMode ? "dark" : "light"}
        initialData={finalData}
        detectScroll={false}
        zenModeEnabled={zenModeEnabled}
        onChange={onChange}
        viewModeEnabled={viewModeEnabled}
        excalidrawAPI={(api) => {
          excalidrawAPIRef.current = api
          setTimeout(() => {
            api.scrollToContent(undefined, {
              fitToContent: true,
            })
          }, 1000)

          onReady?.(api)
        }}
      />

      {/* {viewModeEnabled && showExtendButton && (
        <button
          onClick={() => {
            if (!excalidrawAPIRef.current) {
              return
            }
            modal.present({
              title: "Preview",
              content: () => (
                <ExcalidrawImpl
                  data={data}
                  className="h-full"
                  showExtendButton={false}
                  refUrl={refUrl}
                />
              ),
              clickOutsideToDismiss: true,
              max: true,
            })
          }}
          className={clsx(
            "absolute bottom-2 right-2 z-10 box-content flex h-5 w-5 rounded-md border p-2 center",
            "border-zinc-200 bg-base-100 text-zinc-600",
            "dark:border-neutral-800 dark:text-zinc-500"
          )}
        >
          <i className="icon-[mingcute--external-link-line]" />
        </button>
      )} */}
    </div>
  )
}
</file>

<file path="src/components/Excalidraw/index.ts">
export * from "./core"
</file>

<file path="src/components/Emoji.tsx">
import React, { ReactNode } from "react"
import { Noto_Color_Emoji } from "next/font/google"

const notoColorEmoji = Noto_Color_Emoji({
  weight: ["400"],
  subsets: ["emoji"],
})

type Props = {
  className?: string
  children?: ReactNode
}

export const Emoji = ({ className, children }: Props) => {
  return (
    <span className={className} css={[notoColorEmoji.style]}>
      {children}
    </span>
  )
}
</file>

<file path="src/hooks/useDropdown.ts">
import React, { useRef, useState } from 'react'

type useDropdownType = () => [
  React.RefObject<HTMLDivElement>,
  boolean,
  () => void
]

function assertIsNode(e: EventTarget | null): asserts e is Node {
  if (!e || !('nodeType' in e)) {
    throw new Error(`Node expected`)
  }
}

const useDropdown: useDropdownType = () => {
  const menuRef = useRef<HTMLDivElement>(null)
  const [isDropdownOpened, setIsDropdownOpened] = useState(false)

  const handleClick: (this: Window, e: MouseEvent) => void = (e) => {
    if (!menuRef.current) return
    assertIsNode(e.target)
    if (menuRef.current.contains(e.target) === false) {
      setIsDropdownOpened(false)
    }
  }

  const onOpenBtn = () => {
    setIsDropdownOpened(true)
    window.addEventListener('click', handleClick)
  }

  return [menuRef, isDropdownOpened, onOpenBtn]
}

export default useDropdown
</file>

<file path="src/hooks/useTagsQuery.ts">
import usePostsQuery from "./usePostsQuery"
import { getAllSelectItemsFromPosts } from "src/libs/utils/notion"

export const useTagsQuery = () => {
  const posts = usePostsQuery()
  const tags = getAllSelectItemsFromPosts("tags", posts)

  return tags
}
</file>

<file path="src/layouts/RootLayout/Header/Logo.tsx">
import Link from "next/link"
import { CONFIG } from "site.config"
import styled from "@emotion/styled"

const Logo = () => {
  return (
    <StyledWrapper href="/" aria-label={CONFIG.blog.title}>
      {CONFIG.blog.title}
    </StyledWrapper>
  )
}

export default Logo

const StyledWrapper = styled(Link)``
</file>

<file path="src/layouts/RootLayout/Header/ThemeToggle.tsx">
import styled from "@emotion/styled"
import React from "react"
import { Emoji } from "src/components/Emoji"
import useScheme from "src/hooks/useScheme"

type Props = {}

const ThemeToggle: React.FC<Props> = () => {
  const [scheme, setScheme] = useScheme()

  const handleClick = () => {
    setScheme(scheme === "light" ? "dark" : "light")
  }

  return (
    <StyledWrapper onClick={handleClick}>
      <Emoji>{scheme === "light" ? "☀️" : "🌙"}</Emoji>
    </StyledWrapper>
  )
}

export default ThemeToggle

const StyledWrapper = styled.div`
  cursor: pointer;
`
</file>

<file path="src/layouts/RootLayout/ThemeProvider/index.tsx">
import { ThemeProvider as _ThemeProvider } from "@emotion/react"
import { Global } from "./Global"
import { createTheme } from "src/styles"

type Props = {
  scheme: string
  children?: React.ReactNode
}

export const ThemeProvider = ({ scheme, children }: Props) => {
  const theme = createTheme({
    scheme: scheme === "light" ? "light" : "dark",
  })

  return (
    <_ThemeProvider theme={theme}>
      <Global />
      {children}
    </_ThemeProvider>
  )
}
</file>

<file path="src/layouts/RootLayout/index.tsx">
import React, { ReactNode } from "react"
import { ThemeProvider } from "./ThemeProvider"
import useScheme from "src/hooks/useScheme"
import Header from "./Header"
import styled from "@emotion/styled"
import Scripts from "src/layouts/RootLayout/Scripts"
import useGtagEffect from "./useGtagEffect"

type Props = {
  children: ReactNode
}

const RootLayout = ({ children }: Props) => {
  const [scheme] = useScheme()
  useGtagEffect()
  return (
    <ThemeProvider scheme={scheme}>
      <Scripts />
      {/* // TODO: replace react query */}
      {/* {metaConfig.type !== "Paper" && <Header />} */}
      <Header fullWidth={false} />
      <StyledMain>{children}</StyledMain>
    </ThemeProvider>
  )
}

export default RootLayout

const StyledMain = styled.main`
  margin: 0 auto;
  width: 100%;
  max-width: 1120px;
  padding: 0 1rem;
`
</file>

<file path="src/layouts/RootLayout/Scripts.tsx">
import Script from "next/script"
import { CONFIG } from "site.config"

const Scripts: React.FC = () => (
  <>
    {CONFIG?.googleAnalytics?.enable === true && (
      <>
        <Script
          src={`https://www.googletagmanager.com/gtag/js?id=${CONFIG.googleAnalytics.config.measurementId}`}
        />
        <Script strategy="lazyOnload" id="ga">
          {`window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', '${CONFIG.googleAnalytics.config.measurementId}', {
              page_path: window.location.pathname,
            });`}
        </Script>
      </>
    )}
  </>
)

export default Scripts
</file>

<file path="src/layouts/RootLayout/useGtagEffect.ts">
import { useEffect } from "react"
import { useRouter } from "next/router"
import * as gtag from "src/libs/gtag"
import { CONFIG } from "site.config"

const useGtagEffect = () => {
  const router = useRouter()
  useEffect(() => {
    if (!(CONFIG.isProd && CONFIG?.googleAnalytics?.enable)) return

    const handleRouteChange = (url: any) => {
      gtag.pageview(url)
    }
    router.events.on("routeChangeComplete", handleRouteChange)
    return () => {
      router.events.off("routeChangeComplete", handleRouteChange)
    }
  }, [router.events])
  return null
}
export default useGtagEffect
</file>

<file path="src/layouts/index.ts">
export { default as RootLayout } from "./RootLayout"
</file>

<file path="src/libs/react-query/index.ts">
import { QueryClient } from "@tanstack/react-query"

export const queryClient = new QueryClient()
</file>

<file path="src/libs/utils/notion/customMapImageUrl.ts">
import { Block } from 'notion-types'

export const customMapImageUrl = (url: string, block: Block): string => {
  if (!url) {
    throw new Error("URL can't be empty")
  }

  if (url.startsWith('data:')) {
    return url
  }

  // more recent versions of notion don't proxy unsplash images
  if (url.startsWith('https://images.unsplash.com')) {
    return url
  }

  try {
    const u = new URL(url)

    if (
      u.pathname.startsWith('/secure.notion-static.com') &&
      u.hostname.endsWith('.amazonaws.com')
    ) {
      if (
        u.searchParams.has('X-Amz-Credential') &&
        u.searchParams.has('X-Amz-Signature') &&
        u.searchParams.has('X-Amz-Algorithm')
      ) {
        // if the URL is already signed, then use it as-is
        url = u.origin + u.pathname
      }
    }
  } catch {
    // ignore invalid urls
  }

  if (url.startsWith('/images')) {
    url = `https://www.notion.so${url}`
  }

  url = `https://www.notion.so${
    url.startsWith('/image') ? url : `/image/${encodeURIComponent(url)}`
  }`

  const notionImageUrlV2 = new URL(url)
  let table = block.parent_table === 'space' ? 'block' : block.parent_table
  if (table === 'collection' || table === 'team') {
    table = 'block'
  }
  notionImageUrlV2.searchParams.set('table', table)
  notionImageUrlV2.searchParams.set('id', block.id)
  notionImageUrlV2.searchParams.set('cache', 'v2')

  url = notionImageUrlV2.toString()

  return url
}
</file>

<file path="src/libs/utils/notion/getMetadata.ts">
export default function getMetadata(rawMetadata: any) {
  const metadata = {
    locked: rawMetadata?.format?.block_locked,
    page_full_width: rawMetadata?.format?.page_full_width,
    page_font: rawMetadata?.format?.page_font,
    page_small_text: rawMetadata?.format?.page_small_text,
    created_time: rawMetadata.created_time,
    last_edited_time: rawMetadata.last_edited_time,
  }
  return metadata
}
</file>

<file path="src/libs/utils/notion/getPageProperties.ts">
import { getTextContent, getDateValue } from "notion-utils"
import { NotionAPI } from "notion-client"
import { BlockMap, CollectionPropertySchemaMap } from "notion-types"
import { customMapImageUrl } from "./customMapImageUrl"

async function getPageProperties(
  id: string,
  block: BlockMap,
  schema: CollectionPropertySchemaMap
) {
  const api = new NotionAPI()
  const rawProperties = Object.entries(block?.[id]?.value?.properties || [])
  const excludeProperties = ["date", "select", "multi_select", "person", "file"]
  const properties: any = {}
  for (let i = 0; i < rawProperties.length; i++) {
    const [key, val]: any = rawProperties[i]
    properties.id = id
    if (schema[key]?.type && !excludeProperties.includes(schema[key].type)) {
      properties[schema[key].name] = getTextContent(val)
    } else {
      switch (schema[key]?.type) {
        case "file": {
          try {
            const Block = block?.[id].value
            const url: string = val[0][1][0][1]
            const newurl = customMapImageUrl(url, Block)
            properties[schema[key].name] = newurl
          } catch (error) {
            properties[schema[key].name] = undefined
          }
          break
        }
        case "date": {
          const dateProperty: any = getDateValue(val)
          delete dateProperty.type
          properties[schema[key].name] = dateProperty
          break
        }
        case "select": {
          const selects = getTextContent(val)
          if (selects[0]?.length) {
            properties[schema[key].name] = selects.split(",")
          }
          break
        }
        case "multi_select": {
          const selects = getTextContent(val)
          if (selects[0]?.length) {
            properties[schema[key].name] = selects.split(",")
          }
          break
        }
        case "person": {
          const rawUsers = val.flat()

          const users = []
          for (let i = 0; i < rawUsers.length; i++) {
            if (rawUsers[i][0][1]) {
              const userId = rawUsers[i][0]
              const res: any = await api.getUsers(userId)
              const resValue =
                res?.recordMapWithRoles?.notion_user?.[userId[1]]?.value
              const user = {
                id: resValue?.id,
                name:
                  resValue?.name ||
                  `${resValue?.family_name}${resValue?.given_name}` ||
                  undefined,
                profile_photo: resValue?.profile_photo || null,
              }
              users.push(user)
            }
          }
          properties[schema[key].name] = users
          break
        }
        default:
          break
      }
    }
  }
  return properties
}

export { getPageProperties as default }
</file>

<file path="src/libs/utils/notion/index.ts">
export { getAllSelectItemsFromPosts } from "./getAllSelectItemsFromPosts"
export { filterPosts } from "./filterPosts"
</file>

<file path="src/libs/utils/index.ts">
export function formatDate(date: any, local: any) {
  const d = new Date(date)
  const options: any = { year: 'numeric', month: 'short', day: 'numeric' }
  const res = d.toLocaleDateString(local, options)
  return res
}
</file>

<file path="src/libs/utils/parse-json.ts">
export const safeJsonParse = (str: string) => {
  try {
    return JSON.parse(str)
  } catch (e) {
    return null
  }
}
</file>

<file path="src/pages/style/global.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="src/routes/Detail/PostDetail/PostFooter.tsx">
import styled from "@emotion/styled"
import { useRouter } from "next/router"
import React from "react"

type Props = {}

const Footer: React.FC<Props> = () => {
  const router = useRouter()
  return (
    <StyledWrapper>
      <a onClick={() => router.push("/")}>← Back</a>
      <a onClick={() => window.scrollTo({ top: 0, behavior: "smooth" })}>
        ↑ Top
      </a>
    </StyledWrapper>
  )
}

export default Footer

const StyledWrapper = styled.div`
  display: flex;
  justify-content: space-between;
  font-weight: 500;
  color: ${({ theme }) => theme.colors.gray10};
  a {
    margin-top: 0.5rem;
    cursor: pointer;

    :hover {
      color: ${({ theme }) => theme.colors.gray12};
    }
  }
`
</file>

<file path="src/routes/Detail/PostDetail/PostHeader.tsx">
import { CONFIG } from "site.config"
import Tag from "src/components/Tag"
import { TPost } from "src/types"
import { formatDate } from "src/libs/utils"
import Image from "next/image"
import React from "react"
import styled from "@emotion/styled"

type Props = {
  data: TPost
}

const PostHeader: React.FC<Props> = ({ data }) => {
  return (
    <StyledWrapper>
      <h1 className="title">{data.title}</h1>
      {data.type[0] !== "Paper" && (
        <nav>
          <div className="top">
            {data.author && data.author[0] && data.author[0].name && (
              <>
                <div className="author">
                  <Image
                    css={{ borderRadius: "50%" }}
                    src={data.author[0].profile_photo || CONFIG.profile.image}
                    alt="profile_photo"
                    width={24}
                    height={24}
                  />
                  <div className="">{data.author[0].name}</div>
                </div>
                <div className="hr"></div>
              </>
            )}
            <div className="date">
              {formatDate(
                data?.date?.start_date || data.createdTime,
                CONFIG.lang
              )}
            </div>
          </div>
          <div className="mid">
            {data.tags && (
              <div className="tags">
                {data.tags.map((tag: string) => (
                  <Tag key={tag}>{tag}</Tag>
                ))}
              </div>
            )}
          </div>
          {data.thumbnail && (
            <div className="thumbnail">
              <Image
                src={data.thumbnail}
                css={{ objectFit: "cover" }}
                fill
                alt={data.title}
              />
            </div>
          )}
        </nav>
      )}
    </StyledWrapper>
  )
}

export default PostHeader

const StyledWrapper = styled.div`
  .title {
    font-size: 1.875rem;
    line-height: 2.25rem;
    font-weight: 700;
  }
  nav {
    margin-top: 1.5rem;
    color: ${({ theme }) => theme.colors.gray11};
    > .top {
      display: flex;
      margin-bottom: 0.75rem;
      gap: 0.75rem;
      align-items: center;
      .author {
        display: flex;
        gap: 0.5rem;
        align-items: center;
      }
      .hr {
        margin-top: 0.25rem;
        margin-bottom: 0.25rem;
        align-self: stretch;
        width: 1px;
        background-color: ${({ theme }) => theme.colors.gray10};
      }
      .date {
        margin-right: 0.5rem;

        @media (min-width: 768px) {
          margin-left: 0;
        }
      }
    }
    > .mid {
      display: flex;
      margin-bottom: 1rem;
      align-items: center;
      .tags {
        display: flex;
        overflow-x: auto;
        flex-wrap: nowrap;
        gap: 0.5rem;
        max-width: 100%;
      }
    }
    .thumbnail {
      overflow: hidden;
      position: relative;
      margin-bottom: 1.75rem;
      border-radius: 1.5rem;
      width: 100%;
      background-color: ${({ theme }) => theme.colors.gray4};
      padding-bottom: 66%;

      @media (min-width: 1024px) {
        padding-bottom: 50%;
      }
    }
  }
`
</file>

<file path="src/routes/Error/index.tsx">
import styled from "@emotion/styled"
import React from "react"
import { Emoji } from "src/components/Emoji"

type Props = {}

const CustomError: React.FC<Props> = () => {
  return (
    <StyledWrapper>
      <div className="wrapper">
        <div className="top">
          <div>4</div>
          <Emoji>🤔</Emoji>
          <div>4</div>
        </div>
        <div className="text">Post not found</div>
      </div>
    </StyledWrapper>
  )
}

export default CustomError

const StyledWrapper = styled.div`
  margin: 0 auto;
  padding-left: 1.5rem;
  padding-right: 1.5rem;
  padding-top: 3rem;
  padding-bottom: 3rem;
  border-radius: 1.5rem;
  max-width: 56rem;
  .wrapper {
    display: flex;
    padding-top: 5rem;
    padding-bottom: 5rem;
    flex-direction: column;
    gap: 2.5rem;
    align-items: center;
    > .top {
      display: flex;
      align-items: center;
      font-size: 3.75rem;
      line-height: 1;
    }
    > .text {
      font-size: 1.875rem;
      line-height: 2.25rem;
      color: ${({ theme }) => theme.colors.gray11};
    }
  }
`
</file>

<file path="src/routes/Feed/FeedHeader/index.ts">
export { default as FeedHeader } from "./FeedHeader"
</file>

<file path="src/routes/Feed/FeedHeader/OrderButtons.tsx">
import styled from "@emotion/styled"
import { useRouter } from "next/router"
import React from "react"

type TOrder = "asc" | "desc"

type Props = {}

const OrderButtons: React.FC<Props> = () => {
  const router = useRouter()

  const currentOrder = `${router.query.order || ``}` || ("desc" as TOrder)

  const handleClickOrderBy = (value: TOrder) => {
    router.push({
      query: {
        ...router.query,
        order: value,
      },
    })
  }
  return (
    <StyledWrapper>
      <a
        data-active={currentOrder === "desc"}
        onClick={() => handleClickOrderBy("desc")}
      >
        Desc
      </a>
      <a
        data-active={currentOrder === "asc"}
        onClick={() => handleClickOrderBy("asc")}
      >
        Asc
      </a>
    </StyledWrapper>
  )
}

export default OrderButtons

const StyledWrapper = styled.div`
  display: flex;
  gap: 0.5rem;
  font-size: 0.875rem;
  line-height: 1.25rem;
  a {
    cursor: pointer;
    color: ${({ theme }) => theme.colors.gray10};

    &[data-active="true"] {
      font-weight: 700;

      color: ${({ theme }) => theme.colors.gray12};
    }
  }
`
</file>

<file path="src/routes/Feed/Footer.tsx">
import { CONFIG } from "site.config"
import React from "react"
import styled from "@emotion/styled"

const d = new Date()
const y = d.getFullYear()
const from = +CONFIG.since

type Props = {
  className?: string
}

const Footer: React.FC<Props> = ({ className }) => {
  return (
    <StyledWrapper className={className}>
      <a
        href={`https://github.com/${CONFIG.profile.github}`}
        target="_blank"
        rel="noreferrer"
      >
        © {CONFIG.profile.name} {from === y || !from ? y : `${from} - ${y}`}
      </a>
    </StyledWrapper>
  )
}

export default Footer

const StyledWrapper = styled.div`
  a {
    margin-top: 0.75rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
    color: ${({ theme }) => theme.colors.gray10};
  }
`
</file>

<file path="src/routes/Feed/MobileProfileCard.tsx">
import { CONFIG } from "site.config"
import Image from "next/image"
import React from "react"
import styled from "@emotion/styled"

type Props = {
  className?: string
}

const MobileProfileCard: React.FC<Props> = () => {
  return (
    <StyledWrapper>
      <div className="top">💻 Profile</div>
      <div className="mid">
        <div className="wrapper">
          <Image
            src={CONFIG.profile.image}
            width={90}
            height={90}
            css={{ position: "relative" }}
            alt="profile_image"
          />
          <div className="wrapper">
            <div className="top">{CONFIG.profile.name}</div>
            <div className="mid">{CONFIG.profile.role}</div>
            <div className="btm">{CONFIG.profile.bio}</div>
          </div>
        </div>
      </div>
    </StyledWrapper>
  )
}

export default MobileProfileCard

const StyledWrapper = styled.div`
  display: block;

  @media (min-width: 1024px) {
    display: none;
  }

  > .top {
    padding: 0.25rem;
    margin-bottom: 0.75rem;
  }
  > .mid {
    padding: 0.5rem;
    margin-bottom: 1rem;
    border-radius: 1rem;
    background-color: ${({ theme }) =>
      theme.scheme === "light" ? "white" : theme.colors.gray4};
    > .wrapper {
      display: flex;
      gap: 0.5rem;
      align-items: center;
      > .wrapper {
        height: fit-content;
        > .top {
          font-size: 1.25rem;
          line-height: 1.75rem;
          font-style: italic;
          font-weight: 700;
        }
        > .mid {
          margin-bottom: 0.5rem;
          font-size: 0.875rem;
          line-height: 1.25rem;
          color: ${({ theme }) => theme.colors.gray11};
        }
        > .btm {
          font-size: 0.875rem;
          line-height: 1.25rem;
        }
      }
    }
  }
`
</file>

<file path="src/routes/Feed/ProfileCard.tsx">
import { CONFIG } from "site.config"
import Image from "next/image"
import React from "react"
import styled from "@emotion/styled"
import { Emoji } from "src/components/Emoji"

type Props = {}

const ProfileCard: React.FC<Props> = () => {
  return (
    <StyledWrapper>
      <div className="title">
        <Emoji>💻</Emoji> Profile
      </div>
      <div className="content">
        <div className="top">
          <Image src={CONFIG.profile.image} fill alt="" />
        </div>
        <div className="mid">
          <div className=" name">{CONFIG.profile.name}</div>
          <div className="role">{CONFIG.profile.role}</div>
          <div className="text-sm mb-2">{CONFIG.profile.bio}</div>
        </div>
      </div>
    </StyledWrapper>
  )
}

export default ProfileCard

const StyledWrapper = styled.div`
  > .title {
    padding: 0.25rem;
    margin-bottom: 0.75rem;
  }
  > .content {
    margin-bottom: 2.25rem;
    border-radius: 1rem;
    width: 100%;
    background-color: ${({ theme }) =>
      theme.scheme === "light" ? "white" : theme.colors.gray4};
    @media (min-width: 768px) {
      padding: 1rem;
    }
    @media (min-width: 1024px) {
      padding: 1rem;
    }
    .top {
      position: relative;
      width: 100%;
      &:after {
        content: "";
        display: block;
        padding-bottom: 100%;
      }
    }
    .mid {
      display: flex;
      padding: 0.5rem;
      flex-direction: column;
      align-items: center;
      .name {
        font-size: 1.25rem;
        line-height: 1.75rem;
        font-style: italic;
        font-weight: 700;
      }
      .role {
        margin-bottom: 1rem;
        font-size: 0.875rem;
        line-height: 1.25rem;
        color: ${({ theme }) => theme.colors.gray11};
      }
      .bio {
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
        line-height: 1.25rem;
      }
    }
  }
`
</file>

<file path="src/routes/Feed/SearchInput.tsx">
import styled from "@emotion/styled"
import React, { InputHTMLAttributes, ReactNode } from "react"
import { Emoji } from "src/components/Emoji"

interface Props extends InputHTMLAttributes<HTMLInputElement> {}

const SearchInput: React.FC<Props> = ({ ...props }) => {
  return (
    <StyledWrapper>
      <div className="top">
        <Emoji>🔎</Emoji> Search
      </div>
      <input
        className="mid"
        type="text"
        placeholder="Search Keyword..."
        {...props}
      />
    </StyledWrapper>
  )
}

export default SearchInput

const StyledWrapper = styled.div`
  margin-bottom: 1rem;

  @media (min-width: 768px) {
    margin-bottom: 2rem;
  }
  > .top {
    padding: 0.25rem;
    margin-bottom: 0.75rem;
  }
  > .mid {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    padding-left: 1.25rem;
    padding-right: 1.25rem;
    border-radius: 1rem;
    outline-style: none;
    width: 100%;
    background-color: ${({ theme }) => theme.colors.gray4};
  }
`
</file>

<file path="src/styles/colors.ts">
import { blue, gray, grayDark } from "@radix-ui/colors"

export type Colors = typeof colors.light & typeof colors.dark

export const colors2 = {
  light: {
    ...gray,
  },
  dark: {
    ...grayDark,
  },
}
export const colors = {
  light: {
    blue1: "#fdfdfe",
    blue2: "#f7f9ff",
    blue3: "#edf2fe",
    blue4: "#dfeaff",
    blue5: "#d0dfff",
    blue6: "#bdd1ff",
    blue7: "#a6bff9",
    blue8: "#87a5ef",
    blue9: "#3d63dd",
    blue10: "#3657c3",
    blue11: "#395bc7",
    blue12: "#1d2e5c",
    gray1: "#fcfcfd",
    gray2: "#f9f9fb",
    gray3: "#eff0f3",
    gray4: "#e7e8ec",
    gray5: "#e0e1e6",
    gray6: "#d8d9e0",
    gray7: "#cdced7",
    gray8: "#b9bbc6",
    gray9: "#8b8d98",
    gray10: "#80828d",
    gray11: "#62636c",
    gray12: "#1e1f24",
  },
  dark: {
    ...blue,
    ...grayDark,
  },
}
</file>

<file path="src/styles/index.ts">
export * from "./theme"
export * from "./media"
export * from "./variables"
export * from "./colors"
</file>

<file path="src/styles/media.ts">
import { variables } from './variables'

export const respondMobile = `@media (max-width: ${variables.breakpoint}px)`
</file>

<file path="src/styles/theme.ts">
import { Theme } from "@emotion/react"
import { Colors, colors } from "./colors"
import { variables } from "./variables"
import { zIndexes } from "./zIndexes"

declare module "@emotion/react" {
  export interface Theme {
    scheme: Scheme
    colors: Colors
    zIndexes: typeof zIndexes
    variables: typeof variables
  }
}

export type Scheme = "light" | "dark"

type Options = {
  scheme: Scheme
}

export const createTheme = (options: Options): Theme => ({
  scheme: options.scheme,
  colors: colors[options.scheme],
  variables: variables,
  zIndexes: zIndexes,
})
</file>

<file path="src/styles/variables.ts">
export const variables = {
  breakpoint: 960,
  headerHeight: 56,
  paddingLg: 24,
  paddingMd: 20,
  widthLg: 1480,
  widthMd: 1280,
}
</file>

<file path="src/styles/zIndexes.ts">
export const zIndexes = {
  dialog: 32,
  dropdownMenu: 36,
  header: 30,
  hoverCard: 28,
  dialogHoverCard: 34,
}
</file>

<file path=".dockerignore">
node_modules
.git
.next
</file>

<file path=".eslintrc.json">
{
  "extends": ["next/core-web-vitals"]
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# vercel
.vercel
# public/robots.txt
public/sitemap.xml

/.firebase
</file>

<file path=".prettierrc.json">
{
	"trailingComma": "es5",
	"tabWidth": 2,
	"semi": false,
	"singleQuote": false,
	"useTabs": false,
	"bracketSpacing": true
}
</file>

<file path="docker-compose.yml">
version: '3'
services:
  web:
    build: .
    ports:
      - "9876:9876"
</file>

<file path="index.d.ts">
declare module 'prismjs/components/prism-*.js';
</file>

<file path=".github/ISSUE_TEMPLATE/bug_report.yml">
name: "\U0001F41E Bug report"
description: Report an issue.
title: "[Bug]: "
labels: [pending triage]
body:
  - type: markdown
    attributes:
      value: |
        Thanks for taking the time to fill out this bug report!
  - type: textarea
    id: describe
    attributes:
      label: Describe the bug
      description: A clear and concise description of what the bug is. If applicable, add screenshots to help explain your problem.
    validations:
      required: true
  - type: textarea
    id: reproduse
    attributes:
      label: To reproduce
      description: Steps to reproduce the behavior
      value: |
        1. Go to ...
        2. Click on ...
        3. Scroll down to ..
        4. See error
    validations:
      required: true
  - type: input
    id: browser
    attributes:
      label: Browser
      description: What Browser are you using and on Which OS?
      placeholder: e.g. Google Chrome v109, Windows 10
    validations:
      required: true
  - type: checkboxes
    id: validation
    attributes:
      label: Validations
      description: Before submitting the issue, please make sure you do the following
      options:
        - label: Follow our [Code of Conduct](https://github.com/morethanmin/morethan-log/blob/main/.github/docs/CODE_OF_CONDUCT.md)
          required: true
        - label: Check that there isn't [already an issue](https://github.com/morethanmin/morethan-log/issues) that reports the same bug to avoid creating a duplicate.
          required: true
</file>

<file path=".github/FUNDING.yml">
# These are supported funding model platforms

github: morethanmin
custom: https://toss.me/moremin
</file>

<file path="src/apis/notion-client/index.ts">
export * from "./getRecordMap"
export * from "./getPosts"
</file>

<file path="src/apis/index.ts">
export * from "./notion-client"
</file>

<file path="src/assets/fonts/index.ts">
export * from "./pretendard"
export * from "./roboto"
export * from "./lxgw"
</file>

<file path="src/components/Category/constants.ts">
export const COLOR_SET: Record<string, string> = {
  0: "rgb(186 230 253)",
  1: "rgb(254 205 211)",
  2: "rgb(245 208 254)",
  3: "rgb(221 214 254)",
  4: "rgb(191 219 254)",
  5: "rgb(204 251 241)",
  6: "rgb(187 247 208)",
  7: "rgb(254 249 195)",
  8: "rgb(186 230 253)",
  9: "rgb(254 202 202)",
  A: "rgb(231 229 228)",
  B: "rgb(226 232 240)",
  C: "rgb(252 231 243)",
  D: "rgb(233 213 255)",
  E: "rgb(199 210 254)",
  F: "rgb(209 250 229)",
}
</file>

<file path="src/components/MetaConfig/index.tsx">
import { CONFIG } from "site.config"
import Head from "next/head"

export type MetaConfigProps = {
  title: string
  description: string
  type: "Website" | "Post" | "Page" | string
  date?: string
  image?: string
  url: string
}

const MetaConfig: React.FC<MetaConfigProps> = (props) => {
  return (
    <Head>
      <title>{props.title}</title>
      <meta name="robots" content="follow, index" />
      <meta charSet="UTF-8" />
      <meta name="description" content={props.description} />
      {/* og */}
      <meta property="og:type" content={props.type} />
      <meta property="og:title" content={props.title} />
      <meta property="og:description" content={props.description} />
      <meta property="og:url" content={props.url} />
      {CONFIG.lang && <meta property="og:locale" content={CONFIG.lang} />}
      {props.image && <meta property="og:image" content={props.image} />}
      {/* twitter */}
      <meta name="twitter:title" content={props.title} />
      <meta name="twitter:description" content={props.description} />
      <meta name="twitter:card" content="summary_large_image" />
      {props.image && <meta name="twitter:image" content={props.image} />}
      {/* post */}
      {props.type === "Post" && (
        <>
          <meta property="article:published_time" content={props.date} />
          <meta property="article:author" content={CONFIG.profile.name} />
        </>
      )}
    </Head>
  )
}

export default MetaConfig
</file>

<file path="src/constants/queryKey.ts">
export const queryKey = {
  scheme: () => ["scheme"],
  posts: () => ["posts"],
  tags: () => ["tags"],
  categories: () => ["categories"],
  post: (slug: string) => ["post", slug],
}
</file>

<file path="src/hooks/useCategoriesQuery.ts">
import { DEFAULT_CATEGORY } from "src/constants"
import usePostsQuery from "./usePostsQuery"
import { getAllSelectItemsFromPosts } from "src/libs/utils/notion"

export const useCategoriesQuery = () => {
  const posts = usePostsQuery()
  const categories = getAllSelectItemsFromPosts("category", posts)

  return {
    [DEFAULT_CATEGORY]: posts.length,
    ...categories,
  }
}
</file>

<file path="src/hooks/usePostsQuery.ts">
import { useQuery } from "@tanstack/react-query"
import { queryKey } from "src/constants/queryKey"
import { TPost } from "src/types"

const usePostsQuery = () => {
  const { data } = useQuery({
    queryKey: queryKey.posts(),
    initialData: [] as TPost[],
    enabled: false,
  })

  if (!data) throw new Error("Posts data is not found")

  return data
}

export default usePostsQuery
</file>

<file path="src/hooks/useScheme.ts">
import { useQuery, useQueryClient } from "@tanstack/react-query"
import { getCookie, setCookie } from "cookies-next"
import { useEffect } from "react"
import { queryKey } from "src/constants/queryKey"

type Scheme = "light" | "dark"
type SetScheme = (scheme: Scheme) => void

const useScheme = (): [Scheme, SetScheme] => {
  const queryClient = useQueryClient()

  const { data } = useQuery({
    queryKey: queryKey.scheme(),
    enabled: false,
    initialData: "light",
  })

  const scheme = data === "light" ? "light" : "dark"

  const setScheme = (scheme: "light" | "dark") => {
    setCookie("scheme", scheme)

    queryClient.setQueryData(queryKey.scheme(), scheme)
  }

  useEffect(() => {
    if (!window) return

    const scheme = getCookie("scheme")
    setScheme(scheme === "light" ? "light" : "dark")
  }, [])

  return [scheme, setScheme]
}

export default useScheme
</file>

<file path="src/layouts/RootLayout/Header/index.tsx">
import NavBar from "./NavBar"
import Logo from "./Logo"
import ThemeToggle from "./ThemeToggle"
import styled from "@emotion/styled"
import { zIndexes } from "src/styles/zIndexes"

type Props = {
  fullWidth: boolean
}

const Header: React.FC<Props> = ({ fullWidth }) => {
  return (
    <StyledWrapper>
      <div data-full-width={fullWidth} className="container">
        <Logo />
        <div className="nav">
          <ThemeToggle />
          <NavBar />
        </div>
      </div>
    </StyledWrapper>
  )
}

export default Header

const StyledWrapper = styled.div`
  z-index: ${zIndexes.header};
  position: sticky;
  top: 0;
  background-color: ${({ theme }) => theme.colors.gray2};
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);

  .container {
    display: flex;
    padding-left: 1rem;
    padding-right: 1rem;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    max-width: 1120px;
    height: 3rem;
    margin: 0 auto;
    &[data-full-width="true"] {
      @media (min-width: 768px) {
        padding-left: 6rem;
        padding-right: 6rem;
      }
    }
    .nav {
      display: flex;
      gap: 0.75rem;
      align-items: center;
    }
  }
`
</file>

<file path="src/layouts/RootLayout/Header/NavBar.tsx">
import styled from "@emotion/styled"
import Link from "next/link"

const NavBar: React.FC = () => {
  const links = [{ id: 1, name: "About", to: "/resume" }]
  return (
    <StyledWrapper className="">
      <ul>
        {links.map((link) => (
          <li key={link.id}>
            <Link href={link.to}>{link.name}</Link>
          </li>
        ))}
      </ul>
    </StyledWrapper>
  )
}

export default NavBar

const StyledWrapper = styled.div`
  flex-shrink: 0;
  ul {
    display: flex;
    flex-direction: row;
    li {
      display: block;
      margin-left: 1rem;
      color: ${({ theme }) => theme.colors.gray11};
    }
  }
`
</file>

<file path="src/libs/utils/notion/getAllPageIds.ts">
import { idToUuid } from "notion-utils"
import { ExtendedRecordMap, ID } from "notion-types"

export default function getAllPageIds(
  response: ExtendedRecordMap,
  viewId?: string
) {
  const collectionQuery = response.collection_query
  const views = Object.values(collectionQuery)[0]

  let pageIds: ID[] = []
  if (viewId) {
    const vId = idToUuid(viewId)
    pageIds = views[vId]?.blockIds
  } else {
    const pageSet = new Set<ID>()
    // * type not exist
    Object.values(views).forEach((view: any) => {
      view?.collection_group_results?.blockIds?.forEach((id: ID) =>
        pageSet.add(id)
      )
    })
    pageIds = [...pageSet]
  }
  return pageIds
}
</file>

<file path="src/libs/utils/notion/getAllSelectItemsFromPosts.ts">
import { TPosts } from "src/types"

export function getAllSelectItemsFromPosts(
  key: "tags" | "category",
  posts: TPosts
) {
  const selectedPosts = posts.filter((post) => post?.[key])
  const items = [...selectedPosts.map((p) => p[key]).flat()]
  const itemObj: { [itemName: string]: number } = {}
  items.forEach((item) => {
    if (!item) return
    if (item in itemObj) {
      itemObj[item]++
    } else {
      itemObj[item] = 1
    }
  })
  return itemObj
}
</file>

<file path="src/pages/api/revalidate.ts">
import { NextApiRequest, NextApiResponse } from "next"
import { getPosts } from "../../apis"

// for all path revalidate, https://<your-site.com>/api/revalidate?secret=<token>
// for specific path revalidate, https://<your-site.com>/api/revalidate?secret=<token>&path=<path>
// example, https://<your-site.com>/api/revalidate?secret=이것은_키&path=feed
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const { secret, path } = req.query
  if (secret !== process.env.TOKEN_FOR_REVALIDATE) {
    return res.status(401).json({ message: "Invalid token" })
  }

  try {
    if (path && typeof path === "string") {
      await res.revalidate(path)
    } else {
      const posts = await getPosts()
      const revalidateRequests = posts.map((row) =>
        res.revalidate(`/${row.slug}`)
      )
      await Promise.all(revalidateRequests)
    }

    res.json({ revalidated: true })
  } catch (err) {
    return res.status(500).send("Error revalidating")
  }
}
</file>

<file path="src/routes/Feed/FeedHeader/FeedHeader.tsx">
import { TCategories } from "src/types"
import React from "react"
import CategorySelect from "./CategorySelect"
import OrderButtons from "./OrderButtons"
import styled from "@emotion/styled"

type Props = {}

const FeedHeader: React.FC<Props> = () => {
  return (
    <StyledWrapper>
      <CategorySelect />
      <OrderButtons />
    </StyledWrapper>
  )
}

export default FeedHeader

const StyledWrapper = styled.div`
  display: flex;
  margin-bottom: 1rem;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid ${({ theme }) => theme.colors.gray6};
`
</file>

<file path="src/routes/Feed/PostList/PostCard.tsx">
import Link from "next/link"
import { CONFIG } from "site.config"
import { formatDate } from "src/libs/utils"
import Tag from "../../../components/Tag"
import { TPost } from "../../../types"
import Image from "next/image"
import Category from "../../../components/Category"
import styled from "@emotion/styled"

type Props = {
  data: TPost
}

const PostCard: React.FC<Props> = ({ data }) => {
  const category = (data.category && data.category?.[0]) || undefined

  return (
    <StyledWrapper href={`/${data.slug}`}>
      <article>
        {category && (
          <div className="category">
            <Category>{category}</Category>
          </div>
        )}
        {data.thumbnail && (
          <div className="thumbnail">
            <Image
              src={data.thumbnail}
              fill
              alt={data.title}
              css={{ objectFit: "cover" }}
            />
          </div>
        )}
        <div data-thumb={!!data.thumbnail} className="content">
          <header className="top">
            <h2>{data.title}</h2>
          </header>
          <div className="date">
            <div className="content">
              {formatDate(
                data?.date?.start_date || data.createdTime,
                CONFIG.lang
              )}
            </div>
          </div>
          <div className="summary">
            <p>{data.summary}</p>
          </div>
          <div className="tags">
            {data.tags &&
              data.tags.map((tag: string, idx: number) => (
                <Tag key={idx}>{tag}</Tag>
              ))}
          </div>
        </div>
      </article>
    </StyledWrapper>
  )
}

export default PostCard

const StyledWrapper = styled(Link)`
  article {
    overflow: hidden;
    position: relative;
    margin-bottom: 1.5rem;
    border-radius: 1rem;
    background-color: ${({ theme }) =>
      theme.scheme === "light" ? "white" : theme.colors.gray4};
    transition-property: box-shadow;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;

    @media (min-width: 768px) {
      margin-bottom: 2rem;
    }

    :hover {
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
        0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }
    > .category {
      position: absolute;
      top: 1rem;
      left: 1rem;
      z-index: 10;
    }

    > .thumbnail {
      position: relative;
      width: 100%;
      background-color: ${({ theme }) => theme.colors.gray2};
      padding-bottom: 66%;

      @media (min-width: 1024px) {
        padding-bottom: 50%;
      }
    }
    > .content {
      padding: 1rem;

      &[data-thumb="false"] {
        padding-top: 3.5rem;
      }
      > .top {
        display: flex;
        flex-direction: column;
        justify-content: space-between;

        @media (min-width: 768px) {
          flex-direction: row;
          align-items: baseline;
        }
        h2 {
          margin-bottom: 0.5rem;
          font-size: 1.125rem;
          line-height: 1.75rem;
          font-weight: 500;

          cursor: pointer;

          @media (min-width: 768px) {
            font-size: 1.25rem;
            line-height: 1.75rem;
          }
        }
      }
      > .date {
        display: flex;
        margin-bottom: 1rem;
        gap: 0.5rem;
        align-items: center;
        .content {
          font-size: 0.875rem;
          line-height: 1.25rem;
          color: ${({ theme }) => theme.colors.gray10};
          @media (min-width: 768px) {
            margin-left: 0;
          }
        }
      }
      > .summary {
        margin-bottom: 1rem;
        p {
          display: none;
          line-height: 2rem;
          color: ${({ theme }) => theme.colors.gray11};

          @media (min-width: 768px) {
            display: block;
          }
        }
      }
      > .tags {
        display: flex;
        gap: 0.5rem;
      }
    }
  }
`
</file>

<file path="src/routes/Feed/TagList.tsx">
import styled from "@emotion/styled"
import { useRouter } from "next/router"
import React from "react"
import { Emoji } from "src/components/Emoji"
import { useTagsQuery } from "src/hooks/useTagsQuery"

type Props = {}

const TagList: React.FC<Props> = () => {
  const router = useRouter()
  const currentTag = router.query.tag || undefined
  const data = useTagsQuery()

  const handleClickTag = (value: any) => {
    // delete
    if (currentTag === value) {
      router.push({
        query: {
          ...router.query,
          tag: undefined,
        },
      })
    }
    // add
    else {
      router.push({
        query: {
          ...router.query,
          tag: value,
        },
      })
    }
  }

  return (
    <StyledWrapper>
      <div className="top">
        <Emoji>🏷️</Emoji> Tags
      </div>
      <div className="list">
        {Object.keys(data).map((key) => (
          <a
            key={key}
            data-active={key === currentTag}
            onClick={() => handleClickTag(key)}
          >
            {key}
          </a>
        ))}
      </div>
    </StyledWrapper>
  )
}

export default TagList

const StyledWrapper = styled.div`
  .top {
    display: none;
    padding: 0.25rem;
    margin-bottom: 0.75rem;

    @media (min-width: 1024px) {
      display: block;
    }
  }

  .list {
    display: flex;
    margin-bottom: 1.5rem;
    gap: 0.25rem;
    overflow: scroll;

    scrollbar-width: none;
    -ms-overflow-style: none;
    ::-webkit-scrollbar {
      width: 0;
      height: 0;
    }

    @media (min-width: 1024px) {
      display: block;
    }

    a {
      display: block;
      padding: 0.25rem;
      padding-left: 1rem;
      padding-right: 1rem;
      margin-top: 0.25rem;
      margin-bottom: 0.25rem;
      border-radius: 0.75rem;
      font-size: 0.875rem;
      line-height: 1.25rem;
      color: ${({ theme }) => theme.colors.gray10};
      flex-shrink: 0;
      cursor: pointer;

      :hover {
        background-color: ${({ theme }) => theme.colors.gray4};
      }
      &[data-active="true"] {
        color: ${({ theme }) => theme.colors.gray12};
        background-color: ${({ theme }) => theme.colors.gray4};

        :hover {
          background-color: ${({ theme }) => theme.colors.gray4};
        }
      }
    }
  }
`
</file>

<file path="deploy.sh">
# 停止并移除当前运行的容器和网络，但保留数据卷
docker-compose down

# 清理旧的构建缓存
docker builder prune -f

# 使用Docker Compose构建服务，允许使用缓存
docker-compose build

# 启动服务，并在后台运行
docker-compose up -d
</file>

<file path="next-sitemap.config.js">
const { CONFIG } = require("./site.config")

module.exports = {
  siteUrl: CONFIG.link,
  generateRobotsTxt: true,
  sitemapSize: 7000,
  generateIndexSitemap: false,
}
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path=".github/CODE_OF_CONDUCT.md">
# Contributor Covenant Code of Conduct

## Our Pledge

In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.

## Our Standards

Examples of behavior that contributes to creating a positive environment include:

- Using welcoming and inclusive language
- Being respectful of differing viewpoints and experiences
- Gracefully accepting constructive criticism
- Focusing on what is best for the community
- Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

- The use of sexualized language or imagery and unwelcome sexual attention or advances
- Trolling, insulting/derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or electronic address, without explicit permission
- Other conduct which could reasonably be considered inappropriate in a professional setting

## Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.

## Scope

This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the [project maintainer](https://github.com/morethanmin) using any of the private contact addresses. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org), version 1.4, available at <https://www.contributor-covenant.org/version/1/4/code-of-conduct.html>

For answers to common questions about this code of conduct, see <https://www.contributor-covenant.org/faq>
</file>

<file path=".github/CONTRIBUTING.md">
# Contributing

When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change.
Please note we have a [code of conduct](CODE_OF_CONDUCT.md), please follow it in all your interactions with the project.

## Development environment setup

To set up a development environment, please follow these steps:

1. Clone your repo

   ```sh
   git clone [YOUR_REPOSITORY_URL]
   ```

2. Install all the packages.

   ```sh
   yarn add
   ```

3. Start the development Server.

   ```sh
   yarn dev
   ```

### Commit message rules

Consider following the below format for the commit message:

Commit Type : `feat|fix|perf|refactor|test|ci|docs|build|chore`

**Examples**

- feat: when create new feature.
- style: when styling a this application.
- fix: when fixing a bug.

## Issues and feature requests

You've found a bug in the source code, a mistake in the documentation or maybe you'd like a new feature? You can help us by [submitting an issue on GitHub](https://github.com/morethanmin/morethan-log/issues). Before you create an issue, make sure to search the issue archive -- your issue may have already been addressed!

Please try to create bug reports that are:

- _Reproducible._ Include steps to reproduce the problem.
- _Specific._ Include as much detail as possible: which version, what environment, etc.
- _Unique._ Do not duplicate existing opened issues.
- _Scoped to a Single Bug._ One bug per report.

If you have any great ideas of Feature Request, please avoid adding it to the Issues section in Github and instead [start a new Discussion on Github](https://github.com/morethanmin/morethan-log/discussions/categories/ideas). This allows the maintainers and the member a common place to discuss about the Request. Make sure to check if your request or idea has already been discussed or closed to avoid duplication.

**Even better: Submit a pull request with a fix or new feature!**

### How to submit a Pull Request

1. Search our repository for open or closed [Pull Requests](https://github.com/morethanmin/morethan-log/pulls) that relate to your submission. You don't want to duplicate effort.
2. Fork the project.
3. Create your feature branch (`git checkout -b feat/amazing_feature`).
4. Commit your changes (`git commit -m 'feat: add amazing_feature'`). Please follow the specification mentioned above for your commit messages.
5. Push to the branch (`git push origin feat/amazing_feature`).
6. [Open a Pull Request](https://github.com/morethanmin/morethan-log/compare?expand=1).
7. Make sure to fill in the all the details in the Pull Request to make it easier for the reviewers. Make sure to refer to any discussion or Issues that your PR is fixing.
</file>

<file path="public/robots.txt">
# *
User-agent: *
Allow: /

# Host
Host: https://morethan-log.vercel.app

# Sitemaps
Sitemap: https://morethan-log.vercel.app/sitemap.xml
</file>

<file path="src/apis/notion-client/getPosts.ts">
import { CONFIG } from "site.config"
import { NotionAPI } from "notion-client"
import { idToUuid } from "notion-utils"

import getAllPageIds from "src/libs/utils/notion/getAllPageIds"
import getPageProperties from "src/libs/utils/notion/getPageProperties"
import { TPosts } from "src/types"

/**
 * @param {{ includePages: boolean }} - false: posts only / true: include pages
 */

// TODO: react query를 사용해서 처음 불러온 뒤로는 해당데이터만 사용하도록 수정
export const getPosts = async () => {
  let id = CONFIG.notionConfig.pageId as string
  const api = new NotionAPI()

  const response = await api.getPage(id)
  id = idToUuid(id)
  const collection = Object.values(response.collection)[0]?.value
  const block = response.block
  const schema = collection?.schema

  const rawMetadata = block[id].value

  // Check Type
  if (
    rawMetadata?.type !== "collection_view_page" &&
    rawMetadata?.type !== "collection_view"
  ) {
    return []
  } else {
    // Construct Data
    const pageIds = getAllPageIds(response)
    const data = []
    for (let i = 0; i < pageIds.length; i++) {
      const id = pageIds[i]
      const properties = (await getPageProperties(id, block, schema)) || null
      // Add fullwidth, createdtime to properties
      properties.createdTime = new Date(
        block[id].value?.created_time
      ).toString()
      properties.fullWidth =
        (block[id].value?.format as any)?.page_full_width ?? false

      data.push(properties)
    }

    // Sort by date
    data.sort((a: any, b: any) => {
      const dateA: any = new Date(a?.date?.start_date || a.createdTime)
      const dateB: any = new Date(b?.date?.start_date || b.createdTime)
      return dateB - dateA
    })

    const posts = data as TPosts
    return posts
  }
}
</file>

<file path="src/components/Tag.tsx">
import styled from "@emotion/styled"
import { useRouter } from "next/router"
import React from "react"

type Props = {
  children: string
}

const Tag: React.FC<Props> = ({ children }) => {
  const router = useRouter()

  const handleClick = (value: string) => {
    router.push(`/?tag=${value}`)
  }
  return (
    <StyledWrapper onClick={() => handleClick(children)}>
      {children}
    </StyledWrapper>
  )
}

export default Tag

const StyledWrapper = styled.div`
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
  padding-left: 0.5rem;
  padding-right: 0.5rem;
  border-radius: 50px;
  font-size: 0.75rem;
  line-height: 1rem;
  font-weight: 400;
  color: ${({ theme }) => theme.colors.gray10};
  background-color: ${({ theme }) => theme.colors.gray5};
  cursor: pointer;
`
</file>

<file path="src/constants/index.ts">
export const DEFAULT_CATEGORY = "📂 All" as string
</file>

<file path="src/hooks/usePostQuery.ts">
import { useQuery } from "@tanstack/react-query"
import { useRouter } from "next/router"
import { queryKey } from "src/constants/queryKey"
import { PostDetail } from "src/types"

const usePostQuery = () => {
  const router = useRouter()
  const { slug } = router.query
  const { data } = useQuery<PostDetail>({
    queryKey: queryKey.post(`${slug}`),
    enabled: false,
  })

  return data
}

export default usePostQuery
</file>

<file path="src/layouts/RootLayout/ThemeProvider/Global/index.tsx">
import { Global as _Global, css, useTheme } from "@emotion/react"

import { ThemeProvider as _ThemeProvider } from "@emotion/react"
import { Inter } from "next/font/google"

const inter = Inter({ subsets: ["latin"] })

export const Global = () => {
  const theme = useTheme()

  return (
    <_Global
      styles={css`
        :root {
          --notion-font: ${inter.style.fontFamily};
        }
        body {
          margin: 0;
          padding: 0;
          color: ${theme.colors.gray12};
          background-color: ${theme.colors.gray2};
          font-family: ${inter.style.fontFamily};
          font-weight: ${inter.style.fontWeight};
          font-style: ${inter.style.fontStyle};
        }

        * {
          color-scheme: ${theme.scheme};
          box-sizing: border-box;
        }

        h1,
        h2,
        h3,
        h4,
        h5,
        h6 {
          margin: 0;
          font-weight: inherit;
          font-style: inherit;
        }

        a {
          all: unset;
          cursor: pointer;
        }

        ul {
          padding: 0;
        }

        // init button
        button {
          all: unset;
          cursor: pointer;
        }

        // init input
        input {
          all: unset;
          box-sizing: border-box;
        }

        // init textarea
        textarea {
          border: none;
          background-color: transparent;
          font-family: inherit;
          padding: 0;
          outline: none;
          resize: none;
          color: inherit;
        }

        hr {
          width: 100%;
          border: none;
          margin: 0;
          border-top: 1px solid ${theme.colors.gray6};
        }
      `}
    />
  )
}
</file>

<file path="src/libs/gtag.ts">
import { CONFIG } from "site.config"
export const GA_TRACKING_ID = CONFIG.googleAnalytics.config.measurementId

// https://developers.google.com/analytics/devguides/collection/gtagjs/pages
export const pageview = (url: any) => {
  if (typeof window !== "object") return
  window.gtag("config", GA_TRACKING_ID, {
    page_path: url,
  })
}

// https://developers.google.com/analytics/devguides/collection/gtagjs/events
export const event = ({
  action,
  category,
  label,
  value,
}: {
  action: any
  category: any
  label: any
  value: any
}) => {
  if (typeof window !== "object") return
  window.gtag("event", action, {
    event_category: category,
    event_label: label,
    value: value,
  })
}
</file>

<file path="src/routes/Feed/FeedHeader/CategorySelect.tsx">
import useDropdown from "src/hooks/useDropdown"
import { useRouter } from "next/router"
import React from "react"
import { MdExpandMore } from "react-icons/md"
import { DEFAULT_CATEGORY } from "src/constants"
import styled from "@emotion/styled"
import { useCategoriesQuery } from "src/hooks/useCategoriesQuery"

type Props = {}

const CategorySelect: React.FC<Props> = () => {
  const router = useRouter()
  const data = useCategoriesQuery()
  const [dropdownRef, opened, handleOpen] = useDropdown()

  const currentCategory = `${router.query.category || ``}` || DEFAULT_CATEGORY

  const handleOptionClick = (category: string) => {
    router.push({
      query: {
        ...router.query,
        category,
      },
    })
  }
  return (
    <StyledWrapper>
      <div ref={dropdownRef} className="wrapper" onClick={handleOpen}>
        {currentCategory} Posts <MdExpandMore />
      </div>
      {opened && (
        <div className="content">
          {Object.keys(data).map((key, idx) => (
            <div
              className="item"
              key={idx}
              onClick={() => handleOptionClick(key)}
            >
              {`${key} (${data[key]})`}
            </div>
          ))}
        </div>
      )}
    </StyledWrapper>
  )
}

export default CategorySelect

const StyledWrapper = styled.div`
  position: relative;
  > .wrapper {
    display: flex;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    gap: 0.25rem;
    align-items: center;
    font-size: 1.25rem;
    line-height: 1.75rem;
    font-weight: 700;
    cursor: pointer;
  }
  > .content {
    position: absolute;
    z-index: 40;
    padding: 0.25rem;
    border-radius: 0.75rem;
    background-color: ${({ theme }) => theme.colors.gray2};
    color: ${({ theme }) => theme.colors.gray10};
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
    > .item {
      padding: 0.25rem;
      padding-left: 0.5rem;
      padding-right: 0.5rem;
      border-radius: 0.75rem;
      font-size: 0.875rem;
      line-height: 1.25rem;
      white-space: nowrap;
      cursor: pointer;

      :hover {
        background-color: ${({ theme }) => theme.colors.gray4};
      }
    }
  }
`
</file>

<file path="src/routes/Feed/PostList/index.tsx">
import { useRouter } from "next/router"
import React, { useEffect, useState } from "react"
import PostCard from "src/routes/Feed/PostList/PostCard"
import { DEFAULT_CATEGORY } from "src/constants"
import usePostsQuery from "src/hooks/usePostsQuery"

type Props = {
  q: string
}

const PostList: React.FC<Props> = ({ q }) => {
  const router = useRouter()
  const data = usePostsQuery()
  const [filteredPosts, setFilteredPosts] = useState(data)

  const currentTag = `${router.query.tag || ``}` || undefined
  const currentCategory = `${router.query.category || ``}` || DEFAULT_CATEGORY
  const currentOrder = `${router.query.order || ``}` || "desc"

  useEffect(() => {
    setFilteredPosts(() => {
      let newFilteredPosts = data
      // keyword
      newFilteredPosts = newFilteredPosts.filter((post) => {
        const tagContent = post.tags ? post.tags.join(" ") : ""
        const searchContent = post.title + post.summary + tagContent
        return searchContent.toLowerCase().includes(q.toLowerCase())
      })

      // tag
      if (currentTag) {
        newFilteredPosts = newFilteredPosts.filter(
          (post) => post && post.tags && post.tags.includes(currentTag)
        )
      }

      // category
      if (currentCategory !== DEFAULT_CATEGORY) {
        newFilteredPosts = newFilteredPosts.filter(
          (post) =>
            post && post.category && post.category.includes(currentCategory)
        )
      }
      // order
      if (currentOrder !== "desc") {
        newFilteredPosts = newFilteredPosts.reverse()
      }

      return newFilteredPosts
    })
  }, [q, currentTag, currentCategory, currentOrder, setFilteredPosts])

  return (
    <>
      <div className="my-2">
        {!filteredPosts.length && (
          <p className="text-gray-500 dark:text-gray-300">Nothing! 😺</p>
        )}
        {filteredPosts.map((post) => (
          <PostCard key={post.id} data={post} />
        ))}
      </div>
    </>
  )
}

export default PostList
</file>

<file path="src/routes/Feed/ContactCard.tsx">
import { CONFIG } from "site.config"
import React from "react"
import {
  AiOutlineInstagram,
  AiOutlineGithub,
  AiOutlineMail,
  AiFillLinkedin,
} from "react-icons/ai"
import styled from "@emotion/styled"

const ContactCard: React.FC = () => {
  return (
    <>
      <StyledTitle>💬 Contact</StyledTitle>
      <StyledWrapper>
        {CONFIG.profile.github && (
          <a
            href={`https://github.com/${CONFIG.profile.github}`}
            rel="noreferrer"
            target="_blank"
          >
            <AiOutlineGithub className="icon" />
            <div className="name">github</div>
          </a>
        )}
        {CONFIG.profile.email && (
          <a
            href={`mailto:${CONFIG.profile.email}`}
            rel="noreferrer"
            target="_blank"
            css={{ overflow: "hidden" }}
          >
            <AiOutlineMail className="icon" />
            <div className="name">email</div>
          </a>
        )}
      </StyledWrapper>
    </>
  )
}

export default ContactCard

const StyledTitle = styled.div`
  padding: 0.25rem;
  margin-bottom: 0.75rem;
`
const StyledWrapper = styled.div`
  display: flex;
  padding: 0.25rem;
  flex-direction: column;
  border-radius: 1rem;
  background-color: ${({ theme }) =>
    theme.scheme === "light" ? "white" : theme.colors.gray4};
  a {
    display: flex;
    padding: 0.75rem;
    gap: 0.75rem;
    align-items: center;
    border-radius: 1rem;
    color: ${({ theme }) => theme.colors.gray11};
    cursor: pointer;

    :hover {
      color: ${({ theme }) => theme.colors.gray12};
      background-color: ${({ theme }) => theme.colors.gray5};
    }
    .icon {
      font-size: 1.5rem;
      line-height: 2rem;
    }
    .name {
      font-size: 0.875rem;
      line-height: 1.25rem;
    }
  }
`
</file>

<file path="src/routes/Feed/index.tsx">
import { useState } from "react"

import SearchInput from "./SearchInput"
import { FeedHeader } from "./FeedHeader"
import Footer from "./Footer"
import styled from "@emotion/styled"
import TagList from "./TagList"
import MobileProfileCard from "./MobileProfileCard"
import ProfileCard from "./ProfileCard"
import ServiceCard from "./ServiceCard"
import ContactCard from "./ContactCard"
import PostList from "./PostList"

const HEADER_HEIGHT = 73

type Props = {}

const Feed: React.FC<Props> = () => {
  const [q, setQ] = useState("")

  return (
    <StyledWrapper>
      <div
        className="lt"
        css={{
          height: `calc(100vh - ${HEADER_HEIGHT}px)`,
        }}
      >
        <TagList />
      </div>
      <div className="mid">
        <MobileProfileCard />
        <SearchInput value={q} onChange={(e) => setQ(e.target.value)} />
        <div className="tags">
          <TagList />
        </div>
        <FeedHeader />
        <PostList q={q} />
        <div className="footer">
          <Footer />
        </div>
      </div>
      <div
        className="rt"
        css={{
          height: `calc(100vh - ${HEADER_HEIGHT}px)`,
        }}
      >
        <ProfileCard />
        <ServiceCard />
        <ContactCard />
        <div className="footer">
          <Footer />
        </div>
      </div>
    </StyledWrapper>
  )
}

export default Feed

const StyledWrapper = styled.div`
  grid-template-columns: repeat(12, minmax(0, 1fr));

  padding: 2rem 0;
  display: grid;
  gap: 1.5rem;

  @media (max-width: 768px) {
    display: block;
    padding: 0.5rem 0;
  }

  > .lt {
    display: none;
    overflow: scroll;
    position: sticky;
    grid-column: span 2 / span 2;
    top: ${HEADER_HEIGHT - 10}px;

    scrollbar-width: none;
    -ms-overflow-style: none;
    &::-webkit-scrollbar {
      display: none;
    }

    @media (min-width: 1024px) {
      display: block;
    }
  }

  > .mid {
    grid-column: span 12 / span 12;

    @media (min-width: 1024px) {
      grid-column: span 7 / span 7;
    }

    > .tags {
      display: block;

      @media (min-width: 1024px) {
        display: none;
      }
    }

    > .footer {
      padding-bottom: 2rem;
      @media (min-width: 1024px) {
        display: none;
      }
    }
  }

  > .rt {
    scrollbar-width: none;
    -ms-overflow-style: none;
    &::-webkit-scrollbar {
      display: none;
    }

    display: none;
    overflow: scroll;
    position: sticky;
    top: ${HEADER_HEIGHT - 10}px;

    @media (min-width: 1024px) {
      display: block;
      grid-column: span 3 / span 3;
    }

    .footer {
      padding-top: 1rem;
    }
  }
`
</file>

<file path="src/routes/Feed/ServiceCard.tsx">
import { CONFIG } from "site.config"
import React from "react"
import { AiFillCodeSandboxCircle } from "react-icons/ai"
import styled from "@emotion/styled"
import { Emoji } from "src/components/Emoji"

const ServiceCard: React.FC = () => {
  return null
}

export default ServiceCard

const StyledTitle = styled.div`
  padding: 0.25rem;
  margin-bottom: 0.75rem;
`

const StyledWrapper = styled.div`
  display: flex;
  padding: 0.25rem;
  margin-bottom: 2.25rem;
  flex-direction: column;
  border-radius: 1rem;
  background-color: ${({ theme }) =>
    theme.scheme === "light" ? "white" : theme.colors.gray4};
  > a {
    display: flex;
    padding: 0.75rem;
    gap: 0.75rem;
    align-items: center;
    border-radius: 1rem;
    color: ${({ theme }) => theme.colors.gray11};
    cursor: pointer;

    :hover {
      color: ${({ theme }) => theme.colors.gray12};
      background-color: ${({ theme }) => theme.colors.gray5};
    }
    .icon {
      font-size: 1.5rem;
      line-height: 2rem;
    }
    .name {
      font-size: 0.875rem;
      line-height: 1.25rem;
    }
  }
`
</file>

<file path="Dockerfile">
# 使用 node:slim 作为基础镜像
FROM node:20.10.0-slim

ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

# 创建工作目录
WORKDIR /app

# 复制 package.json 和 yarn.lock 文件
COPY . .

# 安装项目依赖
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile

# 构建 Next.js 应用
RUN pnpm run build

# 暴露 9876 端口
EXPOSE 9876

# 运行 Next.js 应用
CMD ["pnpm", "start"]
</file>

<file path="next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.
</file>

<file path="next.config.js">
module.exports = {
  images: {
    domains: ['www.notion.so', 'lh5.googleusercontent.com', 's3-us-west-2.amazonaws.com'],
  },
}
</file>

<file path=".github/PULL_REQUEST_TEMPLATE.md">
<!-- 1. Verify PR Title -->
<!-- PR Title example: `[fix | refactor | feat | update | documentation]: repair the page layout` -->

<!-- 2. Provide Description of the changes -->

## Description

<!--
- provide a description of the changes made. If there are some pending TODOs, include them there as well.
- Any guidance for reviewers to better understand the changes.
- Any visuals (screenshots, screen recordings) that can give assurance that the changes are safe to merge.
-->

<!-- 3. Add link to the Github Issue for which these changes are made -->

## Related tickets

https://github.com/morethanmin/morethan-log/issues/XX

<!-- 4. Make sure the following actions are checked before finalising your PR -->

## PR Checklist

- [ ] I have read the [Contributing Guide](./docs/CONTRIBUTING.md)
- [ ] I have written documents and tests, if needed.
</file>

<file path="src/routes/Detail/components/NotionRenderer/index.tsx">
import dynamic from "next/dynamic"
import Image from "next/image"
import Link from "next/link"
import { ExtendedRecordMap } from "notion-types"
import useScheme from "src/hooks/useScheme"

// core styles shared by all of react-notion-x (required)
import "react-notion-x/src/styles.css"
// used for code syntax highlighting (optional)
import "prismjs/themes/prism-tomorrow.css"

import { FC } from "react"
import styled from "@emotion/styled"

const _NotionRenderer = dynamic(
  () => import("react-notion-x").then((m) => m.NotionRenderer),
  { ssr: false }
)

const Code = dynamic(() =>
  import("react-notion-x/build/third-party/code").then(async (m) => {
    await Promise.all([
      import("prismjs/components/prism-markup-templating.js"),
      import("prismjs/components/prism-markup.js"),
      import("prismjs/components/prism-bash.js"),
      import("prismjs/components/prism-c.js"),
      import("prismjs/components/prism-cpp.js"),
      import("prismjs/components/prism-csharp.js"),
      import("prismjs/components/prism-docker.js"),
      import("prismjs/components/prism-java.js"),
      import("prismjs/components/prism-js-templates.js"),
      import("prismjs/components/prism-coffeescript.js"),
      import("prismjs/components/prism-diff.js"),
      import("prismjs/components/prism-git.js"),
      import("prismjs/components/prism-go.js"),
      import("prismjs/components/prism-graphql.js"),
      import("prismjs/components/prism-handlebars.js"),
      import("prismjs/components/prism-less.js"),
      import("prismjs/components/prism-makefile.js"),
      import("prismjs/components/prism-markdown.js"),
      import("prismjs/components/prism-objectivec.js"),
      import("prismjs/components/prism-ocaml.js"),
      import("prismjs/components/prism-python.js"),
      import("prismjs/components/prism-reason.js"),
      import("prismjs/components/prism-rust.js"),
      import("prismjs/components/prism-sass.js"),
      import("prismjs/components/prism-scss.js"),
      import("prismjs/components/prism-solidity.js"),
      import("prismjs/components/prism-sql.js"),
      import("prismjs/components/prism-stylus.js"),
      import("prismjs/components/prism-swift.js"),
      import("prismjs/components/prism-wasm.js"),
      import("prismjs/components/prism-yaml.js"),
    ])
    return m.Code
  })
)

const Collection = dynamic(() =>
  import("react-notion-x/build/third-party/collection").then(
    (m) => m.Collection
  )
)
const CallOut = dynamic(
  () => import("src/components/CallOut").then((m) => m.CallOut),
  { ssr: false }
)

const mapPageUrl = (id: string) => {
  return "https://www.notion.so/" + id.replace(/-/g, "")
}

type Props = {
  recordMap: ExtendedRecordMap
}

const NotionRenderer: FC<Props> = ({ recordMap }) => {
  const [scheme] = useScheme()
  return (
    <StyledWrapper>
      <_NotionRenderer
        darkMode={scheme === "dark"}
        recordMap={recordMap}
        components={{
          Code,
          Collection,
          Callout: CallOut,
          nextImage: Image,
          nextLink: Link,
        }}
        mapPageUrl={mapPageUrl}
      />
    </StyledWrapper>
  )
}

export default NotionRenderer

const StyledWrapper = styled.div`
  /* // TODO: why render? */
  .notion-collection-page-properties {
    display: none !important;
  }
  .notion-page {
    padding: 0;
  }
`
</file>

<file path="src/routes/Detail/PageDetail/index.tsx">
import React from "react"
import styled from "@emotion/styled"
import NotionRenderer from "../components/NotionRenderer"
import usePostQuery from "src/hooks/usePostQuery"
type Props = {}

const PageDetail: React.FC<Props> = () => {
  const data = usePostQuery()

  if (!data) return null
  return (
    <StyledWrapper>
      <NotionRenderer recordMap={data.recordMap} />
    </StyledWrapper>
  )
}

export default PageDetail

const StyledWrapper = styled.div`
  margin: 0 auto;
  max-width: 56rem;
`
</file>

<file path="src/routes/Detail/PostDetail/index.tsx">
import React from "react"
import PostHeader from "./PostHeader"
import Footer from "./PostFooter"
import Category from "src/components/Category"
import styled from "@emotion/styled"
import NotionRenderer from "../components/NotionRenderer"
import usePostQuery from "src/hooks/usePostQuery"

type Props = {}

const PostDetail: React.FC<Props> = () => {
  const data = usePostQuery()

  if (!data) return null

  const category = (data.category && data.category?.[0]) || undefined

  return (
    <StyledWrapper>
      <article>
        {category && (
          <div css={{ marginBottom: "0.5rem" }}>
            <Category readOnly={data.status?.[0] === "PublicOnDetail"}>
              {category}
            </Category>
          </div>
        )}
        {data.type[0] === "Post" && <PostHeader data={data} />}
        <div>
          <NotionRenderer recordMap={data.recordMap} />
        </div>
        {data.type[0] === "Post" && (
          <>
            <Footer />
          </>
        )}
      </article>
    </StyledWrapper>
  )
}

export default PostDetail

const StyledWrapper = styled.div`
  padding-left: 1.5rem;
  padding-right: 1.5rem;
  padding-top: 3rem;
  padding-bottom: 3rem;
  border-radius: 1.5rem;
  max-width: 56rem;
  background-color: ${({ theme }) =>
    theme.scheme === "light" ? "white" : theme.colors.gray4};
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -1px rgba(0, 0, 0, 0.06);
  margin: 0 auto;
  > article {
    margin: 0 auto;
    max-width: 42rem;
  }
`
</file>

<file path="src/pages/_app.tsx">
import { AppPropsWithLayout } from "../types"
import { Hydrate, QueryClientProvider } from "@tanstack/react-query"

import { RootLayout } from "src/layouts"
import { queryClient } from "src/libs/react-query"
import "./style/global.css"

function App({ Component, pageProps }: AppPropsWithLayout) {
  const getLayout = Component.getLayout || ((page) => page)

  return (
    <QueryClientProvider client={queryClient}>
      <Hydrate state={pageProps.dehydratedState}>
        <RootLayout>{getLayout(<Component {...pageProps} />)}</RootLayout>
      </Hydrate>
    </QueryClientProvider>
  )
}

export default App
</file>

<file path="src/pages/404.tsx">
import { CONFIG } from "../../site.config"
import { NextPageWithLayout, TPosts, TTags } from "../types"
import CustomError from "../routes/Error"
import MetaConfig from "src/components/MetaConfig"

type Props = {
  tags: TTags
  posts: TPosts
}

const NotFoundPage: NextPageWithLayout<Props> = () => {
  return <CustomError />
}

NotFoundPage.getLayout = (page) => {
  return (
    <>
      <MetaConfig
        {...{
          title: CONFIG.blog.title,
          description: CONFIG.blog.description,
          type: "website",
          url: CONFIG.link,
        }}
      />
      {page}
    </>
  )
}

export default NotFoundPage
</file>

<file path="src/libs/utils/notion/filterPosts.ts">
import { TPosts, TPostStatus, TPostType } from "src/types"

export type FilterPostsOptions = {
  acceptStatus?: TPostStatus[]
  acceptType?: TPostType[]
}

const initialOption: FilterPostsOptions = {
  acceptStatus: ["Public"],
  acceptType: ["Post"],
}
const current = new Date()
const tomorrow = new Date(current)
tomorrow.setDate(tomorrow.getDate() + 1)
tomorrow.setHours(0, 0, 0, 0)

function shortHash(title: string) {
  let hash = 0;
  for (let i = 0; i < title.length; i++) {
    hash = Math.imul(31, hash) + title.charCodeAt(i) | 0;
  }
  return Math.abs(hash).toString(16)
}

export function filterPosts(
  posts: TPosts,
  options: FilterPostsOptions = initialOption
) {
  const { acceptStatus = ["Public"], acceptType = ["Post"] } = options
  const filteredPosts = posts
    .map((post) => {
      const isNotSlug = !post.slug;
      const hash = shortHash(post.title + ' ' + post.createdTime);
      return {
        ...post,
        slug: isNotSlug ? hash : post.slug,
      }
    })
    // filter data
    .filter((post) => {
      const postDate = new Date(post?.date?.start_date || post.createdTime)
      if (!post.title || !post.slug || postDate > tomorrow) return false
      return true
    })
    // filter status
    .filter((post) => {
      const postStatus = post.status?.[0]
      return acceptStatus.includes(postStatus)
    })
    // filter type
    .filter((post) => {
      const postType = post.type[0]
      return acceptType.includes(postType)
    })
  return filteredPosts
}
</file>

<file path="src/routes/Detail/index.tsx">
import PostDetail from "./PostDetail"
import PageDetail from "./PageDetail"
import styled from "@emotion/styled"
import usePostQuery from "src/hooks/usePostQuery"

type Props = {}

const Detail: React.FC<Props> = () => {
  const data = usePostQuery()

  if (!data) return null
  return (
    <StyledWrapper data-type={data.type}>
      {data.type[0] === "Page" && <PageDetail />}
      {data.type[0] !== "Page" && <PostDetail />}
    </StyledWrapper>
  )
}

export default Detail

const StyledWrapper = styled.div`
  padding: 2rem 0;

  &[data-type="Paper"] {
    padding: 40px 0;
  }
`
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "esnext",
    "module": "esnext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "checkJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "jsxImportSource": "@emotion/react",
    "incremental": true,
    "baseUrl": "."
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "site.config.js"],
  "exclude": ["node_modules"]
}
</file>

<file path="src/types/index.ts">
import { NextPage } from "next"
import { AppProps } from "next/app"
import { ExtendedRecordMap } from "notion-types"
import { ReactElement, ReactNode } from "react"

// TODO: refactor types
export type NextPageWithLayout<PageProps = {}> = NextPage<PageProps> & {
  getLayout?: (page: ReactElement) => ReactNode
}

export type AppPropsWithLayout = AppProps & {
  Component: NextPageWithLayout
}

export type TPostStatus = "Private" | "Public" | "PublicOnDetail"
export type TPostType = "Post" | "Paper" | "Page"

export type TPost = {
  id: string
  date: { start_date: string }
  type: TPostType[]
  slug: string
  tags?: string[]
  category?: string[]
  summary?: string
  author?: {
    id: string
    name: string
    profile_photo?: string
  }[]
  title: string
  status: TPostStatus[]
  createdTime: string
  fullWidth: boolean
  thumbnail?: string
}

export type PostDetail = TPost & {
  recordMap: ExtendedRecordMap
}

export type TPosts = TPost[]

export type TTags = {
  [tagName: string]: number
}
export type TCategories = {
  [category: string]: number
}

export type ThemeType = "dark" | "light"
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",

    // Or if using `src` directory:
    "./src/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
</file>

<file path="src/pages/_document.tsx">
import Document, { Html, Head, Main, NextScript } from "next/document"
import { CONFIG } from "site.config"

class MyDocument extends Document {
  render() {
    return (
      <Html lang={CONFIG.lang}>
        <Head>
          <link rel="icon" href="/favicon.ico" />
          <link
            rel="apple-touch-icon"
            sizes="192x192"
            href="/apple-touch-icon.png"
          ></link>
          <link
            rel="alternate"
            type="application/rss+xml"
            title="RSS 2.0"
            href="/feed"
          ></link>
          {/* google search console */}
          {CONFIG.googleSearchConsole.enable === true && (
            <>
              <meta
                name="google-site-verification"
                content={CONFIG.googleSearchConsole.config.siteVerification}
              />
            </>
          )}
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    )
  }
}

export default MyDocument
</file>

<file path="package.json">
{
  "name": "blog",
  "version": "1.3.0",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/morethanmin/morethan-log.git"
  },
  "scripts": {
    "dev": "next dev -p 6789",
    "build": "NODE_OPTIONS=’--max-old-space-size=1024‘ next build",
    "start": "next start -p 9876",
    "postbuild": "next-sitemap --config next-sitemap.config.js",
    "lint": "next lint"
  },
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@excalidraw/excalidraw": "^0.17.3",
    "@radix-ui/colors": "^1.0.0",
    "@radix-ui/themes": "^2.0.3",
    "@tanstack/react-query": "^4.29.19",
    "axios": ">=0.21.1",
    "clsx": "^2.1.0",
    "cookies-next": "^2.1.2",
    "next": "^14.1.0",
    "notion-client": "^6.16.0",
    "notion-types": "^6.16.0",
    "notion-utils": "^6.16.0",
    "react": "^18.2.0",
    "react-cusdis": "^2.1.3",
    "react-dom": "^18.2.0",
    "react-icons": "^4.4.0",
    "react-notion-x": "^6.16.0"
  },
  "devDependencies": {
    "@types/gtag.js": "^0.0.12",
    "@types/node": "^18.11.15",
    "@types/react": "^18.0.26",
    "@types/react-dom": "^18.0.9",
    "autoprefixer": "^10.4.17",
    "eslint": "^8.39.0",
    "eslint-config-next": "^14.1.0",
    "next-sitemap": "^3.1.32",
    "postcss": "^8.4.35",
    "prettier": "^2.7.1",
    "tailwindcss": "^3.4.1",
    "typescript": "^4.9.4"
  }
}
</file>

<file path="src/pages/index.tsx">
import Feed from "src/routes/Feed"
import { CONFIG } from "../../site.config"
import { NextPageWithLayout } from "../types"
import { getPosts } from "../apis"
import MetaConfig from "src/components/MetaConfig"
import { queryClient } from "src/libs/react-query"
import { queryKey } from "src/constants/queryKey"
import { GetStaticProps } from "next"
import { dehydrate } from "@tanstack/react-query"
import { filterPosts } from "src/libs/utils/notion"

export const getStaticProps: GetStaticProps = async () => {
  const posts = filterPosts(await getPosts())
  await queryClient.prefetchQuery(queryKey.posts(), () => posts)

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
    revalidate: CONFIG.revalidateTime,
  }
}

const FeedPage: NextPageWithLayout = () => {
  const meta = {
    title: CONFIG.blog.title,
    description: CONFIG.blog.description,
    type: "website",
    url: CONFIG.link,
  }

  return (
    <>
      <MetaConfig {...meta} />
      <Feed />
    </>
  )
}

export default FeedPage
</file>

<file path="site.config.js">
const CONFIG = {
  // profile setting (required)
  profile: {
    name: "余贤俊",
    image: "/avatar3.svg",
    role: "前端开发",
    bio: "世间一切变化皆有利于我",
    email: "codecosine@gmail.com",
    github: "ycosine",
    instagram: "",
  },
  projects: [],
  // blog setting (required)
  blog: {
    title: "Cosine 余弦是定理",
    description: "welcome to my blog!",
  },

  // CONFIG configration (required)
  link: "https://www.0xcos.com",
  since: 2022, // If leave this empty, current year will be used.
  lang: "zh-CN", // ['en-US', 'zh-CN', 'zh-HK', 'zh-TW', 'ja-JP', 'es-ES', 'ko-KR']
  ogImageGenerateURL: "https://og-image-korean.vercel.app", // The link to generate OG image, don't end with a slash

  // notion configuration (required)
  notionConfig: {
    pageId: "f0dfe2de6ac84247a82ff209e67474fe",
  },

  // plugin configuration (optional)
  googleAnalytics: {
    enable: false,
    config: {
      measurementId: process.env.NEXT_PUBLIC_GOOGLE_MEASUREMENT_ID || "",
    },
  },
  googleSearchConsole: {
    enable: false,
    config: {
      siteVerification: process.env.NEXT_PUBLIC_GOOGLE_SITE_VERIFICATION || "",
    },
  },
  utterances: {
    enable: true,
    config: {
      repo: process.env.NEXT_PUBLIC_UTTERANCES_REPO || "",
      "issue-term": "og:title",
      label: "💬 Utterances",
    },
  },
  cusdis: {
    enable: false,
    config: {
      host: "https://cusdis.com",
      appid: "", // Embed Code -> data-app-id value
    },
  },
  isProd: process.env.VERCEL_ENV === "production", // distinguish between development and production environment (ref: https://vercel.com/docs/environment-variables#system-environment-variables)
  revalidateTime: 21600 * 7, // revalidate time for [slug], index
}

module.exports = { CONFIG }
</file>

<file path="src/pages/[slug].tsx">
import Detail from "src/routes/Detail"
import { filterPosts } from "src/libs/utils/notion"
import { CONFIG } from "site.config"
import { NextPageWithLayout } from "../types"
import CustomError from "src/routes/Error"
import { getRecordMap, getPosts } from "src/apis"
import MetaConfig from "src/components/MetaConfig"
import { GetStaticProps } from "next"
import { queryClient } from "src/libs/react-query"
import { queryKey } from "src/constants/queryKey"
import { dehydrate } from "@tanstack/react-query"
import usePostQuery from "src/hooks/usePostQuery"
import { FilterPostsOptions } from "src/libs/utils/notion/filterPosts"

const filter: FilterPostsOptions = {
  acceptStatus: ["Public", "PublicOnDetail"],
  acceptType: ["Paper", "Post", "Page"],
}

export const getStaticPaths = async () => {
  const posts = await getPosts()
  const filteredPost = filterPosts(posts, filter)

  return {
    paths: filteredPost.map((row) => `/${row.slug}`),
    fallback: true,
  }
}

export const getStaticProps: GetStaticProps = async (context) => {
  const slug = context.params?.slug

  const posts = await getPosts()
  const feedPosts = filterPosts(posts)
  await queryClient.prefetchQuery(queryKey.posts(), () => feedPosts)

  const detailPosts = filterPosts(posts, filter)
  const postDetail = detailPosts.find((t: any) => t.slug === slug)
  const recordMap = await getRecordMap(postDetail?.id!)

  await queryClient.prefetchQuery(queryKey.post(`${slug}`), () => ({
    ...postDetail,
    recordMap,
  }))

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
    revalidate: CONFIG.revalidateTime,
  }
}

const DetailPage: NextPageWithLayout = () => {
  const post = usePostQuery()

  if (!post) return <CustomError />

  const image =
    post.thumbnail ??
    CONFIG.ogImageGenerateURL ??
    `${CONFIG.ogImageGenerateURL}/${encodeURIComponent(post.title)}.png`

  const date = post.date?.start_date || post.createdTime || ""

  const meta = {
    title: post.title,
    date: new Date(date).toISOString(),
    image: image,
    description: post.summary || "",
    type: post.type[0],
    url: `${CONFIG.link}/${post.slug}`,
  }

  return (
    <>
      <MetaConfig {...meta} />
      <Detail />
    </>
  )
}

DetailPage.getLayout = (page) => {
  return <>{page}</>
}

export default DetailPage
</file>

<file path="README.md">
# morethan-log

从 morethan-log fork

魔改了比较多内容，文档后面再补

1. 去除了 mermaid

## Features

**📒 Writing posts using notion**

- No need of commiting to Github for posting anything to your website.
- Posts made on Notion are automaticaly updated on your site.

**📄 Use as a page as resume**

- Useful for generating full page sites using Notion.
- Can be used for Resume, Portfolios etc.

**👀 SEO friendly**

- Dynamically generates OG IMAGEs (thumbnails!) for posts. ([og-image-korean](https://github.com/morethanmin/og-image-korean)).
- Dynamically creates sitemap for posts.

**🤖 Customisable and Supports various plugin through CONFIG**

- Your profile information can be updated through Config. (`site.config.js`)
- Plugins support includes, Google Analytics, Search Console and also Commenting using Github Issues(Utterances) or Cusdis.

## Getting Started

1. Star this repo.
2. [Fork](https://github.com/morethanmin/morethan-log/fork) the repo to your Profile.
3. Duplicate [this Notion template](https://quasar-season-ed5.notion.site/12c38b5f459d4eb9a759f92fba6cea36?v=2e7962408e3842b2a1a801bf3546edda), and Share to Web.
4. Copy the Web Link and keep note of the Notion Page Id from the Link which will be in this format [username.notion.site/`NOTION_PAGE_ID`?v=`VERSION_ID`].
5. Clone your forked repo and then customize `site.config.js` based on your preference.
6. Deploy on Vercel, with the following environment variables.

   - `NOTION_PAGE_ID` (Required): The Notion page Id got from the Share to Web URL.
   - `NEXT_PUBLIC_GOOGLE_MEASUREMENT_ID` : For Google analytics Plugin.
   - `NEXT_PUBLIC_GOOGLE_SITE_VERIFICATION` : For Google search console Plugin.

## 10 Steps to build your own morethan-log (by 23.06.23)

<details>
   <summary> Click to see guide </summary>
   
   0. Prepare Notion, Vercel account.

1.  ⭐ `Star` and `Fork` this repo.
    <img src='https://github.com/jhk0530/morethan-log/assets/6457691/b0421776-2bfe-42bc-ae31-d90206fd5789' width = '500'>
    <img src='https://github.com/jhk0530/morethan-log/assets/6457691/185a8e4c-4ae2-4a38-b6f4-dc2a06a45c28' width = '500'>

2.  As you `click` the [Notion template](https://quasar-season-ed5.notion.site/12c38b5f459d4eb9a759f92fba6cea36?v=2e7962408e3842b2a1a801bf3546edda), you will see this notion page in your browser. Click `Duplicate` button(복제 in image) in right top.
    <img src='https://github.com/jhk0530/morethan-log/assets/6457691/a5375429-28f0-4bba-a355-0d391cad58db' width = '500'>

3.  And you will see `notion page in notion app` in your account.
    <img src='https://github.com/jhk0530/morethan-log/assets/6457691/09af5533-43d9-48e5-95eb-dcac84c97c1f' width = '500'>

4.  Click `Share` and `Publish` in right top, and check web link. (Copy web link)
    <img src='https://github.com/jhk0530/morethan-log/assets/6457691/886fe4a2-79ca-4dbc-b1e1-93984e7e3f44' width = '500'>

5.  `Modify` **site.config.js** file in **your** forked repo.

    > 💡 NOTE. I changed **2 RED PART** > <img src='https://github.com/jhk0530/morethan-log/assets/6457691/3d9c0da5-92bc-4372-8752-7bfc810b4986' width = '500'>

6.  Move and `login` to vercel.
    <img src='https://github.com/jhk0530/morethan-log/assets/6457691/07742ad0-4766-43b0-9ebd-5311f9711bc2' width = '500'>

7.  `Build` new project using **Add New...**
    <img src='https://github.com/jhk0530/morethan-log/assets/6457691/517d46be-c9bf-4181-aaa5-e9bd2fcdc822' width = '500'>

8.  `Import` **your forked morethan-log repository**
    <img src='https://github.com/jhk0530/morethan-log/assets/6457691/07742ad0-4766-43b0-9ebd-5311f9711bc2' width = '500'>

9.  `Add` **Environment variabes** to vercel project
    <img src='https://github.com/jhk0530/morethan-log/assets/6457691/703b50a3-3a90-4915-ab73-1baca4c285f8' width = '500'>

10. `Wait` for the deployment to complete. After the deployment is successful, you should see an image like the one below.
    <img src='https://github.com/jhk0530/morethan-log/assets/6457691/a7d72caa-4354-4f81-9577-c773faeed7c6' width = '500'>

🥳 Congratulations. Now check out your blog

   <img src='https://github.com/jhk0530/morethan-log/assets/6457691/3876a273-a270-47ef-a2ad-663519d9e537' width = '500'>

</details>

## Contributing

Check out the [Contributing Guide](.github/CONTRIBUTING.md).

### Contributors

<!--
Contributors template:
<a href="https://github.com/{username}"><img src="{src}" width="50px" alt="{username}" /></a>&nbsp;&nbsp;
-->

<a href="https://github.com/morethanmin/morethan-log/graphs/contributors">
<img src="https://contrib.rocks/image?repo=morethanmin/morethan-log" />
</a>

## Support

morethan-log is an MIT-licensed open source project. It can grow thanks to the sponsors and support from the amazing backers.

### Sponsors

<!--
Sponsors template:
<a href="https://github.com/{uesrname}"><img src="{src}" width="50px" alt="{username}" /></a>&nbsp;&nbsp;
-->

<p>
<a href="https://github.com/siyeons"><img src="https://avatars.githubusercontent.com/u/35549653?v=4" width="50px" alt="siyeons" /></a>&nbsp;&nbsp;
</p>

## License

The [MIT License](LICENSE).
</file>

</files>
